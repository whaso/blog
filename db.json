{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/image-20210622135226744.png","path":"images/image-20210622135226744.png","modified":0,"renderable":0},{"_id":"source/images/image-20220724170433901.png","path":"images/image-20220724170433901.png","modified":0,"renderable":0},{"_id":"source/images/image-20230704132442670.png","path":"images/image-20230704132442670.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4df5e5068e469d08975e754a6d6ca586090f00ad","modified":1645348328047},{"_id":"source/_posts/.DS_Store","hash":"c6ea96f146aca04f82a11db27dae74b0eb6e9ba9","modified":1645348328047},{"_id":"source/_posts/Chapter-01.md","hash":"9c014f4cc64f0e624dc3a90700a80a14d09403f9","modified":1629513023612},{"_id":"source/_posts/Chapter-02.md","hash":"9c2856017944c03409d3433e04d2ee5399fac048","modified":1629514374935},{"_id":"source/_posts/Flask-Migrate报错.md","hash":"7ed6437ff75d0de69e5fd29044fb56dab8278fe9","modified":1623594809292},{"_id":"source/_posts/cookiecutter-flask-restful使用笔记.md","hash":"1c0da3aa5b898c6699ff95f46157acddc4e2e709","modified":1623594809292},{"_id":"source/_posts/c-day01-md.md","hash":"4613549bd76394e0ff91f475ba3948c3fe578c8b","modified":1630230118156},{"_id":"source/_posts/git代码ssh方式部署服务器.md","hash":"cd635a341e021df2c38fbadf191f08e7fec753b1","modified":1645348328047},{"_id":"source/_posts/git代码迁移.md","hash":"a50e36bb3fe193980b312e282be3a7789171d6a9","modified":1645348328047},{"_id":"source/_posts/go从入门到放弃.md","hash":"d6bbd2e43727902cab06ecf32f56e174657dbd9d","modified":1688447513354},{"_id":"source/_posts/hexo部署报错.md","hash":"bfc8016efe16b711139cd89b585cbbaa6f8077d4","modified":1645348328047},{"_id":"source/_posts/machine.md","hash":"42f7d5b676be9d3a32241d45c01eeb57ad1eefd1","modified":1716448773801},{"_id":"source/_posts/mac下使用oracle.md","hash":"5e9a18ca5aa8e6cd421a00515fcc0f0c249dea14","modified":1623594809293},{"_id":"source/_posts/nginx.md","hash":"fe730270ebe4ddfad64568214c49daca6fe76906","modified":1623594809293},{"_id":"source/_posts/nginx相关.md","hash":"7bf0c6274d502a87493745bf775c6d8b86ecdb85","modified":1623594809293},{"_id":"source/_posts/pycharm2vscode.md","hash":"47b3246bc95594eb3d312695a4083c5bbd9b9e1d","modified":1645348328047},{"_id":"source/_posts/python+flask+oracle+docker+alpine.md","hash":"486c6646a5080a366754cf16d05d5055cbe1ab4b","modified":1658650712462},{"_id":"source/_posts/python从入门到放弃.md","hash":"c0cf10ee9f255ba18f542591beffa49ba347aecb","modified":1711096473815},{"_id":"source/_posts/python虚拟环境conda.md","hash":"deeeba404315bc13f9372080861dabf1f278cd7f","modified":1688176695652},{"_id":"source/_posts/人工智能从入门到放弃.md","hash":"0b607547ca423a434a995368e7604a658086834d","modified":1689680253431},{"_id":"source/_posts/微信公众号.md","hash":"297c776888cdf45d55ade12316a44b13d48ec220","modified":1658650712556},{"_id":"source/_posts/源码安装mysql.md","hash":"6c8aad294dc16c1a0d2281cc529564848677ddd8","modified":1629514374936},{"_id":"source/_posts/数据结构从入门到放弃.md","hash":"7456fd1e83cb099fac6e5ead16ff9afa8e00f0dd","modified":1716453002309},{"_id":"source/_posts/计算机组成原理.md","hash":"4eb7a8961d794326a6264ddb4ee7460b544a5814","modified":1689069596173},{"_id":"source/_posts/配置frp内网穿透.md","hash":"1b46acaa26e7d29259251e1a55444957222bc1f1","modified":1649595359912},{"_id":"source/about/index.md","hash":"13ea7b5a5317c2aab559b0911aa307bed7559857","modified":1658650712572},{"_id":"source/categories/index.md","hash":"60eaa8ebe6c37cd97644b7cbf4e667a01567eda3","modified":1658650712572},{"_id":"source/tags/index.md","hash":"6f801b04acaa8955d6d9d337370286ca5c4b0fef","modified":1658650712572},{"_id":"source/images/image-20220724170433901.png","hash":"7df3e0c88eed34497ad891e7e16225d8549a3680","modified":1658653473937},{"_id":"source/images/image-20230704132442670.png","hash":"3a8c752cf21cb4c591087e5f0e62e70d14f23f68","modified":1688448329979},{"_id":"source/images/image-20210622135226744.png","hash":"fd2309d4dfb34e844fc0d7a675ead278686ddfab","modified":1629514374938},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1623594809522},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1623594809523},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1623594809523},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1623594809523},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1623594809523},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1623594809523},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1623594809522},{"_id":"themes/next/_config.yml","hash":"32acd7d98e26f5e87952263d06030422af646ec9","modified":1716448958010},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1623594809527},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1623594809523},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1623594809523},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1623594809523},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1623594811231},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1623594809523},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1623594809524},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1623594809524},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1623594809524},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1623594809524},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1623594809524},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1623594809530},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1623594809539},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1623594809539},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1623594809539},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1623594809540},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1623594809540},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1623594809540},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1623594809527},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1623594809527},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1623594809527},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1623594809528},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1623594809528},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1623594809528},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1623594809528},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1623594809528},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1623594809528},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1623594809529},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1623594809529},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1623594809529},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1623594809529},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1623594809529},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1623594809529},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1623594809529},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1623594809529},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1623594809529},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1623594809530},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1623594809530},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1623594809530},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1623594809530},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1623594811234},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1623594809525},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1623594809525},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1623594809525},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1623594809525},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1623594809525},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1623594809525},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1623594809526},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1623594809526},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1623594809526},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1623594809527},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1623594809527},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1623594809527},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1623594809527},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1623594809530},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1623594809531},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1623594809531},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1623594809531},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1623594809531},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1623594809532},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1623594809533},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1623594809534},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1623594809534},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1623594809534},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1623594809534},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1623594809535},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1623594809535},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1623594809536},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1623594809537},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1623594809538},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1623594809538},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1623594811231},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1623594811233},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1623594811233},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1623594811233},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1623594811234},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1623594811234},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1623594811234},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1623594811234},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1623594811234},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1623594811234},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1623594811234},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1623594811235},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1623594811235},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1623594811235},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1623594811235},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1623594811235},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1623594811235},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1623594811235},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1623594811235},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1623594811236},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1623594811236},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1623594811245},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1623594811248},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1623594811248},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1623594811249},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1623594811249},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1623594811249},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1623594811249},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1623594811249},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1623594811250},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1623594811250},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1623594811250},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1623594811250},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1623594811250},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1623594811250},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1623594811251},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1623594811250},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1623594811251},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1623594811251},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1623594811251},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1623594811251},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1623594811252},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1623594811252},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1623594809531},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1623594809531},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1623594809531},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1623594809532},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1623594809532},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1623594809532},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1623594809532},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1623594809532},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1623594809532},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1623594809533},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1623594809533},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1623594809533},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1623594809533},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1623594809533},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1623594809533},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1623594809533},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1623594809534},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1623594809534},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1623594809534},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1623594809535},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1623594809535},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1623594809535},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1623594809535},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1623594809535},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1623594809536},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1623594809536},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1623594809536},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1623594809536},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1623594809536},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1623594809536},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1623594809536},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1623594809536},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1623594809537},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1623594809537},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1623594809537},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1623594809537},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1623594809537},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1623594809538},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1623594809538},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1623594809537},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1623594809538},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1623594809538},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1623594809538},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1623594809538},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1623594809538},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1623594809539},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1623594809539},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1623594809539},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1623594811231},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1623594811232},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1623594811232},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1623594811233},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1623594811248},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1623594811248},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1623594811233},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1623594811248},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1623594811248},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1623594811248},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1623594811251},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1623594811251},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1623594811253},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1623594811236},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1623594811236},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1623594811239},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1623594811236},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1623594811241},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1623594811254},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1623594811241},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1623594811242},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1623594811242},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1623594811242},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1623594811245},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1623594811246},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1623594811247},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1623594811248},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1623594811252},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1623594811253},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1623594811238},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1623594811239},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1623594811239},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1623594811239},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1623594811239},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1623594811239},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1623594811239},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1623594811240},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1623594811240},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1623594811236},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1623594811236},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1623594811237},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1623594811237},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1623594811241},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1623594811241},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1623594811241},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1623594811241},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1623594811241},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1623594811242},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1623594811242},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1623594811242},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1623594811242},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1623594811242},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1623594811243},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1623594811244},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1623594811245},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1623594811245},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1623594811253},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1623594811253},{"_id":"themes/next/package-lock.json","hash":"0eb8a2a0f3394da05424a06d690aed0875a91698","modified":1623594811231},{"_id":"public/atom.xml","hash":"1c554390950ebcbb5ceaeed8dd1b1234435369d2","modified":1716453001632},{"_id":"public/sitemap.xml","hash":"f38bc33ddeb84cdc9dbbbe3375da991ebf06571a","modified":1716453001632},{"_id":"public/sitemap.txt","hash":"5a193e67bb8650e41fde75fe4b2da1a1999a8802","modified":1716453001632},{"_id":"public/about/index.html","hash":"0ed63d21c23f10caa5f7e2b27994c3afff67b3d7","modified":1716453001632},{"_id":"public/tags/index.html","hash":"ec5a17b77084901502fc83879c9a62b50a997eff","modified":1716453001632},{"_id":"public/categories/index.html","hash":"1dcf1aded4d91df47b321b22e38fea8de27a4a68","modified":1716453001632},{"_id":"public/2024/05/23/数据结构从入门到放弃/index.html","hash":"5edc93d5d69629dbb9d4c8606d35d8a2315b541f","modified":1716453001632},{"_id":"public/2023/08/25/machine/index.html","hash":"fea8186808064ba96e1daff29287386c605c5d03","modified":1716453001632},{"_id":"public/2023/04/26/python虚拟环境conda/index.html","hash":"4d55cc2a9a3a391b1606fdd1434f81dd68e3c927","modified":1716453001632},{"_id":"public/2021/12/09/hexo部署报错/index.html","hash":"85b3b1b438a228a9acebcb85c20a5122b210c612","modified":1716453001632},{"_id":"public/2021/12/07/git代码迁移/index.html","hash":"7a7deb4f35b5c2a9d306de294c5d8d0aa725be6d","modified":1716453001632},{"_id":"public/2021/09/29/git代码ssh方式部署服务器/index.html","hash":"0c8aa3c27e80d7b8b2a1945920923f5d6f976c7c","modified":1716453001632},{"_id":"public/2021/09/20/pycharm2vscode/index.html","hash":"5c737b824a6ca578931e68d2b54edb012c3f33cf","modified":1716453001632},{"_id":"public/2021/06/22/Chapter-02/index.html","hash":"66bb458badcd89fa3e9616df819422a34afb23b7","modified":1716453001632},{"_id":"public/2021/06/03/配置frp内网穿透/index.html","hash":"535ea3327ac40e16da64a9759a88279d47b24615","modified":1716453001632},{"_id":"public/2021/03/25/Flask-Migrate报错/index.html","hash":"80c045d13fee6e9040a1715445d629b5c8080f45","modified":1716453001632},{"_id":"public/2021/03/18/nginx/index.html","hash":"794c699fe879c1e749509ba809c2f1326554694c","modified":1716453001632},{"_id":"public/2021/03/18/微信公众号/index.html","hash":"20286e94040575d4bf80be83c0b1b1d5e58a8f36","modified":1716453001632},{"_id":"public/2021/03/18/nginx相关/index.html","hash":"3c26c88ad164eed651fe3e6048eb7d14e4202306","modified":1716453001632},{"_id":"public/categories/微信公众号/index.html","hash":"cf27342ec676d937b61d8d9362bb34d9837d4991","modified":1716453001632},{"_id":"public/categories/计组/index.html","hash":"b8ad696083039176a43b60521199abc059b711e1","modified":1716453001632},{"_id":"public/archives/index.html","hash":"27a86c1efd3c77b78b664e6bab33f2c3e3e9b308","modified":1716453001632},{"_id":"public/archives/page/2/index.html","hash":"ba34a83f7158140c1621f6a77da6e71f422a5dd9","modified":1716453001632},{"_id":"public/archives/page/3/index.html","hash":"82e24e02dbf1c972fce5c3ae21db1abddf9cdc57","modified":1716453001632},{"_id":"public/archives/2021/index.html","hash":"cd7ce8d2b88d5a86b333775f8b9fa68521e6e08d","modified":1716453001632},{"_id":"public/archives/2021/page/2/index.html","hash":"dae9f7df0babcabf8a5e897aa9b3f043a2ab9171","modified":1716453001632},{"_id":"public/archives/2021/03/index.html","hash":"236f207b3216135ba3fc03ea0895acdd9259ae1f","modified":1716453001632},{"_id":"public/archives/2021/04/index.html","hash":"5bf78de000775170339809247e5dda881dcbfe84","modified":1716453001632},{"_id":"public/archives/2021/06/index.html","hash":"4bd0f64abe07dd581ef0bff643b911891ef2787e","modified":1716453001632},{"_id":"public/archives/2021/07/index.html","hash":"823bbfff459feb129429523eaf8f2e36bb4a673b","modified":1716453001632},{"_id":"public/archives/2021/08/index.html","hash":"a27ae8566eedb324904472b61b62711aad4d751c","modified":1716453001632},{"_id":"public/archives/2021/09/index.html","hash":"22f41858e7633e583a97a527c94a193d846da361","modified":1716453001632},{"_id":"public/archives/2021/12/index.html","hash":"16beb8d6b74638e1f7bdb7c117ec473272207d1a","modified":1716453001632},{"_id":"public/archives/2022/index.html","hash":"4cb7ec5b2e8d25f56941b4674a9860dc8b6909cc","modified":1716453001632},{"_id":"public/archives/2022/02/index.html","hash":"b7e3c9cb1714e8bc37a7300afcd573095193c876","modified":1716453001632},{"_id":"public/archives/2023/index.html","hash":"2113df2be75fa15f533f35ca6bf5da2f5cd30d95","modified":1716453001632},{"_id":"public/archives/2023/04/index.html","hash":"bba2d7544bf6228d6240761f3df18738fe0c65ca","modified":1716453001632},{"_id":"public/archives/2023/06/index.html","hash":"cf7bf2527999baa4bde8eb4615ca5e7c0219622c","modified":1716453001632},{"_id":"public/archives/2023/08/index.html","hash":"763cf5fccd3ab426337e9ba3f1d9cd198ddba139","modified":1716453001632},{"_id":"public/archives/2024/index.html","hash":"8ac828003aee2e9bf92ea8f8315f56958aab4fa2","modified":1716453001632},{"_id":"public/archives/2024/05/index.html","hash":"342bb5b0dc0212ed641a23484dfe5bbeee343326","modified":1716453001632},{"_id":"public/tags/网络基础/index.html","hash":"7692af8d9d72626cd5a62531ead26ac0b207e5fb","modified":1716453001632},{"_id":"public/tags/uc-machine/index.html","hash":"a4c2c4579de76b3cfa6948d7a66124a6cf37e64b","modified":1716453001632},{"_id":"public/tags/python-conda/index.html","hash":"884c754d5203f99ea8137dc0f12669fc48efca1a","modified":1716453001632},{"_id":"public/tags/python/index.html","hash":"8c70855187d5ffcd2edf397273d8256d5f734292","modified":1716453001632},{"_id":"public/tags/bug/index.html","hash":"464ea2ec6e12cabe297ffc4dab01ff394b9f8c8b","modified":1716453001632},{"_id":"public/tags/python-machine-learning/index.html","hash":"5e4e3d7ecfd6c45610abe05131172a4f7afb9b3a","modified":1716453001632},{"_id":"public/tags/计组/index.html","hash":"03448b79a696b6d6cd269c61ebe27b174893202c","modified":1716453001632},{"_id":"public/2023/06/30/go从入门到放弃/index.html","hash":"655d708c385226a48b4aea0134e4785af68b83ab","modified":1716453001632},{"_id":"public/2023/06/30/python从入门到放弃/index.html","hash":"5b29e8b8928ffc904afb729bdb301ad75ba0606f","modified":1716453001632},{"_id":"public/2023/06/30/人工智能从入门到放弃/index.html","hash":"50ba44356f305c0e8da033e1f58552e82b62a493","modified":1716453001632},{"_id":"public/2022/02/20/计算机组成原理/index.html","hash":"b4be0a34d5b29dc04c991811dce2d4cc29067364","modified":1716453001632},{"_id":"public/2021/12/09/python+flask+oracle+docker+alpine/index.html","hash":"2f4bcbe65e6fea07955cba48cd43e52f29ed2e60","modified":1716453001632},{"_id":"public/2021/08/21/c-day01-md/index.html","hash":"385fc702e73a26cec4422192ddcf43deafc1ccb5","modified":1716453001632},{"_id":"public/2021/07/26/源码安装mysql/index.html","hash":"2ef646769d587ee6bbc2ece000ae935f439d4a76","modified":1716453001632},{"_id":"public/2021/06/16/Chapter-01/index.html","hash":"c53ff53e4bb4dbdff0d19887e51071072f2ab6a1","modified":1716453001632},{"_id":"public/2021/06/01/mac下使用oracle/index.html","hash":"91f6c1d08d2da9e5d6d46b335d389d082040c970","modified":1716453001632},{"_id":"public/2021/04/02/cookiecutter-flask-restful使用笔记/index.html","hash":"348ab76510f8c61eea39717ec1a40032e14192f2","modified":1716453001632},{"_id":"public/index.html","hash":"0c867c96547d1660afafd3dae163985d305d93cc","modified":1716453001632},{"_id":"public/page/2/index.html","hash":"dd32f95612e6d73fc045decaae4f07fb5efde786","modified":1716453001632},{"_id":"public/page/3/index.html","hash":"3dde5e0440f16ee2dc4fe00e1aeeef19739bbe7a","modified":1716453001632},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1716448973367},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1716448973367},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1716448973367},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1716448973367},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1716448973367},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1716448973367},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1716448973367},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1716448973367},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1716448973367},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1716448973367},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1716448973367},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1716448973367},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1716448973367},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1716448973367},{"_id":"public/css/main.css","hash":"dd69c45d8e883f08eca09fa0ce0e61ee6d5416a5","modified":1716448973367},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1716448973367},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1716448973367},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1716448973367},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1716448973367},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1716448973367},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1716448973367},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1716448973367},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1716448973367},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1716448973367},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1716448973367},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1716448973367},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1716448973367},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1716448973367},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1716448973367},{"_id":"public/images/image-20230704132442670.png","hash":"3a8c752cf21cb4c591087e5f0e62e70d14f23f68","modified":1716448973367},{"_id":"public/images/image-20220724170433901.png","hash":"7df3e0c88eed34497ad891e7e16225d8549a3680","modified":1716448973367},{"_id":"public/images/image-20210622135226744.png","hash":"fd2309d4dfb34e844fc0d7a675ead278686ddfab","modified":1716448973367},{"_id":"source/_posts/人工智能基础.md","hash":"b0f6acdfca454200ae0a85035f2e482ed5429543","modified":1716449775204},{"_id":"public/tags/machine-learning/index.html","hash":"23028df3a396a5c658bb10594b23771ba8319f05","modified":1716453001632},{"_id":"public/2023/06/30/人工智能基础/index.html","hash":"4750ffb1885dc7bcf8cfd5820ef8c0b09d214a7e","modified":1716453001632},{"_id":"public/tags/数据结构/index.html","hash":"7e2d8540affacf7e8ace8f005d278aacea77b9fe","modified":1716453001632}],"Category":[{"name":"微信公众号","_id":"clwixegcd000risuh3gr64rnw"},{"name":"计组","_id":"clwixegcg0012isuh5usx1cn5"}],"Data":[],"Page":[{"title":"tags","date":"2022-06-24T02:38:13.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-06-24 10:38:13\n---\n","updated":"2022-07-24T08:18:32.572Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clwixegbz0000isuh8slw5db5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-06-24T02:38:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-24 10:38:18\n---\n","updated":"2022-07-24T08:18:32.572Z","path":"about/index.html","comments":1,"layout":"page","_id":"clwixegc40002isuh5f6vclua","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-04-15T14:46:55.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-15 22:46:55\ntype: categories\nlayout: categories\n---\n","updated":"2022-07-24T08:18:32.572Z","path":"categories/index.html","comments":1,"_id":"clwixegc60005isuhguwjh0oq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Chapter-01","date":"2021-06-16T14:05:05.000Z","_content":"\n# 计算机网络基础Chapter-1\n\n## 1. 性能指标\n\n**速率**\n\n-  即数据率或称数据传输率或比特率\n\n| 速率（千，兆，吉，太）(kb, Mb, Gb, Tb) | 存储容量(KB, MB, GB, TB)（1Byte = 8bit） |\n| -------------------------------------- | ---------------------------------------- |\n| 千 1kb/s = 10**3 b/s                   | 1KB = 2**10B = 1024B = 1024 * 8 b        |\n\n**带宽**\n\n-  指网络的通信线路传送数据的能力， 通常是指单位时间内从网络中的一点到另一点所能通过的 **最高数据率**。\n-   单位: **比特每秒**， b/s, kb/s, Mb/s, Gb/s, 网络设备所支持的最高速度\n\n **吞吐量**\n\n- 表示**单位时间** 内通过 **某个网络(或信道、接口)**的数据量\n- 单位： b/s, kb/s, Mb/s等\n- 吞吐量受网络的带宽或网络的额定速率的限制\n\n **时延**\n\n- 指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟，单位s\n\n\n\n  - 发送时延（传输时延）：从发送分组的第一个比特算起， 到该分组的最后一个比特发送完毕所需的时间\n\n\n$$\n发送时延 = \\frac{数据长度}{信道带宽}\n$$\n\n  \n\n- 传播时延：取决于电磁波的传播速度和链路长度\n\n$$\n传播时延 = \\frac{信道长度}{3 * 10^8}\n$$\n\n- 排队时延：等待输出/输入链路可用\n- 处理时延：检错、找出口\n\n**时延带宽积**\n\n- 又称为 **以比特为单位的链路长度**， 即 某段链路现在有多少比特， 是指链路中某一时刻的比特容量\n\n$$\n时延带宽积(bit) = 传播时延(s) \\times 带宽 (b/s)\n$$\n\n**往返时间RTT**\n\n- 从发送方发送数据开始， 到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延\n  - 如 ping 的time = 33ms\n- RTT越大，在收到确认之前，可以发送的数据越多\n- RTT包括\n  - 往返传播时延 = 传播时延 * 2\n  - 末端处理时间\n\n **利用率**\n\n- 信道利用率\n\n$$\n信道利用率 = \\frac{有数据通过时间}{（有+无）数据通过时间}\n$$\n\n- 网络利用率： 信道利用率加权平均值\n\n> 加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。加权平均值的大小不仅取决于总体中各单位的数值（变量值）的大小，而且取决于各数值出现的次数（频数），由于各数值出现的次数对其在平均数中的影响起着权衡轻重的作用，因此叫做权数。\n\n## 2. 分层结构 \n\n- 实体：第n层中的活动元素称为 **n层实体**。同一层的实体叫 **对等实体**。\n- 协议：为进行网络中的 **对等实体** 数据交换而建立的规则、标准或约定称为网络协议。\n- 接口（访问服务点SAP）： 上层使用下层服务的入口。\n- 服务：下层为相邻上层提供的功能调用。\n\n### 2.1. OSI参考模型\n\n目的：支持 **异构网络系统** 的互联互通。\n\n国际标准化组织（ISO) 于1984年提出开放系统互连（OSI）参考模型。\n\n| OSI 七层   | 说明                 |\n| ---------- | -------------------- |\n| 应用层     | 数据子网（数据处理） |\n| 表示层     | 数据子网（数据处理） |\n| 会话层     | 数据子网（数据处理） |\n| 传输层     |                      |\n| 网络层     | 通信子网（数据通信） |\n| 数据链路层 | 通信子网（数据通信） |\n| 物理层     | 通信子网（数据通信） |\n\n- 应用层\n  - 定义：所有能和用户交互产生网络流量的程序\n  - 典型应用层服务：\n    - 文件传输：FTP\n    - 电子邮件：SMTP\n    - 万维网：HTTP\n- 表示层\n  - 定义：用于处理在两个通信系统中交换信息的表示方式（语法和语义）\n  - 功能：\n    - 数据格式变换\n    - 数据加密解密\n    - 数据压缩和恢复\n- 会话层\n  - 定义：向表示层实体/用户进程提供**建立连接**并在连接上**有序地传输**数据。这是会话， 也是**建立同步**（SYN)\n  - 功能：\n    - 建立、管理、终止会话\n    - 使用校验点可使会话在通信失效时从 **校验点/同步点** 继续恢复通信，实现数据同步。（适用于传输大文件）\n- 传输层\n  - 定义：负责该机中 **两个进程** 的通信，即**端到端** 的通信。传输意念是报文段或用户数据报。\n  - 功能：\n    - 可靠传输、不可靠传输\n      - 可靠：先建立连接，确认机制，如握手，再传输数据\n      - 不可靠：无建立连接，直接传数据\n    - 差错控制\n    - 流量控制\n    - 复用分用\n      - 复用：多个应用层进程可同时使用下面传输层的服务\n      - 分用：运输层把收到的信息分别交付给上面应用层中相应的进程\n- 网络层\n  - 定义：主要任务是把分组从源端传到目的端，为分组交换网上的不同该机提供通信服务。网络层传输单位是数据报\n  - 功能：\n    - 路由选择：最佳路径\n    - 流量控制：限制发送端\n    - 差错控制\n    - 拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。\n- 数据链路层\n  - 定义：主要任务是把网络层传下来的数据报组装成帧。传输单位是帧。\n  - 功能：\n    - 成帧（定义帧的开始和结束）\n    - 差错控制：帧错+位错\n    - 流量控制：限制发送端速度\n    - 访问（接入）控制：控制对信道的访问\n- 物理层\n  - 定义：主要任务是在物理媒体上实现比特流的透明传输。传输单位是比特。\n  - 透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。\n  - 功能：\n    - 定义接口特性\n    - 定义传输模式\n      - 单工、半双工、双工\n    - 定义传输速率\n    - 比特同步\n    - 比特编码：用什么电压表示1， 什么电压表示0\n\n### 2.2. TCP/IP模型\n\n| TCP/IP 四层 | 协议栈                     |\n| ----------- | -------------------------- |\n| 应用层      | HTTP，FTP，DNS，SMTP       |\n| 传输层      | TCP，UDP                   |\n| 网际层      | IP                         |\n| 网络接口层  | Ethernet, ATM, Frame Relay |\n\n### 2.3. OSI与TCP/IP对比\n\n- 相同点\n  - 都分层\n  - 基于独立的协议栈的概念\n  - 可以实现异构网络互联\n- 不同点\n  - OSI定义三点：服务、协议、接口\n  - OSI先出现，参考模型先于协议发明，不偏向特定协议\n  - TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次\n\n|        | OSI               | TCP/IP            |\n| ------ | ----------------- | ----------------- |\n| 网络层 | 无连接 + 面向连接 | 无连接            |\n| 传输层 | 面向连接          | 无连接 + 面向连接 |\n\n**面向连接**分为三个阶段：\n\n1. 建立连接，在此阶段，发出一个建立连接的请求。\n2. 只有连接成功建立之后，才能开始传输数据， 这是第二阶段\n3. 当数据传输完毕必须释放连接\n\n**无连接**直接进行数据传输\n\n### 2.4. 5层参考模型\n\n| 5层参考模型 | 说明                                 | 协议            |\n| ----------- | ------------------------------------ | --------------- |\n| 应用层      | 支持各种网络应用                     | FTP、SMTP、HTTP |\n| 传输层      | 进程-进程的数据传输                  | TCP、UDP        |\n| 网络层      | 源主机到目的主机的数据分组路由与转发 | IP、ICMP、OSPF  |\n| 数据链路层  | 把网络层传下来的数据报组装成帧       | Ethernet、PPP   |\n| 物理层      | 比特传输                             |                 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Chapter-01.md","raw":"---\ntitle: Chapter-01\ndate: 2021-06-16 22:05:05\ntags: 网络基础\n---\n\n# 计算机网络基础Chapter-1\n\n## 1. 性能指标\n\n**速率**\n\n-  即数据率或称数据传输率或比特率\n\n| 速率（千，兆，吉，太）(kb, Mb, Gb, Tb) | 存储容量(KB, MB, GB, TB)（1Byte = 8bit） |\n| -------------------------------------- | ---------------------------------------- |\n| 千 1kb/s = 10**3 b/s                   | 1KB = 2**10B = 1024B = 1024 * 8 b        |\n\n**带宽**\n\n-  指网络的通信线路传送数据的能力， 通常是指单位时间内从网络中的一点到另一点所能通过的 **最高数据率**。\n-   单位: **比特每秒**， b/s, kb/s, Mb/s, Gb/s, 网络设备所支持的最高速度\n\n **吞吐量**\n\n- 表示**单位时间** 内通过 **某个网络(或信道、接口)**的数据量\n- 单位： b/s, kb/s, Mb/s等\n- 吞吐量受网络的带宽或网络的额定速率的限制\n\n **时延**\n\n- 指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟，单位s\n\n\n\n  - 发送时延（传输时延）：从发送分组的第一个比特算起， 到该分组的最后一个比特发送完毕所需的时间\n\n\n$$\n发送时延 = \\frac{数据长度}{信道带宽}\n$$\n\n  \n\n- 传播时延：取决于电磁波的传播速度和链路长度\n\n$$\n传播时延 = \\frac{信道长度}{3 * 10^8}\n$$\n\n- 排队时延：等待输出/输入链路可用\n- 处理时延：检错、找出口\n\n**时延带宽积**\n\n- 又称为 **以比特为单位的链路长度**， 即 某段链路现在有多少比特， 是指链路中某一时刻的比特容量\n\n$$\n时延带宽积(bit) = 传播时延(s) \\times 带宽 (b/s)\n$$\n\n**往返时间RTT**\n\n- 从发送方发送数据开始， 到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延\n  - 如 ping 的time = 33ms\n- RTT越大，在收到确认之前，可以发送的数据越多\n- RTT包括\n  - 往返传播时延 = 传播时延 * 2\n  - 末端处理时间\n\n **利用率**\n\n- 信道利用率\n\n$$\n信道利用率 = \\frac{有数据通过时间}{（有+无）数据通过时间}\n$$\n\n- 网络利用率： 信道利用率加权平均值\n\n> 加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。加权平均值的大小不仅取决于总体中各单位的数值（变量值）的大小，而且取决于各数值出现的次数（频数），由于各数值出现的次数对其在平均数中的影响起着权衡轻重的作用，因此叫做权数。\n\n## 2. 分层结构 \n\n- 实体：第n层中的活动元素称为 **n层实体**。同一层的实体叫 **对等实体**。\n- 协议：为进行网络中的 **对等实体** 数据交换而建立的规则、标准或约定称为网络协议。\n- 接口（访问服务点SAP）： 上层使用下层服务的入口。\n- 服务：下层为相邻上层提供的功能调用。\n\n### 2.1. OSI参考模型\n\n目的：支持 **异构网络系统** 的互联互通。\n\n国际标准化组织（ISO) 于1984年提出开放系统互连（OSI）参考模型。\n\n| OSI 七层   | 说明                 |\n| ---------- | -------------------- |\n| 应用层     | 数据子网（数据处理） |\n| 表示层     | 数据子网（数据处理） |\n| 会话层     | 数据子网（数据处理） |\n| 传输层     |                      |\n| 网络层     | 通信子网（数据通信） |\n| 数据链路层 | 通信子网（数据通信） |\n| 物理层     | 通信子网（数据通信） |\n\n- 应用层\n  - 定义：所有能和用户交互产生网络流量的程序\n  - 典型应用层服务：\n    - 文件传输：FTP\n    - 电子邮件：SMTP\n    - 万维网：HTTP\n- 表示层\n  - 定义：用于处理在两个通信系统中交换信息的表示方式（语法和语义）\n  - 功能：\n    - 数据格式变换\n    - 数据加密解密\n    - 数据压缩和恢复\n- 会话层\n  - 定义：向表示层实体/用户进程提供**建立连接**并在连接上**有序地传输**数据。这是会话， 也是**建立同步**（SYN)\n  - 功能：\n    - 建立、管理、终止会话\n    - 使用校验点可使会话在通信失效时从 **校验点/同步点** 继续恢复通信，实现数据同步。（适用于传输大文件）\n- 传输层\n  - 定义：负责该机中 **两个进程** 的通信，即**端到端** 的通信。传输意念是报文段或用户数据报。\n  - 功能：\n    - 可靠传输、不可靠传输\n      - 可靠：先建立连接，确认机制，如握手，再传输数据\n      - 不可靠：无建立连接，直接传数据\n    - 差错控制\n    - 流量控制\n    - 复用分用\n      - 复用：多个应用层进程可同时使用下面传输层的服务\n      - 分用：运输层把收到的信息分别交付给上面应用层中相应的进程\n- 网络层\n  - 定义：主要任务是把分组从源端传到目的端，为分组交换网上的不同该机提供通信服务。网络层传输单位是数据报\n  - 功能：\n    - 路由选择：最佳路径\n    - 流量控制：限制发送端\n    - 差错控制\n    - 拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。\n- 数据链路层\n  - 定义：主要任务是把网络层传下来的数据报组装成帧。传输单位是帧。\n  - 功能：\n    - 成帧（定义帧的开始和结束）\n    - 差错控制：帧错+位错\n    - 流量控制：限制发送端速度\n    - 访问（接入）控制：控制对信道的访问\n- 物理层\n  - 定义：主要任务是在物理媒体上实现比特流的透明传输。传输单位是比特。\n  - 透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。\n  - 功能：\n    - 定义接口特性\n    - 定义传输模式\n      - 单工、半双工、双工\n    - 定义传输速率\n    - 比特同步\n    - 比特编码：用什么电压表示1， 什么电压表示0\n\n### 2.2. TCP/IP模型\n\n| TCP/IP 四层 | 协议栈                     |\n| ----------- | -------------------------- |\n| 应用层      | HTTP，FTP，DNS，SMTP       |\n| 传输层      | TCP，UDP                   |\n| 网际层      | IP                         |\n| 网络接口层  | Ethernet, ATM, Frame Relay |\n\n### 2.3. OSI与TCP/IP对比\n\n- 相同点\n  - 都分层\n  - 基于独立的协议栈的概念\n  - 可以实现异构网络互联\n- 不同点\n  - OSI定义三点：服务、协议、接口\n  - OSI先出现，参考模型先于协议发明，不偏向特定协议\n  - TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次\n\n|        | OSI               | TCP/IP            |\n| ------ | ----------------- | ----------------- |\n| 网络层 | 无连接 + 面向连接 | 无连接            |\n| 传输层 | 面向连接          | 无连接 + 面向连接 |\n\n**面向连接**分为三个阶段：\n\n1. 建立连接，在此阶段，发出一个建立连接的请求。\n2. 只有连接成功建立之后，才能开始传输数据， 这是第二阶段\n3. 当数据传输完毕必须释放连接\n\n**无连接**直接进行数据传输\n\n### 2.4. 5层参考模型\n\n| 5层参考模型 | 说明                                 | 协议            |\n| ----------- | ------------------------------------ | --------------- |\n| 应用层      | 支持各种网络应用                     | FTP、SMTP、HTTP |\n| 传输层      | 进程-进程的数据传输                  | TCP、UDP        |\n| 网络层      | 源主机到目的主机的数据分组路由与转发 | IP、ICMP、OSPF  |\n| 数据链路层  | 把网络层传下来的数据报组装成帧       | Ethernet、PPP   |\n| 物理层      | 比特传输                             |                 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Chapter-01","published":1,"updated":"2021-08-21T02:30:23.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc10001isuh3tf99z2e","content":"<h1 id=\"计算机网络基础Chapter-1\"><a href=\"#计算机网络基础Chapter-1\" class=\"headerlink\" title=\"计算机网络基础Chapter-1\"></a>计算机网络基础Chapter-1</h1><h2 id=\"1-性能指标\"><a href=\"#1-性能指标\" class=\"headerlink\" title=\"1. 性能指标\"></a>1. 性能指标</h2><p><strong>速率</strong></p>\n<ul>\n<li>即数据率或称数据传输率或比特率</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>速率（千，兆，吉，太）(kb, Mb, Gb, Tb)</th>\n<th>存储容量(KB, MB, GB, TB)（1Byte &#x3D; 8bit）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>千 1kb&#x2F;s &#x3D; 10**3 b&#x2F;s</td>\n<td>1KB &#x3D; 2**10B &#x3D; 1024B &#x3D; 1024 * 8 b</td>\n</tr>\n</tbody></table>\n<p><strong>带宽</strong></p>\n<ul>\n<li>指网络的通信线路传送数据的能力， 通常是指单位时间内从网络中的一点到另一点所能通过的 <strong>最高数据率</strong>。</li>\n<li>单位: <strong>比特每秒</strong>， b&#x2F;s, kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s, 网络设备所支持的最高速度</li>\n</ul>\n<p> <strong>吞吐量</strong></p>\n<ul>\n<li>表示<strong>单位时间</strong> 内通过 **某个网络(或信道、接口)**的数据量</li>\n<li>单位： b&#x2F;s, kb&#x2F;s, Mb&#x2F;s等</li>\n<li>吞吐量受网络的带宽或网络的额定速率的限制</li>\n</ul>\n<p> <strong>时延</strong></p>\n<ul>\n<li><p>指数据（报文&#x2F;分组&#x2F;比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟，单位s</p>\n<ul>\n<li>发送时延（传输时延）：从发送分组的第一个比特算起， 到该分组的最后一个比特发送完毕所需的时间</li>\n</ul>\n</li>\n</ul>\n<p>$$<br>发送时延 &#x3D; \\frac{数据长度}{信道带宽}<br>$$</p>\n<ul>\n<li>传播时延：取决于电磁波的传播速度和链路长度</li>\n</ul>\n<p>$$<br>传播时延 &#x3D; \\frac{信道长度}{3 * 10^8}<br>$$</p>\n<ul>\n<li>排队时延：等待输出&#x2F;输入链路可用</li>\n<li>处理时延：检错、找出口</li>\n</ul>\n<p><strong>时延带宽积</strong></p>\n<ul>\n<li>又称为 <strong>以比特为单位的链路长度</strong>， 即 某段链路现在有多少比特， 是指链路中某一时刻的比特容量</li>\n</ul>\n<p>$$<br>时延带宽积(bit) &#x3D; 传播时延(s) \\times 带宽 (b&#x2F;s)<br>$$</p>\n<p><strong>往返时间RTT</strong></p>\n<ul>\n<li>从发送方发送数据开始， 到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延<ul>\n<li>如 ping 的time &#x3D; 33ms</li>\n</ul>\n</li>\n<li>RTT越大，在收到确认之前，可以发送的数据越多</li>\n<li>RTT包括<ul>\n<li>往返传播时延 &#x3D; 传播时延 * 2</li>\n<li>末端处理时间</li>\n</ul>\n</li>\n</ul>\n<p> <strong>利用率</strong></p>\n<ul>\n<li>信道利用率</li>\n</ul>\n<p>$$<br>信道利用率 &#x3D; \\frac{有数据通过时间}{（有+无）数据通过时间}<br>$$</p>\n<ul>\n<li>网络利用率： 信道利用率加权平均值</li>\n</ul>\n<blockquote>\n<p>加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。加权平均值的大小不仅取决于总体中各单位的数值（变量值）的大小，而且取决于各数值出现的次数（频数），由于各数值出现的次数对其在平均数中的影响起着权衡轻重的作用，因此叫做权数。</p>\n</blockquote>\n<h2 id=\"2-分层结构\"><a href=\"#2-分层结构\" class=\"headerlink\" title=\"2. 分层结构\"></a>2. 分层结构</h2><ul>\n<li>实体：第n层中的活动元素称为 <strong>n层实体</strong>。同一层的实体叫 <strong>对等实体</strong>。</li>\n<li>协议：为进行网络中的 <strong>对等实体</strong> 数据交换而建立的规则、标准或约定称为网络协议。</li>\n<li>接口（访问服务点SAP）： 上层使用下层服务的入口。</li>\n<li>服务：下层为相邻上层提供的功能调用。</li>\n</ul>\n<h3 id=\"2-1-OSI参考模型\"><a href=\"#2-1-OSI参考模型\" class=\"headerlink\" title=\"2.1. OSI参考模型\"></a>2.1. OSI参考模型</h3><p>目的：支持 <strong>异构网络系统</strong> 的互联互通。</p>\n<p>国际标准化组织（ISO) 于1984年提出开放系统互连（OSI）参考模型。</p>\n<table>\n<thead>\n<tr>\n<th>OSI 七层</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td></td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>应用层<ul>\n<li>定义：所有能和用户交互产生网络流量的程序</li>\n<li>典型应用层服务：<ul>\n<li>文件传输：FTP</li>\n<li>电子邮件：SMTP</li>\n<li>万维网：HTTP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>表示层<ul>\n<li>定义：用于处理在两个通信系统中交换信息的表示方式（语法和语义）</li>\n<li>功能：<ul>\n<li>数据格式变换</li>\n<li>数据加密解密</li>\n<li>数据压缩和恢复</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>会话层<ul>\n<li>定义：向表示层实体&#x2F;用户进程提供<strong>建立连接</strong>并在连接上<strong>有序地传输</strong>数据。这是会话， 也是<strong>建立同步</strong>（SYN)</li>\n<li>功能：<ul>\n<li>建立、管理、终止会话</li>\n<li>使用校验点可使会话在通信失效时从 <strong>校验点&#x2F;同步点</strong> 继续恢复通信，实现数据同步。（适用于传输大文件）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>定义：负责该机中 <strong>两个进程</strong> 的通信，即<strong>端到端</strong> 的通信。传输意念是报文段或用户数据报。</li>\n<li>功能：<ul>\n<li>可靠传输、不可靠传输<ul>\n<li>可靠：先建立连接，确认机制，如握手，再传输数据</li>\n<li>不可靠：无建立连接，直接传数据</li>\n</ul>\n</li>\n<li>差错控制</li>\n<li>流量控制</li>\n<li>复用分用<ul>\n<li>复用：多个应用层进程可同时使用下面传输层的服务</li>\n<li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>定义：主要任务是把分组从源端传到目的端，为分组交换网上的不同该机提供通信服务。网络层传输单位是数据报</li>\n<li>功能：<ul>\n<li>路由选择：最佳路径</li>\n<li>流量控制：限制发送端</li>\n<li>差错控制</li>\n<li>拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>定义：主要任务是把网络层传下来的数据报组装成帧。传输单位是帧。</li>\n<li>功能：<ul>\n<li>成帧（定义帧的开始和结束）</li>\n<li>差错控制：帧错+位错</li>\n<li>流量控制：限制发送端速度</li>\n<li>访问（接入）控制：控制对信道的访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>物理层<ul>\n<li>定义：主要任务是在物理媒体上实现比特流的透明传输。传输单位是比特。</li>\n<li>透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</li>\n<li>功能：<ul>\n<li>定义接口特性</li>\n<li>定义传输模式<ul>\n<li>单工、半双工、双工</li>\n</ul>\n</li>\n<li>定义传输速率</li>\n<li>比特同步</li>\n<li>比特编码：用什么电压表示1， 什么电压表示0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-TCP-x2F-IP模型\"><a href=\"#2-2-TCP-x2F-IP模型\" class=\"headerlink\" title=\"2.2. TCP&#x2F;IP模型\"></a>2.2. TCP&#x2F;IP模型</h3><table>\n<thead>\n<tr>\n<th>TCP&#x2F;IP 四层</th>\n<th>协议栈</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>HTTP，FTP，DNS，SMTP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP，UDP</td>\n</tr>\n<tr>\n<td>网际层</td>\n<td>IP</td>\n</tr>\n<tr>\n<td>网络接口层</td>\n<td>Ethernet, ATM, Frame Relay</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-OSI与TCP-x2F-IP对比\"><a href=\"#2-3-OSI与TCP-x2F-IP对比\" class=\"headerlink\" title=\"2.3. OSI与TCP&#x2F;IP对比\"></a>2.3. OSI与TCP&#x2F;IP对比</h3><ul>\n<li>相同点<ul>\n<li>都分层</li>\n<li>基于独立的协议栈的概念</li>\n<li>可以实现异构网络互联</li>\n</ul>\n</li>\n<li>不同点<ul>\n<li>OSI定义三点：服务、协议、接口</li>\n<li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li>\n<li>TCP&#x2F;IP设计之初就考虑到异构网互联问题，将IP作为重要层次</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>OSI</th>\n<th>TCP&#x2F;IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网络层</td>\n<td>无连接 + 面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>面向连接</td>\n<td>无连接 + 面向连接</td>\n</tr>\n</tbody></table>\n<p><strong>面向连接</strong>分为三个阶段：</p>\n<ol>\n<li>建立连接，在此阶段，发出一个建立连接的请求。</li>\n<li>只有连接成功建立之后，才能开始传输数据， 这是第二阶段</li>\n<li>当数据传输完毕必须释放连接</li>\n</ol>\n<p><strong>无连接</strong>直接进行数据传输</p>\n<h3 id=\"2-4-5层参考模型\"><a href=\"#2-4-5层参考模型\" class=\"headerlink\" title=\"2.4. 5层参考模型\"></a>2.4. 5层参考模型</h3><table>\n<thead>\n<tr>\n<th>5层参考模型</th>\n<th>说明</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>支持各种网络应用</td>\n<td>FTP、SMTP、HTTP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>进程-进程的数据传输</td>\n<td>TCP、UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>源主机到目的主机的数据分组路由与转发</td>\n<td>IP、ICMP、OSPF</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>把网络层传下来的数据报组装成帧</td>\n<td>Ethernet、PPP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>比特传输</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机网络基础Chapter-1\"><a href=\"#计算机网络基础Chapter-1\" class=\"headerlink\" title=\"计算机网络基础Chapter-1\"></a>计算机网络基础Chapter-1</h1><h2 id=\"1-性能指标\"><a href=\"#1-性能指标\" class=\"headerlink\" title=\"1. 性能指标\"></a>1. 性能指标</h2><p><strong>速率</strong></p>\n<ul>\n<li>即数据率或称数据传输率或比特率</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>速率（千，兆，吉，太）(kb, Mb, Gb, Tb)</th>\n<th>存储容量(KB, MB, GB, TB)（1Byte &#x3D; 8bit）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>千 1kb&#x2F;s &#x3D; 10**3 b&#x2F;s</td>\n<td>1KB &#x3D; 2**10B &#x3D; 1024B &#x3D; 1024 * 8 b</td>\n</tr>\n</tbody></table>\n<p><strong>带宽</strong></p>\n<ul>\n<li>指网络的通信线路传送数据的能力， 通常是指单位时间内从网络中的一点到另一点所能通过的 <strong>最高数据率</strong>。</li>\n<li>单位: <strong>比特每秒</strong>， b&#x2F;s, kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s, 网络设备所支持的最高速度</li>\n</ul>\n<p> <strong>吞吐量</strong></p>\n<ul>\n<li>表示<strong>单位时间</strong> 内通过 **某个网络(或信道、接口)**的数据量</li>\n<li>单位： b&#x2F;s, kb&#x2F;s, Mb&#x2F;s等</li>\n<li>吞吐量受网络的带宽或网络的额定速率的限制</li>\n</ul>\n<p> <strong>时延</strong></p>\n<ul>\n<li><p>指数据（报文&#x2F;分组&#x2F;比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟，单位s</p>\n<ul>\n<li>发送时延（传输时延）：从发送分组的第一个比特算起， 到该分组的最后一个比特发送完毕所需的时间</li>\n</ul>\n</li>\n</ul>\n<p>$$<br>发送时延 &#x3D; \\frac{数据长度}{信道带宽}<br>$$</p>\n<ul>\n<li>传播时延：取决于电磁波的传播速度和链路长度</li>\n</ul>\n<p>$$<br>传播时延 &#x3D; \\frac{信道长度}{3 * 10^8}<br>$$</p>\n<ul>\n<li>排队时延：等待输出&#x2F;输入链路可用</li>\n<li>处理时延：检错、找出口</li>\n</ul>\n<p><strong>时延带宽积</strong></p>\n<ul>\n<li>又称为 <strong>以比特为单位的链路长度</strong>， 即 某段链路现在有多少比特， 是指链路中某一时刻的比特容量</li>\n</ul>\n<p>$$<br>时延带宽积(bit) &#x3D; 传播时延(s) \\times 带宽 (b&#x2F;s)<br>$$</p>\n<p><strong>往返时间RTT</strong></p>\n<ul>\n<li>从发送方发送数据开始， 到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延<ul>\n<li>如 ping 的time &#x3D; 33ms</li>\n</ul>\n</li>\n<li>RTT越大，在收到确认之前，可以发送的数据越多</li>\n<li>RTT包括<ul>\n<li>往返传播时延 &#x3D; 传播时延 * 2</li>\n<li>末端处理时间</li>\n</ul>\n</li>\n</ul>\n<p> <strong>利用率</strong></p>\n<ul>\n<li>信道利用率</li>\n</ul>\n<p>$$<br>信道利用率 &#x3D; \\frac{有数据通过时间}{（有+无）数据通过时间}<br>$$</p>\n<ul>\n<li>网络利用率： 信道利用率加权平均值</li>\n</ul>\n<blockquote>\n<p>加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。加权平均值的大小不仅取决于总体中各单位的数值（变量值）的大小，而且取决于各数值出现的次数（频数），由于各数值出现的次数对其在平均数中的影响起着权衡轻重的作用，因此叫做权数。</p>\n</blockquote>\n<h2 id=\"2-分层结构\"><a href=\"#2-分层结构\" class=\"headerlink\" title=\"2. 分层结构\"></a>2. 分层结构</h2><ul>\n<li>实体：第n层中的活动元素称为 <strong>n层实体</strong>。同一层的实体叫 <strong>对等实体</strong>。</li>\n<li>协议：为进行网络中的 <strong>对等实体</strong> 数据交换而建立的规则、标准或约定称为网络协议。</li>\n<li>接口（访问服务点SAP）： 上层使用下层服务的入口。</li>\n<li>服务：下层为相邻上层提供的功能调用。</li>\n</ul>\n<h3 id=\"2-1-OSI参考模型\"><a href=\"#2-1-OSI参考模型\" class=\"headerlink\" title=\"2.1. OSI参考模型\"></a>2.1. OSI参考模型</h3><p>目的：支持 <strong>异构网络系统</strong> 的互联互通。</p>\n<p>国际标准化组织（ISO) 于1984年提出开放系统互连（OSI）参考模型。</p>\n<table>\n<thead>\n<tr>\n<th>OSI 七层</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>数据子网（数据处理）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td></td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>通信子网（数据通信）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>应用层<ul>\n<li>定义：所有能和用户交互产生网络流量的程序</li>\n<li>典型应用层服务：<ul>\n<li>文件传输：FTP</li>\n<li>电子邮件：SMTP</li>\n<li>万维网：HTTP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>表示层<ul>\n<li>定义：用于处理在两个通信系统中交换信息的表示方式（语法和语义）</li>\n<li>功能：<ul>\n<li>数据格式变换</li>\n<li>数据加密解密</li>\n<li>数据压缩和恢复</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>会话层<ul>\n<li>定义：向表示层实体&#x2F;用户进程提供<strong>建立连接</strong>并在连接上<strong>有序地传输</strong>数据。这是会话， 也是<strong>建立同步</strong>（SYN)</li>\n<li>功能：<ul>\n<li>建立、管理、终止会话</li>\n<li>使用校验点可使会话在通信失效时从 <strong>校验点&#x2F;同步点</strong> 继续恢复通信，实现数据同步。（适用于传输大文件）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>定义：负责该机中 <strong>两个进程</strong> 的通信，即<strong>端到端</strong> 的通信。传输意念是报文段或用户数据报。</li>\n<li>功能：<ul>\n<li>可靠传输、不可靠传输<ul>\n<li>可靠：先建立连接，确认机制，如握手，再传输数据</li>\n<li>不可靠：无建立连接，直接传数据</li>\n</ul>\n</li>\n<li>差错控制</li>\n<li>流量控制</li>\n<li>复用分用<ul>\n<li>复用：多个应用层进程可同时使用下面传输层的服务</li>\n<li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>定义：主要任务是把分组从源端传到目的端，为分组交换网上的不同该机提供通信服务。网络层传输单位是数据报</li>\n<li>功能：<ul>\n<li>路由选择：最佳路径</li>\n<li>流量控制：限制发送端</li>\n<li>差错控制</li>\n<li>拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>定义：主要任务是把网络层传下来的数据报组装成帧。传输单位是帧。</li>\n<li>功能：<ul>\n<li>成帧（定义帧的开始和结束）</li>\n<li>差错控制：帧错+位错</li>\n<li>流量控制：限制发送端速度</li>\n<li>访问（接入）控制：控制对信道的访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>物理层<ul>\n<li>定义：主要任务是在物理媒体上实现比特流的透明传输。传输单位是比特。</li>\n<li>透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</li>\n<li>功能：<ul>\n<li>定义接口特性</li>\n<li>定义传输模式<ul>\n<li>单工、半双工、双工</li>\n</ul>\n</li>\n<li>定义传输速率</li>\n<li>比特同步</li>\n<li>比特编码：用什么电压表示1， 什么电压表示0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-TCP-x2F-IP模型\"><a href=\"#2-2-TCP-x2F-IP模型\" class=\"headerlink\" title=\"2.2. TCP&#x2F;IP模型\"></a>2.2. TCP&#x2F;IP模型</h3><table>\n<thead>\n<tr>\n<th>TCP&#x2F;IP 四层</th>\n<th>协议栈</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>HTTP，FTP，DNS，SMTP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP，UDP</td>\n</tr>\n<tr>\n<td>网际层</td>\n<td>IP</td>\n</tr>\n<tr>\n<td>网络接口层</td>\n<td>Ethernet, ATM, Frame Relay</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-OSI与TCP-x2F-IP对比\"><a href=\"#2-3-OSI与TCP-x2F-IP对比\" class=\"headerlink\" title=\"2.3. OSI与TCP&#x2F;IP对比\"></a>2.3. OSI与TCP&#x2F;IP对比</h3><ul>\n<li>相同点<ul>\n<li>都分层</li>\n<li>基于独立的协议栈的概念</li>\n<li>可以实现异构网络互联</li>\n</ul>\n</li>\n<li>不同点<ul>\n<li>OSI定义三点：服务、协议、接口</li>\n<li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li>\n<li>TCP&#x2F;IP设计之初就考虑到异构网互联问题，将IP作为重要层次</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>OSI</th>\n<th>TCP&#x2F;IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网络层</td>\n<td>无连接 + 面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>面向连接</td>\n<td>无连接 + 面向连接</td>\n</tr>\n</tbody></table>\n<p><strong>面向连接</strong>分为三个阶段：</p>\n<ol>\n<li>建立连接，在此阶段，发出一个建立连接的请求。</li>\n<li>只有连接成功建立之后，才能开始传输数据， 这是第二阶段</li>\n<li>当数据传输完毕必须释放连接</li>\n</ol>\n<p><strong>无连接</strong>直接进行数据传输</p>\n<h3 id=\"2-4-5层参考模型\"><a href=\"#2-4-5层参考模型\" class=\"headerlink\" title=\"2.4. 5层参考模型\"></a>2.4. 5层参考模型</h3><table>\n<thead>\n<tr>\n<th>5层参考模型</th>\n<th>说明</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>应用层</td>\n<td>支持各种网络应用</td>\n<td>FTP、SMTP、HTTP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>进程-进程的数据传输</td>\n<td>TCP、UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>源主机到目的主机的数据分组路由与转发</td>\n<td>IP、ICMP、OSPF</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>把网络层传下来的数据报组装成帧</td>\n<td>Ethernet、PPP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>比特传输</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"Flask-Migrate报错","date":"2021-03-25T09:06:06.000Z","_content":"# Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation \"user\" already exists\n\n**问题出现**: 全新项目, 本来是打算用mysql, 后来换pgsql, 一开始用mysql时执行过 `flask db migrate / flask db upgrade`, 测试ORM,, 换成pgsql后再执行`flask db upgrade`出现如上报错, 看字面意思是表已存在, 可pgsql中并没有此表!\n\n**原因**: 一开始执行 `flask db migrate` 时 alembic 已经创建了记录(versions目录下的.py文件), 也就是说对 alembic 来说是已经创建过数据表了, 在sql语句执行前就被报错拦截住了, 所以即使数据库没有user表, 报错也提示表已存在!\n\n**解决**: 直接把 versions 目录下记录全部删除, 重新执行 `flask db upgrade ` \n","source":"_posts/Flask-Migrate报错.md","raw":"---\ntitle: Flask-Migrate报错\ndate: 2021-03-25 17:06:06\ntags:\n---\n# Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation \"user\" already exists\n\n**问题出现**: 全新项目, 本来是打算用mysql, 后来换pgsql, 一开始用mysql时执行过 `flask db migrate / flask db upgrade`, 测试ORM,, 换成pgsql后再执行`flask db upgrade`出现如上报错, 看字面意思是表已存在, 可pgsql中并没有此表!\n\n**原因**: 一开始执行 `flask db migrate` 时 alembic 已经创建了记录(versions目录下的.py文件), 也就是说对 alembic 来说是已经创建过数据表了, 在sql语句执行前就被报错拦截住了, 所以即使数据库没有user表, 报错也提示表已存在!\n\n**解决**: 直接把 versions 目录下记录全部删除, 重新执行 `flask db upgrade ` \n","slug":"Flask-Migrate报错","published":1,"updated":"2021-06-13T14:33:29.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc40003isuh8t37fn9r","content":"<h1 id=\"Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists\"><a href=\"#Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists\" class=\"headerlink\" title=\"Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists\"></a>Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists</h1><p><strong>问题出现</strong>: 全新项目, 本来是打算用mysql, 后来换pgsql, 一开始用mysql时执行过 <code>flask db migrate / flask db upgrade</code>, 测试ORM,, 换成pgsql后再执行<code>flask db upgrade</code>出现如上报错, 看字面意思是表已存在, 可pgsql中并没有此表!</p>\n<p><strong>原因</strong>: 一开始执行 <code>flask db migrate</code> 时 alembic 已经创建了记录(versions目录下的.py文件), 也就是说对 alembic 来说是已经创建过数据表了, 在sql语句执行前就被报错拦截住了, 所以即使数据库没有user表, 报错也提示表已存在!</p>\n<p><strong>解决</strong>: 直接把 versions 目录下记录全部删除, 重新执行 <code>flask db upgrade </code> </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists\"><a href=\"#Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists\" class=\"headerlink\" title=\"Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists\"></a>Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists</h1><p><strong>问题出现</strong>: 全新项目, 本来是打算用mysql, 后来换pgsql, 一开始用mysql时执行过 <code>flask db migrate / flask db upgrade</code>, 测试ORM,, 换成pgsql后再执行<code>flask db upgrade</code>出现如上报错, 看字面意思是表已存在, 可pgsql中并没有此表!</p>\n<p><strong>原因</strong>: 一开始执行 <code>flask db migrate</code> 时 alembic 已经创建了记录(versions目录下的.py文件), 也就是说对 alembic 来说是已经创建过数据表了, 在sql语句执行前就被报错拦截住了, 所以即使数据库没有user表, 报错也提示表已存在!</p>\n<p><strong>解决</strong>: 直接把 versions 目录下记录全部删除, 重新执行 <code>flask db upgrade </code> </p>\n"},{"title":"Chapter-02","date":"2021-06-22T05:42:54.000Z","_content":"\n# 计算机网络基础Chapter-2, 物理层\n\n## 1. 通信基础\n\n**物理层基本概念**\n\n- 物理层解决如何在连接各种计算机的传输媒体上**传输数据比特流**, 而不是指具体的传输媒体\n- 主要任务: 确定与传输媒体接口有关的一些特性\n- 机械特性:\n- 电气特性:\n- 功能特性:\n\n**数据通信基础**\n\n![image-20210622135226744](../images/image-20210622135226744.png)\n\n- 数据: 传送信息的实体, 通常是有意义的符号序列\n- 信号: 数据的电气/电磁的表现, 是数据在传输过程中的存在形式\n  - 数字信号: 代表消息的参数取值是离散的\n  - 模拟信号: 代表消息的参数取值是连续的 (正弦波)\n- 信源: 产生和发送数据的源头\n- 信宿: 接收数据的终点\n- 信道: \n  - 按传输信号分类:\n  - 按\n- 三种通信方式:\n  - 单工通信\n\n\n\n\n\n## 2. 两个公式\n\n\n\n## 3. 看图说话 \n\n\n\n\n\n## 4. 传输介质 \n\n\n\n\n\n## 5. 物理层设备\n","source":"_posts/Chapter-02.md","raw":"---\ntitle: Chapter-02\ndate: 2021-06-22 13:42:54\ntags:\n---\n\n# 计算机网络基础Chapter-2, 物理层\n\n## 1. 通信基础\n\n**物理层基本概念**\n\n- 物理层解决如何在连接各种计算机的传输媒体上**传输数据比特流**, 而不是指具体的传输媒体\n- 主要任务: 确定与传输媒体接口有关的一些特性\n- 机械特性:\n- 电气特性:\n- 功能特性:\n\n**数据通信基础**\n\n![image-20210622135226744](../images/image-20210622135226744.png)\n\n- 数据: 传送信息的实体, 通常是有意义的符号序列\n- 信号: 数据的电气/电磁的表现, 是数据在传输过程中的存在形式\n  - 数字信号: 代表消息的参数取值是离散的\n  - 模拟信号: 代表消息的参数取值是连续的 (正弦波)\n- 信源: 产生和发送数据的源头\n- 信宿: 接收数据的终点\n- 信道: \n  - 按传输信号分类:\n  - 按\n- 三种通信方式:\n  - 单工通信\n\n\n\n\n\n## 2. 两个公式\n\n\n\n## 3. 看图说话 \n\n\n\n\n\n## 4. 传输介质 \n\n\n\n\n\n## 5. 物理层设备\n","slug":"Chapter-02","published":1,"updated":"2021-08-21T02:52:54.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc60006isuhbrl17mse","content":"<h1 id=\"计算机网络基础Chapter-2-物理层\"><a href=\"#计算机网络基础Chapter-2-物理层\" class=\"headerlink\" title=\"计算机网络基础Chapter-2, 物理层\"></a>计算机网络基础Chapter-2, 物理层</h1><h2 id=\"1-通信基础\"><a href=\"#1-通信基础\" class=\"headerlink\" title=\"1. 通信基础\"></a>1. 通信基础</h2><p><strong>物理层基本概念</strong></p>\n<ul>\n<li>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>, 而不是指具体的传输媒体</li>\n<li>主要任务: 确定与传输媒体接口有关的一些特性</li>\n<li>机械特性:</li>\n<li>电气特性:</li>\n<li>功能特性:</li>\n</ul>\n<p><strong>数据通信基础</strong></p>\n<p><img src=\"/../images/image-20210622135226744.png\" alt=\"image-20210622135226744\"></p>\n<ul>\n<li>数据: 传送信息的实体, 通常是有意义的符号序列</li>\n<li>信号: 数据的电气&#x2F;电磁的表现, 是数据在传输过程中的存在形式<ul>\n<li>数字信号: 代表消息的参数取值是离散的</li>\n<li>模拟信号: 代表消息的参数取值是连续的 (正弦波)</li>\n</ul>\n</li>\n<li>信源: 产生和发送数据的源头</li>\n<li>信宿: 接收数据的终点</li>\n<li>信道: <ul>\n<li>按传输信号分类:</li>\n<li>按</li>\n</ul>\n</li>\n<li>三种通信方式:<ul>\n<li>单工通信</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-两个公式\"><a href=\"#2-两个公式\" class=\"headerlink\" title=\"2. 两个公式\"></a>2. 两个公式</h2><h2 id=\"3-看图说话\"><a href=\"#3-看图说话\" class=\"headerlink\" title=\"3. 看图说话\"></a>3. 看图说话</h2><h2 id=\"4-传输介质\"><a href=\"#4-传输介质\" class=\"headerlink\" title=\"4. 传输介质\"></a>4. 传输介质</h2><h2 id=\"5-物理层设备\"><a href=\"#5-物理层设备\" class=\"headerlink\" title=\"5. 物理层设备\"></a>5. 物理层设备</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机网络基础Chapter-2-物理层\"><a href=\"#计算机网络基础Chapter-2-物理层\" class=\"headerlink\" title=\"计算机网络基础Chapter-2, 物理层\"></a>计算机网络基础Chapter-2, 物理层</h1><h2 id=\"1-通信基础\"><a href=\"#1-通信基础\" class=\"headerlink\" title=\"1. 通信基础\"></a>1. 通信基础</h2><p><strong>物理层基本概念</strong></p>\n<ul>\n<li>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>, 而不是指具体的传输媒体</li>\n<li>主要任务: 确定与传输媒体接口有关的一些特性</li>\n<li>机械特性:</li>\n<li>电气特性:</li>\n<li>功能特性:</li>\n</ul>\n<p><strong>数据通信基础</strong></p>\n<p><img src=\"/../images/image-20210622135226744.png\" alt=\"image-20210622135226744\"></p>\n<ul>\n<li>数据: 传送信息的实体, 通常是有意义的符号序列</li>\n<li>信号: 数据的电气&#x2F;电磁的表现, 是数据在传输过程中的存在形式<ul>\n<li>数字信号: 代表消息的参数取值是离散的</li>\n<li>模拟信号: 代表消息的参数取值是连续的 (正弦波)</li>\n</ul>\n</li>\n<li>信源: 产生和发送数据的源头</li>\n<li>信宿: 接收数据的终点</li>\n<li>信道: <ul>\n<li>按传输信号分类:</li>\n<li>按</li>\n</ul>\n</li>\n<li>三种通信方式:<ul>\n<li>单工通信</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-两个公式\"><a href=\"#2-两个公式\" class=\"headerlink\" title=\"2. 两个公式\"></a>2. 两个公式</h2><h2 id=\"3-看图说话\"><a href=\"#3-看图说话\" class=\"headerlink\" title=\"3. 看图说话\"></a>3. 看图说话</h2><h2 id=\"4-传输介质\"><a href=\"#4-传输介质\" class=\"headerlink\" title=\"4. 传输介质\"></a>4. 传输介质</h2><h2 id=\"5-物理层设备\"><a href=\"#5-物理层设备\" class=\"headerlink\" title=\"5. 物理层设备\"></a>5. 物理层设备</h2>"},{"title":"c++day01.md","date":"2021-08-21T02:52:00.000Z","_content":"\n# download\n\n-  [ Windows10下载MinGW ]( https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg )\n  - 点击页面中的`x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z` 进行下载\n  - 下载完成后把 `bin` 目录放入系统环境变量即可在终端使用 `c++` 命令进行编译 `.cpp` 源代码\n\n# Hello World\n\n- `MyFirstApp`\n\n```c++\n#include <iostream>\n\nint main(){\n    std::cout << \"Hello World! \\n\"; // this will output to the console hello world\n    system(\"pause>0\");\n}\n```\n\n```shell\n# 编译\ng++ .\\MyFirstApp.cpp\n\n# 运行\n.\\a.exe\n```\n\n- 换行  `\\n` 或 ` << endl;`\n\n- 编译命令 `g++ [source file] -o [output filename]`\n\n# Variables \n\n- 命名\n  - 构成: 下划线, 字母(区分大小写), 数字(不可数字开头)\n  - 一般用小驼峰命名法\n\n**Data types**\n\n| 类型   | 定义 | size(bytes) | 说明                                           |\n| ------ | --|--- | ---------------------------------------------- |\n| 整数   | int | 4 | -2147483648 to 2147483647 |\n| 字符 | char | 1 | 单引号为字符 'a' |\n| 字符串 | string |  | 双引号为字符串 \"character\" |\n| 布尔   | bool | 1 | true / false                                   |\n| 浮点数 | float| 4 |  |\n| 大浮点数 | double | 8 |  |\n\n**Data type overflow**\n\n- 变量的值超过其内存空间, 类似钟表指针, 13 点 = 1 点 (INT_MAX + 1 = INT_MIN)\n\n**ASCII table**\n\n- asign characters to number (it's for American)\n- ASCII extends: utf-(1-16)  (for others)\n- 字符转换为ASCII数字 `(int)'a'` 和 `int('a')` 两种写法\n\n# Condition Statement\n\n**语法**\n\n`if(){}elif(){}else(){}`\n\n- 注: 如果 `{}` 内只有一行代码, 可以不写 `{}`\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    //User enters side lengths of a triangle (a, b, c)\n    //Program should write out whethre that triangle is\n    //equilateral, isosceles or scalene\n    float a, b, c;\n    cout << \"a, b, c: \";\n    cin >> a >> b >> c;\n    \n    if (a == b && b == c)\n        cout << \"Equilateral triangle\";\n    else\n    {\n        if (a != b && a != c && b != c)\n            cout << \"Scalene triangle\";\n        else\n            cout << \"Isosceles triangle\";\n    }\n\n    return 0;\n}\n```\n\n# Operators\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    // 执行优先级 从上到下\n    // + - * / %\n    cout << 1 + 1 << endl;\n    cout << 5 / 2 << endl;  // 2\n    cout << 5.0 / 2 << endl;  // 2.5\n\n    // ++, --\n    int counter = 7;\n    counter++;\n    cout << counter << endl;\n    counter--;\n    cout << counter << endl;\n\n    int counter2 = 7;\n    cout << counter2++ << endl;  // 7\n    cout << counter2 << endl;  // 8\n    cout << ++counter2 << endl;  // 9\n\n    system(\"cls\"); // clear console\n\n    // <, >, <=, >=, ==, !=\n    int a = 5, b = 5;\n    // cout << (a > b) << endl;  // 0 for false (1 for true)\n\n    // &&, ||, !\n    int c = 8, d = 9;\n    // cout << !(c == 5 && b == 9);\n\n    // 优先级\n    cout << (c == 8 && d == 4 + 5);  // 1\n\n    // =, +=, -=, *=, /=, %=\n    int x = 5;\n    x += 7;  //same as: x = x + 7\n    cout << x << endl;\n\n    return 0;\n}\n```\n\n# 三目\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    int hostUserNum, guestUserNum;\n    cout << \"HOST: \";\n    cin >> hostUserNum;\n    system(\"cls\");\n    cout << \"Guest: \";\n    cin >> guestUserNum;\n\n    (hostUserNum == guestUserNum)? cout << \"Correct!\": cout << \"Failed!\";\n\n    return 0;\n}\n```\n\n# switch case\n\n> 注意每个case后面必需接break退出, 因为程序只判断一次case条件, 进入一次后, 其他的case不会再判断, 会运行下面的所有case.\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    float num1, num2;\n    char operation;\n    cout << \"Caculator\" << endl;\n    cin >> num1 >> operation >> num2;\n\n    switch (operation)\n    {\n    case '-':cout << num1 << operation << num2 << \"=\" << num1 - num2;\nbreak;\n    case '+':cout << num1 << operation << num2 << \"=\" << num1 + num2; break;\n    case '*':cout << num1 << operation << num2 << \"=\" << num1 * num2; break;\n    case '/':cout << num1 << operation << num2 << \"=\" << num1 / num2; break;\n    case '%':\n        bool isNum1Int, isNum2Int;\n        isNum1Int = (int(num1) == num1);\n        isNum2Int = (int(num2) == num2);\n\n        if (isNum1Int && isNum2Int)\n            cout << num1 << operation << num2 << \"=\" << int(num1) % int(num2);\n        else\n            cout << \"Not valid!\";\n\n    break;\n    \n    default:cout << \"Not valid opeation!\"; break;\n    }\n\n    return 0;\n}\n```\n\n\n\n","source":"_posts/c-day01-md.md","raw":"---\ntitle: c++day01.md\ndate: 2021-08-21 10:52:00\ntags:\n---\n\n# download\n\n-  [ Windows10下载MinGW ]( https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg )\n  - 点击页面中的`x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z` 进行下载\n  - 下载完成后把 `bin` 目录放入系统环境变量即可在终端使用 `c++` 命令进行编译 `.cpp` 源代码\n\n# Hello World\n\n- `MyFirstApp`\n\n```c++\n#include <iostream>\n\nint main(){\n    std::cout << \"Hello World! \\n\"; // this will output to the console hello world\n    system(\"pause>0\");\n}\n```\n\n```shell\n# 编译\ng++ .\\MyFirstApp.cpp\n\n# 运行\n.\\a.exe\n```\n\n- 换行  `\\n` 或 ` << endl;`\n\n- 编译命令 `g++ [source file] -o [output filename]`\n\n# Variables \n\n- 命名\n  - 构成: 下划线, 字母(区分大小写), 数字(不可数字开头)\n  - 一般用小驼峰命名法\n\n**Data types**\n\n| 类型   | 定义 | size(bytes) | 说明                                           |\n| ------ | --|--- | ---------------------------------------------- |\n| 整数   | int | 4 | -2147483648 to 2147483647 |\n| 字符 | char | 1 | 单引号为字符 'a' |\n| 字符串 | string |  | 双引号为字符串 \"character\" |\n| 布尔   | bool | 1 | true / false                                   |\n| 浮点数 | float| 4 |  |\n| 大浮点数 | double | 8 |  |\n\n**Data type overflow**\n\n- 变量的值超过其内存空间, 类似钟表指针, 13 点 = 1 点 (INT_MAX + 1 = INT_MIN)\n\n**ASCII table**\n\n- asign characters to number (it's for American)\n- ASCII extends: utf-(1-16)  (for others)\n- 字符转换为ASCII数字 `(int)'a'` 和 `int('a')` 两种写法\n\n# Condition Statement\n\n**语法**\n\n`if(){}elif(){}else(){}`\n\n- 注: 如果 `{}` 内只有一行代码, 可以不写 `{}`\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    //User enters side lengths of a triangle (a, b, c)\n    //Program should write out whethre that triangle is\n    //equilateral, isosceles or scalene\n    float a, b, c;\n    cout << \"a, b, c: \";\n    cin >> a >> b >> c;\n    \n    if (a == b && b == c)\n        cout << \"Equilateral triangle\";\n    else\n    {\n        if (a != b && a != c && b != c)\n            cout << \"Scalene triangle\";\n        else\n            cout << \"Isosceles triangle\";\n    }\n\n    return 0;\n}\n```\n\n# Operators\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    // 执行优先级 从上到下\n    // + - * / %\n    cout << 1 + 1 << endl;\n    cout << 5 / 2 << endl;  // 2\n    cout << 5.0 / 2 << endl;  // 2.5\n\n    // ++, --\n    int counter = 7;\n    counter++;\n    cout << counter << endl;\n    counter--;\n    cout << counter << endl;\n\n    int counter2 = 7;\n    cout << counter2++ << endl;  // 7\n    cout << counter2 << endl;  // 8\n    cout << ++counter2 << endl;  // 9\n\n    system(\"cls\"); // clear console\n\n    // <, >, <=, >=, ==, !=\n    int a = 5, b = 5;\n    // cout << (a > b) << endl;  // 0 for false (1 for true)\n\n    // &&, ||, !\n    int c = 8, d = 9;\n    // cout << !(c == 5 && b == 9);\n\n    // 优先级\n    cout << (c == 8 && d == 4 + 5);  // 1\n\n    // =, +=, -=, *=, /=, %=\n    int x = 5;\n    x += 7;  //same as: x = x + 7\n    cout << x << endl;\n\n    return 0;\n}\n```\n\n# 三目\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    int hostUserNum, guestUserNum;\n    cout << \"HOST: \";\n    cin >> hostUserNum;\n    system(\"cls\");\n    cout << \"Guest: \";\n    cin >> guestUserNum;\n\n    (hostUserNum == guestUserNum)? cout << \"Correct!\": cout << \"Failed!\";\n\n    return 0;\n}\n```\n\n# switch case\n\n> 注意每个case后面必需接break退出, 因为程序只判断一次case条件, 进入一次后, 其他的case不会再判断, 会运行下面的所有case.\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    float num1, num2;\n    char operation;\n    cout << \"Caculator\" << endl;\n    cin >> num1 >> operation >> num2;\n\n    switch (operation)\n    {\n    case '-':cout << num1 << operation << num2 << \"=\" << num1 - num2;\nbreak;\n    case '+':cout << num1 << operation << num2 << \"=\" << num1 + num2; break;\n    case '*':cout << num1 << operation << num2 << \"=\" << num1 * num2; break;\n    case '/':cout << num1 << operation << num2 << \"=\" << num1 / num2; break;\n    case '%':\n        bool isNum1Int, isNum2Int;\n        isNum1Int = (int(num1) == num1);\n        isNum2Int = (int(num2) == num2);\n\n        if (isNum1Int && isNum2Int)\n            cout << num1 << operation << num2 << \"=\" << int(num1) % int(num2);\n        else\n            cout << \"Not valid!\";\n\n    break;\n    \n    default:cout << \"Not valid opeation!\"; break;\n    }\n\n    return 0;\n}\n```\n\n\n\n","slug":"c-day01-md","published":1,"updated":"2021-08-29T09:41:58.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc60007isuhb9df2ntp","content":"<h1 id=\"download\"><a href=\"#download\" class=\"headerlink\" title=\"download\"></a>download</h1><ul>\n<li><a href=\"https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg\"> Windows10下载MinGW </a></li>\n<li>点击页面中的<code>x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z</code> 进行下载</li>\n<li>下载完成后把 <code>bin</code> 目录放入系统环境变量即可在终端使用 <code>c++</code> 命令进行编译 <code>.cpp</code> 源代码</li>\n</ul>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li><code>MyFirstApp</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World! \\n&quot;</span>; <span class=\"comment\">// this will output to the console hello world</span></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&gt;0&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">g++ .\\MyFirstApp.cpp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行</span></span><br><span class=\"line\">.\\a.exe</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>换行  <code>\\n</code> 或 <code> &lt;&lt; endl;</code></p>\n</li>\n<li><p>编译命令 <code>g++ [source file] -o [output filename]</code></p>\n</li>\n</ul>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><ul>\n<li>命名<ul>\n<li>构成: 下划线, 字母(区分大小写), 数字(不可数字开头)</li>\n<li>一般用小驼峰命名法</li>\n</ul>\n</li>\n</ul>\n<p><strong>Data types</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>定义</th>\n<th>size(bytes)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>整数</td>\n<td>int</td>\n<td>4</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>字符</td>\n<td>char</td>\n<td>1</td>\n<td>单引号为字符 ‘a’</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>string</td>\n<td></td>\n<td>双引号为字符串 “character”</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>bool</td>\n<td>1</td>\n<td>true &#x2F; false</td>\n</tr>\n<tr>\n<td>浮点数</td>\n<td>float</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>大浮点数</td>\n<td>double</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>Data type overflow</strong></p>\n<ul>\n<li>变量的值超过其内存空间, 类似钟表指针, 13 点 &#x3D; 1 点 (INT_MAX + 1 &#x3D; INT_MIN)</li>\n</ul>\n<p><strong>ASCII table</strong></p>\n<ul>\n<li>asign characters to number (it’s for American)</li>\n<li>ASCII extends: utf-(1-16)  (for others)</li>\n<li>字符转换为ASCII数字 <code>(int)&#39;a&#39;</code> 和 <code>int(&#39;a&#39;)</code> 两种写法</li>\n</ul>\n<h1 id=\"Condition-Statement\"><a href=\"#Condition-Statement\" class=\"headerlink\" title=\"Condition Statement\"></a>Condition Statement</h1><p><strong>语法</strong></p>\n<p><code>if()&#123;&#125;elif()&#123;&#125;else()&#123;&#125;</code></p>\n<ul>\n<li>注: 如果 <code>&#123;&#125;</code> 内只有一行代码, 可以不写 <code>&#123;&#125;</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//User enters side lengths of a triangle (a, b, c)</span></span><br><span class=\"line\">    <span class=\"comment\">//Program should write out whethre that triangle is</span></span><br><span class=\"line\">    <span class=\"comment\">//equilateral, isosceles or scalene</span></span><br><span class=\"line\">    <span class=\"type\">float</span> a, b, c;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a, b, c: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b &amp;&amp; b == c)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Equilateral triangle&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a != b &amp;&amp; a != c &amp;&amp; b != c)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Scalene triangle&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Isosceles triangle&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行优先级 从上到下</span></span><br><span class=\"line\">    <span class=\"comment\">// + - * / %</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">1</span> + <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">5</span> / <span class=\"number\">2</span> &lt;&lt; endl;  <span class=\"comment\">// 2</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">5.0</span> / <span class=\"number\">2</span> &lt;&lt; endl;  <span class=\"comment\">// 2.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ++, --</span></span><br><span class=\"line\">    <span class=\"type\">int</span> counter = <span class=\"number\">7</span>;</span><br><span class=\"line\">    counter++;</span><br><span class=\"line\">    cout &lt;&lt; counter &lt;&lt; endl;</span><br><span class=\"line\">    counter--;</span><br><span class=\"line\">    cout &lt;&lt; counter &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> counter2 = <span class=\"number\">7</span>;</span><br><span class=\"line\">    cout &lt;&lt; counter2++ &lt;&lt; endl;  <span class=\"comment\">// 7</span></span><br><span class=\"line\">    cout &lt;&lt; counter2 &lt;&lt; endl;  <span class=\"comment\">// 8</span></span><br><span class=\"line\">    cout &lt;&lt; ++counter2 &lt;&lt; endl;  <span class=\"comment\">// 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;cls&quot;</span>); <span class=\"comment\">// clear console</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &lt;, &gt;, &lt;=, &gt;=, ==, !=</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; (a &gt; b) &lt;&lt; endl;  // 0 for false (1 for true)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &amp;&amp;, ||, !</span></span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">8</span>, d = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; !(c == 5 &amp;&amp; b == 9);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">    cout &lt;&lt; (c == <span class=\"number\">8</span> &amp;&amp; d == <span class=\"number\">4</span> + <span class=\"number\">5</span>);  <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =, +=, -=, *=, /=, %=</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x += <span class=\"number\">7</span>;  <span class=\"comment\">//same as: x = x + 7</span></span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三目\"><a href=\"#三目\" class=\"headerlink\" title=\"三目\"></a>三目</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hostUserNum, guestUserNum;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;HOST: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; hostUserNum;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Guest: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; guestUserNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    (hostUserNum == guestUserNum)? cout &lt;&lt; <span class=\"string\">&quot;Correct!&quot;</span>: cout &lt;&lt; <span class=\"string\">&quot;Failed!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"switch-case\"><a href=\"#switch-case\" class=\"headerlink\" title=\"switch case\"></a>switch case</h1><blockquote>\n<p>注意每个case后面必需接break退出, 因为程序只判断一次case条件, 进入一次后, 其他的case不会再判断, 会运行下面的所有case.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> num1, num2;</span><br><span class=\"line\">    <span class=\"type\">char</span> operation;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Caculator&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; num1 &gt;&gt; operation &gt;&gt; num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (operation)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 - num2;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 + num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 * num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 / num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;%&#x27;</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> isNum1Int, isNum2Int;</span><br><span class=\"line\">        isNum1Int = (<span class=\"built_in\">int</span>(num1) == num1);</span><br><span class=\"line\">        isNum2Int = (<span class=\"built_in\">int</span>(num2) == num2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNum1Int &amp;&amp; isNum2Int)</span><br><span class=\"line\">            cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; <span class=\"built_in\">int</span>(num1) % <span class=\"built_in\">int</span>(num2);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Not valid!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">default</span>:cout &lt;&lt; <span class=\"string\">&quot;Not valid opeation!&quot;</span>; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"download\"><a href=\"#download\" class=\"headerlink\" title=\"download\"></a>download</h1><ul>\n<li><a href=\"https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg\"> Windows10下载MinGW </a></li>\n<li>点击页面中的<code>x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z</code> 进行下载</li>\n<li>下载完成后把 <code>bin</code> 目录放入系统环境变量即可在终端使用 <code>c++</code> 命令进行编译 <code>.cpp</code> 源代码</li>\n</ul>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li><code>MyFirstApp</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World! \\n&quot;</span>; <span class=\"comment\">// this will output to the console hello world</span></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&gt;0&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">g++ .\\MyFirstApp.cpp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行</span></span><br><span class=\"line\">.\\a.exe</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>换行  <code>\\n</code> 或 <code> &lt;&lt; endl;</code></p>\n</li>\n<li><p>编译命令 <code>g++ [source file] -o [output filename]</code></p>\n</li>\n</ul>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><ul>\n<li>命名<ul>\n<li>构成: 下划线, 字母(区分大小写), 数字(不可数字开头)</li>\n<li>一般用小驼峰命名法</li>\n</ul>\n</li>\n</ul>\n<p><strong>Data types</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>定义</th>\n<th>size(bytes)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>整数</td>\n<td>int</td>\n<td>4</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>字符</td>\n<td>char</td>\n<td>1</td>\n<td>单引号为字符 ‘a’</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>string</td>\n<td></td>\n<td>双引号为字符串 “character”</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>bool</td>\n<td>1</td>\n<td>true &#x2F; false</td>\n</tr>\n<tr>\n<td>浮点数</td>\n<td>float</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>大浮点数</td>\n<td>double</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>Data type overflow</strong></p>\n<ul>\n<li>变量的值超过其内存空间, 类似钟表指针, 13 点 &#x3D; 1 点 (INT_MAX + 1 &#x3D; INT_MIN)</li>\n</ul>\n<p><strong>ASCII table</strong></p>\n<ul>\n<li>asign characters to number (it’s for American)</li>\n<li>ASCII extends: utf-(1-16)  (for others)</li>\n<li>字符转换为ASCII数字 <code>(int)&#39;a&#39;</code> 和 <code>int(&#39;a&#39;)</code> 两种写法</li>\n</ul>\n<h1 id=\"Condition-Statement\"><a href=\"#Condition-Statement\" class=\"headerlink\" title=\"Condition Statement\"></a>Condition Statement</h1><p><strong>语法</strong></p>\n<p><code>if()&#123;&#125;elif()&#123;&#125;else()&#123;&#125;</code></p>\n<ul>\n<li>注: 如果 <code>&#123;&#125;</code> 内只有一行代码, 可以不写 <code>&#123;&#125;</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//User enters side lengths of a triangle (a, b, c)</span></span><br><span class=\"line\">    <span class=\"comment\">//Program should write out whethre that triangle is</span></span><br><span class=\"line\">    <span class=\"comment\">//equilateral, isosceles or scalene</span></span><br><span class=\"line\">    <span class=\"type\">float</span> a, b, c;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a, b, c: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b &amp;&amp; b == c)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Equilateral triangle&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a != b &amp;&amp; a != c &amp;&amp; b != c)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Scalene triangle&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Isosceles triangle&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行优先级 从上到下</span></span><br><span class=\"line\">    <span class=\"comment\">// + - * / %</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">1</span> + <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">5</span> / <span class=\"number\">2</span> &lt;&lt; endl;  <span class=\"comment\">// 2</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">5.0</span> / <span class=\"number\">2</span> &lt;&lt; endl;  <span class=\"comment\">// 2.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ++, --</span></span><br><span class=\"line\">    <span class=\"type\">int</span> counter = <span class=\"number\">7</span>;</span><br><span class=\"line\">    counter++;</span><br><span class=\"line\">    cout &lt;&lt; counter &lt;&lt; endl;</span><br><span class=\"line\">    counter--;</span><br><span class=\"line\">    cout &lt;&lt; counter &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> counter2 = <span class=\"number\">7</span>;</span><br><span class=\"line\">    cout &lt;&lt; counter2++ &lt;&lt; endl;  <span class=\"comment\">// 7</span></span><br><span class=\"line\">    cout &lt;&lt; counter2 &lt;&lt; endl;  <span class=\"comment\">// 8</span></span><br><span class=\"line\">    cout &lt;&lt; ++counter2 &lt;&lt; endl;  <span class=\"comment\">// 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;cls&quot;</span>); <span class=\"comment\">// clear console</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &lt;, &gt;, &lt;=, &gt;=, ==, !=</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; (a &gt; b) &lt;&lt; endl;  // 0 for false (1 for true)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &amp;&amp;, ||, !</span></span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">8</span>, d = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; !(c == 5 &amp;&amp; b == 9);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">    cout &lt;&lt; (c == <span class=\"number\">8</span> &amp;&amp; d == <span class=\"number\">4</span> + <span class=\"number\">5</span>);  <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =, +=, -=, *=, /=, %=</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x += <span class=\"number\">7</span>;  <span class=\"comment\">//same as: x = x + 7</span></span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三目\"><a href=\"#三目\" class=\"headerlink\" title=\"三目\"></a>三目</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hostUserNum, guestUserNum;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;HOST: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; hostUserNum;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Guest: &quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; guestUserNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    (hostUserNum == guestUserNum)? cout &lt;&lt; <span class=\"string\">&quot;Correct!&quot;</span>: cout &lt;&lt; <span class=\"string\">&quot;Failed!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"switch-case\"><a href=\"#switch-case\" class=\"headerlink\" title=\"switch case\"></a>switch case</h1><blockquote>\n<p>注意每个case后面必需接break退出, 因为程序只判断一次case条件, 进入一次后, 其他的case不会再判断, 会运行下面的所有case.</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> num1, num2;</span><br><span class=\"line\">    <span class=\"type\">char</span> operation;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Caculator&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; num1 &gt;&gt; operation &gt;&gt; num2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (operation)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 - num2;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 + num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 * num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; num1 / num2; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;%&#x27;</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> isNum1Int, isNum2Int;</span><br><span class=\"line\">        isNum1Int = (<span class=\"built_in\">int</span>(num1) == num1);</span><br><span class=\"line\">        isNum2Int = (<span class=\"built_in\">int</span>(num2) == num2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNum1Int &amp;&amp; isNum2Int)</span><br><span class=\"line\">            cout &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class=\"string\">&quot;=&quot;</span> &lt;&lt; <span class=\"built_in\">int</span>(num1) % <span class=\"built_in\">int</span>(num2);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Not valid!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">default</span>:cout &lt;&lt; <span class=\"string\">&quot;Not valid opeation!&quot;</span>; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"cookiecutter-flask-restful使用笔记","date":"2021-04-02T09:40:17.000Z","_content":"\n[TOC]\n\n# flask-cookiecutter-restful 使用\n\n\n\n## 一. 本地开发准备\n\n\n\n### 1. 源码安装python-3.7.10\n\n```shell\nwget -c https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tar.xz\ntar -zxvf Python-3.7.10.tar.xz\ncd Python-3.7.10/Modules\nvim Setup.dist\n```\n\n搜索:\n\n```shell\n:/ssl\n```\n将以下内容取消注释:\n\n```shell \n# Socket module helper for socket(2)\n#_socket socketmodule.c\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n#_ssl _ssl.c \\\n# -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n# -L$(SSL)/lib -lssl -lcrypto\n```\n\n取消注释如下：\n\n```shell\n# Socket module helper for socket(2)\n_socket socketmodule.c\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n_ssl _ssl.c \\\n-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n-L$(SSL)/lib -lssl -lcrypto\n```\n\n返回Python源码根目录编译安装：\n\n```\ncd ../\n./configure --prefix=/usr/local/python3.7.10 --enable-loadable-sqlite-extensions\nmake\nmake install\n```\n\n将 /usr/local/python3.6/bin 加入 PATH， 在`/etc/profile`文件后追加：\n\n```\nvim /etc/profile\n```\n\n追回内容如下：\n\n```\nexport PATH=/usr/local/python3.7/bin:$PATH\n```\n\n设置python, pip别名：\n\n```\nvim ~/.bashrc\n```\n\n内容如下：\n\n```\nalias python3.7=/usr/local/python3.7.10/bin/python3\nalias pip3.7=/usr/local/python3.7.10/bin/pip3\n```\n\n\n\n### 2. 使用cookiecutter创建项目\n\n```shell\npip install cookiecutter\n\ncookiecutter https://github.com/karec/cookiecutter-flask-restful\n```\n\n\n\n### 3. pipenv 创建虚拟环境\n\n```shell\n# 安装\npip install pipenv\n\n# 更新\npip install --user --upgrade pipenv\n\n# 指定Python版本创建虚拟环境\npipenv --python 3.7\n\n# 进入虚拟环境\npipenv shell\n\n# 安装包\npipenv install\n# 或\npipenv install -r requirements.txt\n```\n\n### 4. 数据库\n```shell\n# 本地创建相关库\nCREATE DATABASE `aipms` /*!40100 DEFAULT CHARACTER SET utf8mb4 */\n\n# 项目配置数据库, 修改.env\nDATABASE_URI=mysql+pymysql://root:123456@localhost:3306/aipms?charset=utf8mb4\n\n# 进虚拟环境\npipenv shell\n\n# 生成迁移文件\nflask db migrate -m 'init migration'\n\n# 更新到数据库\nflask db upgrate\n```\n\n### 5. 接口测试\n\n- 注册\n```shell\ncurl --location --request POST 'http://127.0.0.1:5002/auth/register' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}'\n```\n\n- 登录\n```shell\ncurl --location --request POST 'http://127.0.0.1:5002/auth/login' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}'\n```\n\n\n### 6. git\n\n```shell\n# git初始化\ngit init\n\n# 添加源\ngit remote add origin git@*****\n\n# 拉取代码, 有冲突解决冲突\ngit pull\n\n# 切换新分支\ngit checkout -b feature-init\n\n# add 所有\ngit add .\n\n# commit\ngit commit -m 'init'\n\n# 分支推送到远程库\ngit push --set-upstream origin feature-init\n```\n\n\n\n## 二. 部署\n\n### 1. gunicorn\n\n```shell\npipenv install gunicorn\n```\n\n\n\n### 2. docker\n\n- 安docker\n\n```shell\nbrew install docker\n```\n\n- 安docker-compose\n\n```shell\npython3 -m pip install docker-compose\n```\n\n- 登录docker\n```shell\ndocker login\n```\n\n- 拉取基础Image\n```shell\ndocker pull python:3.7.10-alpine\n```\n\n- 创建容器并进入\n```shell\ndocker run -it --name=container_name python:3.7.10-alpine /bin/sh\n```\n\n- 配置dockerfile\n```shell\n\n```\n\n- 从dockerfile启动项目\n```shell\ndocker build -t container_name ./Dockerfile\n```\n\n","source":"_posts/cookiecutter-flask-restful使用笔记.md","raw":"---\ntitle: cookiecutter-flask-restful使用笔记\ndate: 2021-04-02 17:40:17\ntags:\n---\n\n[TOC]\n\n# flask-cookiecutter-restful 使用\n\n\n\n## 一. 本地开发准备\n\n\n\n### 1. 源码安装python-3.7.10\n\n```shell\nwget -c https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tar.xz\ntar -zxvf Python-3.7.10.tar.xz\ncd Python-3.7.10/Modules\nvim Setup.dist\n```\n\n搜索:\n\n```shell\n:/ssl\n```\n将以下内容取消注释:\n\n```shell \n# Socket module helper for socket(2)\n#_socket socketmodule.c\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n#_ssl _ssl.c \\\n# -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n# -L$(SSL)/lib -lssl -lcrypto\n```\n\n取消注释如下：\n\n```shell\n# Socket module helper for socket(2)\n_socket socketmodule.c\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n_ssl _ssl.c \\\n-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n-L$(SSL)/lib -lssl -lcrypto\n```\n\n返回Python源码根目录编译安装：\n\n```\ncd ../\n./configure --prefix=/usr/local/python3.7.10 --enable-loadable-sqlite-extensions\nmake\nmake install\n```\n\n将 /usr/local/python3.6/bin 加入 PATH， 在`/etc/profile`文件后追加：\n\n```\nvim /etc/profile\n```\n\n追回内容如下：\n\n```\nexport PATH=/usr/local/python3.7/bin:$PATH\n```\n\n设置python, pip别名：\n\n```\nvim ~/.bashrc\n```\n\n内容如下：\n\n```\nalias python3.7=/usr/local/python3.7.10/bin/python3\nalias pip3.7=/usr/local/python3.7.10/bin/pip3\n```\n\n\n\n### 2. 使用cookiecutter创建项目\n\n```shell\npip install cookiecutter\n\ncookiecutter https://github.com/karec/cookiecutter-flask-restful\n```\n\n\n\n### 3. pipenv 创建虚拟环境\n\n```shell\n# 安装\npip install pipenv\n\n# 更新\npip install --user --upgrade pipenv\n\n# 指定Python版本创建虚拟环境\npipenv --python 3.7\n\n# 进入虚拟环境\npipenv shell\n\n# 安装包\npipenv install\n# 或\npipenv install -r requirements.txt\n```\n\n### 4. 数据库\n```shell\n# 本地创建相关库\nCREATE DATABASE `aipms` /*!40100 DEFAULT CHARACTER SET utf8mb4 */\n\n# 项目配置数据库, 修改.env\nDATABASE_URI=mysql+pymysql://root:123456@localhost:3306/aipms?charset=utf8mb4\n\n# 进虚拟环境\npipenv shell\n\n# 生成迁移文件\nflask db migrate -m 'init migration'\n\n# 更新到数据库\nflask db upgrate\n```\n\n### 5. 接口测试\n\n- 注册\n```shell\ncurl --location --request POST 'http://127.0.0.1:5002/auth/register' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}'\n```\n\n- 登录\n```shell\ncurl --location --request POST 'http://127.0.0.1:5002/auth/login' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}'\n```\n\n\n### 6. git\n\n```shell\n# git初始化\ngit init\n\n# 添加源\ngit remote add origin git@*****\n\n# 拉取代码, 有冲突解决冲突\ngit pull\n\n# 切换新分支\ngit checkout -b feature-init\n\n# add 所有\ngit add .\n\n# commit\ngit commit -m 'init'\n\n# 分支推送到远程库\ngit push --set-upstream origin feature-init\n```\n\n\n\n## 二. 部署\n\n### 1. gunicorn\n\n```shell\npipenv install gunicorn\n```\n\n\n\n### 2. docker\n\n- 安docker\n\n```shell\nbrew install docker\n```\n\n- 安docker-compose\n\n```shell\npython3 -m pip install docker-compose\n```\n\n- 登录docker\n```shell\ndocker login\n```\n\n- 拉取基础Image\n```shell\ndocker pull python:3.7.10-alpine\n```\n\n- 创建容器并进入\n```shell\ndocker run -it --name=container_name python:3.7.10-alpine /bin/sh\n```\n\n- 配置dockerfile\n```shell\n\n```\n\n- 从dockerfile启动项目\n```shell\ndocker build -t container_name ./Dockerfile\n```\n\n","slug":"cookiecutter-flask-restful使用笔记","published":1,"updated":"2021-06-13T14:33:29.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc70008isuhfxw81d5x","content":"<p>[TOC]</p>\n<h1 id=\"flask-cookiecutter-restful-使用\"><a href=\"#flask-cookiecutter-restful-使用\" class=\"headerlink\" title=\"flask-cookiecutter-restful 使用\"></a>flask-cookiecutter-restful 使用</h1><h2 id=\"一-本地开发准备\"><a href=\"#一-本地开发准备\" class=\"headerlink\" title=\"一. 本地开发准备\"></a>一. 本地开发准备</h2><h3 id=\"1-源码安装python-3-7-10\"><a href=\"#1-源码安装python-3-7-10\" class=\"headerlink\" title=\"1. 源码安装python-3.7.10\"></a>1. 源码安装python-3.7.10</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tar.xz</span><br><span class=\"line\">tar -zxvf Python-3.7.10.tar.xz</span><br><span class=\"line\">cd Python-3.7.10/Modules</span><br><span class=\"line\">vim Setup.dist</span><br></pre></td></tr></table></figure>\n\n<p>搜索:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/ssl</span><br></pre></td></tr></table></figure>\n<p>将以下内容取消注释:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> socket(2)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">_socket socketmodule.c</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> SSL support; you must comment out the other</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">socket line above, and possibly edit the SSL variable:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SSL=/usr/local/ssl</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">_ssl _ssl.c \\</span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\</span></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># -L$(SSL)/lib -lssl -lcrypto</span></span></span><br></pre></td></tr></table></figure>\n\n<p>取消注释如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> socket(2)</span></span><br><span class=\"line\">_socket socketmodule.c</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> SSL support; you must comment out the other</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">socket line above, and possibly edit the SSL variable:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SSL=/usr/local/ssl</span></span><br><span class=\"line\">_ssl _ssl.c \\</span><br><span class=\"line\">-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\</span><br><span class=\"line\"><span class=\"meta prompt_\">-L$</span><span class=\"language-bash\">(SSL)/lib -lssl -lcrypto</span></span><br></pre></td></tr></table></figure>\n\n<p>返回Python源码根目录编译安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../</span><br><span class=\"line\">./configure --prefix=/usr/local/python3.7.10 --enable-loadable-sqlite-extensions</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>将 &#x2F;usr&#x2F;local&#x2F;python3.6&#x2F;bin 加入 PATH， 在<code>/etc/profile</code>文件后追加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>追回内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/python3.7/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>设置python, pip别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias python3.7=/usr/local/python3.7.10/bin/python3</span><br><span class=\"line\">alias pip3.7=/usr/local/python3.7.10/bin/pip3</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-使用cookiecutter创建项目\"><a href=\"#2-使用cookiecutter创建项目\" class=\"headerlink\" title=\"2. 使用cookiecutter创建项目\"></a>2. 使用cookiecutter创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install cookiecutter</span><br><span class=\"line\"></span><br><span class=\"line\">cookiecutter https://github.com/karec/cookiecutter-flask-restful</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-pipenv-创建虚拟环境\"><a href=\"#3-pipenv-创建虚拟环境\" class=\"headerlink\" title=\"3. pipenv 创建虚拟环境\"></a>3. pipenv 创建虚拟环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pip install pipenv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新</span></span><br><span class=\"line\">pip install --user --upgrade pipenv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定Python版本创建虚拟环境</span></span><br><span class=\"line\">pipenv --python 3.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入虚拟环境</span></span><br><span class=\"line\">pipenv shell</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装包</span></span><br><span class=\"line\">pipenv install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-数据库\"><a href=\"#4-数据库\" class=\"headerlink\" title=\"4. 数据库\"></a>4. 数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地创建相关库</span></span><br><span class=\"line\">CREATE DATABASE `aipms` /*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">项目配置数据库, 修改.<span class=\"built_in\">env</span></span></span><br><span class=\"line\">DATABASE_URI=mysql+pymysql://root:123456@localhost:3306/aipms?charset=utf8mb4</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进虚拟环境</span></span><br><span class=\"line\">pipenv shell</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成迁移文件</span></span><br><span class=\"line\">flask db migrate -m &#x27;init migration&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新到数据库</span></span><br><span class=\"line\">flask db upgrate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-接口测试\"><a href=\"#5-接口测试\" class=\"headerlink\" title=\"5. 接口测试\"></a>5. 接口测试</h3><ul>\n<li><p>注册</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/register&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;admin&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/login&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;admin&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"6-git\"><a href=\"#6-git\" class=\"headerlink\" title=\"6. git\"></a>6. git</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git初始化</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加源</span></span><br><span class=\"line\">git remote add origin git@*****</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取代码, 有冲突解决冲突</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换新分支</span></span><br><span class=\"line\">git checkout -b feature-init</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">add 所有</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">commit</span></span><br><span class=\"line\">git commit -m &#x27;init&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">分支推送到远程库</span></span><br><span class=\"line\">git push --set-upstream origin feature-init</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二-部署\"><a href=\"#二-部署\" class=\"headerlink\" title=\"二. 部署\"></a>二. 部署</h2><h3 id=\"1-gunicorn\"><a href=\"#1-gunicorn\" class=\"headerlink\" title=\"1. gunicorn\"></a>1. gunicorn</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install gunicorn</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-docker\"><a href=\"#2-docker\" class=\"headerlink\" title=\"2. docker\"></a>2. docker</h3><ul>\n<li>安docker</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安docker-compose</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install docker-compose</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>登录docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取基础Image</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull python:3.7.10-alpine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器并进入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=container_name python:3.7.10-alpine /bin/sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dockerfile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从dockerfile启动项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t container_name ./Dockerfile</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"flask-cookiecutter-restful-使用\"><a href=\"#flask-cookiecutter-restful-使用\" class=\"headerlink\" title=\"flask-cookiecutter-restful 使用\"></a>flask-cookiecutter-restful 使用</h1><h2 id=\"一-本地开发准备\"><a href=\"#一-本地开发准备\" class=\"headerlink\" title=\"一. 本地开发准备\"></a>一. 本地开发准备</h2><h3 id=\"1-源码安装python-3-7-10\"><a href=\"#1-源码安装python-3-7-10\" class=\"headerlink\" title=\"1. 源码安装python-3.7.10\"></a>1. 源码安装python-3.7.10</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tar.xz</span><br><span class=\"line\">tar -zxvf Python-3.7.10.tar.xz</span><br><span class=\"line\">cd Python-3.7.10/Modules</span><br><span class=\"line\">vim Setup.dist</span><br></pre></td></tr></table></figure>\n\n<p>搜索:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:/ssl</span><br></pre></td></tr></table></figure>\n<p>将以下内容取消注释:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> socket(2)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">_socket socketmodule.c</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> SSL support; you must comment out the other</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">socket line above, and possibly edit the SSL variable:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SSL=/usr/local/ssl</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">_ssl _ssl.c \\</span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\</span></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># -L$(SSL)/lib -lssl -lcrypto</span></span></span><br></pre></td></tr></table></figure>\n\n<p>取消注释如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> socket(2)</span></span><br><span class=\"line\">_socket socketmodule.c</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Socket module helper <span class=\"keyword\">for</span> SSL support; you must comment out the other</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">socket line above, and possibly edit the SSL variable:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SSL=/usr/local/ssl</span></span><br><span class=\"line\">_ssl _ssl.c \\</span><br><span class=\"line\">-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\</span><br><span class=\"line\"><span class=\"meta prompt_\">-L$</span><span class=\"language-bash\">(SSL)/lib -lssl -lcrypto</span></span><br></pre></td></tr></table></figure>\n\n<p>返回Python源码根目录编译安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../</span><br><span class=\"line\">./configure --prefix=/usr/local/python3.7.10 --enable-loadable-sqlite-extensions</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>将 &#x2F;usr&#x2F;local&#x2F;python3.6&#x2F;bin 加入 PATH， 在<code>/etc/profile</code>文件后追加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>追回内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/python3.7/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>设置python, pip别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias python3.7=/usr/local/python3.7.10/bin/python3</span><br><span class=\"line\">alias pip3.7=/usr/local/python3.7.10/bin/pip3</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-使用cookiecutter创建项目\"><a href=\"#2-使用cookiecutter创建项目\" class=\"headerlink\" title=\"2. 使用cookiecutter创建项目\"></a>2. 使用cookiecutter创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install cookiecutter</span><br><span class=\"line\"></span><br><span class=\"line\">cookiecutter https://github.com/karec/cookiecutter-flask-restful</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-pipenv-创建虚拟环境\"><a href=\"#3-pipenv-创建虚拟环境\" class=\"headerlink\" title=\"3. pipenv 创建虚拟环境\"></a>3. pipenv 创建虚拟环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pip install pipenv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新</span></span><br><span class=\"line\">pip install --user --upgrade pipenv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定Python版本创建虚拟环境</span></span><br><span class=\"line\">pipenv --python 3.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入虚拟环境</span></span><br><span class=\"line\">pipenv shell</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装包</span></span><br><span class=\"line\">pipenv install</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-数据库\"><a href=\"#4-数据库\" class=\"headerlink\" title=\"4. 数据库\"></a>4. 数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地创建相关库</span></span><br><span class=\"line\">CREATE DATABASE `aipms` /*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">项目配置数据库, 修改.<span class=\"built_in\">env</span></span></span><br><span class=\"line\">DATABASE_URI=mysql+pymysql://root:123456@localhost:3306/aipms?charset=utf8mb4</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进虚拟环境</span></span><br><span class=\"line\">pipenv shell</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成迁移文件</span></span><br><span class=\"line\">flask db migrate -m &#x27;init migration&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新到数据库</span></span><br><span class=\"line\">flask db upgrate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-接口测试\"><a href=\"#5-接口测试\" class=\"headerlink\" title=\"5. 接口测试\"></a>5. 接口测试</h3><ul>\n<li><p>注册</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/register&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;admin&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/login&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;admin&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"6-git\"><a href=\"#6-git\" class=\"headerlink\" title=\"6. git\"></a>6. git</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git初始化</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加源</span></span><br><span class=\"line\">git remote add origin git@*****</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取代码, 有冲突解决冲突</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换新分支</span></span><br><span class=\"line\">git checkout -b feature-init</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">add 所有</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">commit</span></span><br><span class=\"line\">git commit -m &#x27;init&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">分支推送到远程库</span></span><br><span class=\"line\">git push --set-upstream origin feature-init</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二-部署\"><a href=\"#二-部署\" class=\"headerlink\" title=\"二. 部署\"></a>二. 部署</h2><h3 id=\"1-gunicorn\"><a href=\"#1-gunicorn\" class=\"headerlink\" title=\"1. gunicorn\"></a>1. gunicorn</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install gunicorn</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-docker\"><a href=\"#2-docker\" class=\"headerlink\" title=\"2. docker\"></a>2. docker</h3><ul>\n<li>安docker</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安docker-compose</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install docker-compose</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>登录docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取基础Image</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull python:3.7.10-alpine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器并进入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=container_name python:3.7.10-alpine /bin/sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dockerfile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从dockerfile启动项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t container_name ./Dockerfile</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"git代码ssh方式部署linux服务器","date":"2021-09-29T02:30:47.000Z","_content":"\n## 1. 创建用户\n\n```shell\n# 创建用户, -m 创建用户家目录\nuseradd -m 用户名\n\n# 修改密码(在root用户下操作)\npasswd 用户名\n```\n\n## 2. 在git项目服务器添加ssh公钥\n\n## 3. 在部署服务器用户家目录添加ssh密钥\n\n```shell\nmkdir ~/.ssh/\nvi id_rsa  # 添加公钥\nvi id_rsa.pub  # 添加私钥\n\n# 如果提示权限644不对(Permissions 0644 for '~/.ssh/id_rsa' are too open) 执行以下命令修改权限\nchmod 755 ~/.ssh/\nchmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub\nchmod 644 ~/.ssh/known_hosts\n```\n\n","source":"_posts/git代码ssh方式部署服务器.md","raw":"---\ntitle: git代码ssh方式部署linux服务器\ndate: 2021-09-29 10:30:47\ntags:\n---\n\n## 1. 创建用户\n\n```shell\n# 创建用户, -m 创建用户家目录\nuseradd -m 用户名\n\n# 修改密码(在root用户下操作)\npasswd 用户名\n```\n\n## 2. 在git项目服务器添加ssh公钥\n\n## 3. 在部署服务器用户家目录添加ssh密钥\n\n```shell\nmkdir ~/.ssh/\nvi id_rsa  # 添加公钥\nvi id_rsa.pub  # 添加私钥\n\n# 如果提示权限644不对(Permissions 0644 for '~/.ssh/id_rsa' are too open) 执行以下命令修改权限\nchmod 755 ~/.ssh/\nchmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub\nchmod 644 ~/.ssh/known_hosts\n```\n\n","slug":"git代码ssh方式部署服务器","published":1,"updated":"2022-02-20T09:12:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc8000aisuh3z4s0fpp","content":"<h2 id=\"1-创建用户\"><a href=\"#1-创建用户\" class=\"headerlink\" title=\"1. 创建用户\"></a>1. 创建用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建用户, -m 创建用户家目录</span></span><br><span class=\"line\">useradd -m 用户名</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改密码(在root用户下操作)</span></span><br><span class=\"line\">passwd 用户名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-在git项目服务器添加ssh公钥\"><a href=\"#2-在git项目服务器添加ssh公钥\" class=\"headerlink\" title=\"2. 在git项目服务器添加ssh公钥\"></a>2. 在git项目服务器添加ssh公钥</h2><h2 id=\"3-在部署服务器用户家目录添加ssh密钥\"><a href=\"#3-在部署服务器用户家目录添加ssh密钥\" class=\"headerlink\" title=\"3. 在部署服务器用户家目录添加ssh密钥\"></a>3. 在部署服务器用户家目录添加ssh密钥</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.ssh/</span><br><span class=\"line\">vi id_rsa  # 添加公钥</span><br><span class=\"line\">vi id_rsa.pub  # 添加私钥</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果提示权限644不对(Permissions 0644 <span class=\"keyword\">for</span> <span class=\"string\">&#x27;~/.ssh/id_rsa&#x27;</span> are too open) 执行以下命令修改权限</span></span><br><span class=\"line\">chmod 755 ~/.ssh/</span><br><span class=\"line\">chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub</span><br><span class=\"line\">chmod 644 ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建用户\"><a href=\"#1-创建用户\" class=\"headerlink\" title=\"1. 创建用户\"></a>1. 创建用户</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建用户, -m 创建用户家目录</span></span><br><span class=\"line\">useradd -m 用户名</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改密码(在root用户下操作)</span></span><br><span class=\"line\">passwd 用户名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-在git项目服务器添加ssh公钥\"><a href=\"#2-在git项目服务器添加ssh公钥\" class=\"headerlink\" title=\"2. 在git项目服务器添加ssh公钥\"></a>2. 在git项目服务器添加ssh公钥</h2><h2 id=\"3-在部署服务器用户家目录添加ssh密钥\"><a href=\"#3-在部署服务器用户家目录添加ssh密钥\" class=\"headerlink\" title=\"3. 在部署服务器用户家目录添加ssh密钥\"></a>3. 在部署服务器用户家目录添加ssh密钥</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.ssh/</span><br><span class=\"line\">vi id_rsa  # 添加公钥</span><br><span class=\"line\">vi id_rsa.pub  # 添加私钥</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果提示权限644不对(Permissions 0644 <span class=\"keyword\">for</span> <span class=\"string\">&#x27;~/.ssh/id_rsa&#x27;</span> are too open) 执行以下命令修改权限</span></span><br><span class=\"line\">chmod 755 ~/.ssh/</span><br><span class=\"line\">chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub</span><br><span class=\"line\">chmod 644 ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>\n\n"},{"title":"git代码迁移","date":"2021-12-07T10:04:38.000Z","_content":"\n```shell\n# 拉所有分支\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n\n# 删除旧源\ngit remote rm origin\n\n# 改为新源\ngit remote add origin git@xxxx.com\n\n# 推代码 全部分支 / 标签\ngit push --all\ngit push --tags\n```\n\n","source":"_posts/git代码迁移.md","raw":"---\ntitle: git代码迁移\ndate: 2021-12-07 18:04:38\ntags:\n---\n\n```shell\n# 拉所有分支\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n\n# 删除旧源\ngit remote rm origin\n\n# 改为新源\ngit remote add origin git@xxxx.com\n\n# 推代码 全部分支 / 标签\ngit push --all\ngit push --tags\n```\n\n","slug":"git代码迁移","published":1,"updated":"2022-02-20T09:12:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc8000bisuh92pne16x","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉所有分支</span></span><br><span class=\"line\">git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除旧源</span></span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改为新源</span></span><br><span class=\"line\">git remote add origin git@xxxx.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推代码 全部分支 / 标签</span></span><br><span class=\"line\">git push --all</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉所有分支</span></span><br><span class=\"line\">git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除旧源</span></span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改为新源</span></span><br><span class=\"line\">git remote add origin git@xxxx.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推代码 全部分支 / 标签</span></span><br><span class=\"line\">git push --all</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go从入门到放弃","date":"2023-06-30T03:59:24.000Z","_content":"\n# 一. 基础\n\n- 编译型语言\n  - 定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。\n  - 白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了\n  - 示例：C++、Go、Java\n- 解释型语言\n  - 定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。\n  - 白话定义：每次运行都会从第一行进行编译,编译一行执行一行\n  - 示例：Python、JavaScript、Ruby \n- 静态语言\n  - 如果在编译时知道变量的类型, 则为静态类型语言. 优点是编译器可以执行各种检查, 程序没跑起来就能找到一些小错误\n  - 示例：C++、Go、Java \n- 动态语言\n  - 定义：在运行期间过才去做数据类型检查的语言, 在用动态语言编程时, 不用给变量指定数据类型, 该语言会丰第一次赋值给变量时, 在内部将数据类型记录下来, 不必每次都指定类型\n  - 示例：Python, PHP,  JavaScript\n- 强类型\n  - 定义：为所有变量指定数据类型称之为\"强类型\", 不允许两种不同类型的变量相互操作\n  - 示例：Python, Go, Java, C#\n- 弱类型\n  - 定义：也称为弱类型定义语言, 一个变量可以赋不同数据类型的值, 允许将一块内存看做多种类型, 比如直接将整型变量与字符变量相加\n  - 示例：C, C++, JavaScript, PHP\n\n## 1. 基中基\n\n> 在 Python 中，要实现并发编程，通常需要使用特定的库或框架，如 threading、multiprocessing、asyncio 等。这些库提供了线程、进程、协程等抽象，用于实现并发任务的调度和执行。Python 的标准库提供了一些基本的并发工具，但在处理大规模并发时可能需要使用更高级的第三方库。\n>\n> 而在 Go 中，原生的 Goroutine 和调度器提供了并发编程的内置支持，不需要依赖额外的框架或库。Goroutine 是 Go 语言提供的一种轻量级的并发执行单元，通过使用关键字 `go` 来启动 Goroutine，无需额外的线程或进程管理。调度器会自动将 Goroutines 调度到可用的系统线程上执行，并进行高效的并发调度。\n>\n> 由于 Goroutines 是 Go 语言内部的机制，Go 运行时系统负责管理 Goroutines 的创建、调度和销毁，使得并发编程在 Go 中变得非常简单和高效。此外，Go 还提供了通道（Channel）作为 Goroutines 之间进行通信和同步的机制，进一步简化了并发编程的复杂性。\n>\n> 总结:  Go 在语言本身就提供了原生的并发支持，使用 Goroutine 和调度器实现轻量级的并发编程。相比之下，Python 需要借助额外的库或框架来处理并发任务，并且在处理大规模并发时可能需要使用更高级的工具。\n>\n> Goroutine 是 Go 语言中并发编程的核心概念之一，它是一种轻量级的执行单元。每个 Goroutine 都是一个独立的执行线程，可以与其他 Goroutines 并发地执行。\n>\n> Goroutine 可以看作是一种比传统线程更轻量级、更高效的并发编程抽象。与传统的线程相比，Goroutine 的创建和销毁开销很小，可以高效地创建大量的 Goroutines。这使得在 Go 语言中可以方便地使用大量的 Goroutines 来实现并发任务，而不会消耗过多的系统资源。\n>\n> 使用 Goroutines 的一个重要特点是它们之间的切换开销非常低。由于 Goroutines 是由 Go 调度器（Scheduler）管理的，调度器可以在 Goroutines 之间非常高效地进行切换，以实现并发执行。当一个 Goroutine 遇到阻塞操作（例如等待 I/O 完成或休眠）时，调度器会自动切换到其他可执行的 Goroutine，以充分利用系统资源。\n>\n> 另一个重要特点是 Goroutines 之间可以通过通道（Channel）进行通信和同步。通道是 Goroutines 之间安全地传递数据的机制，可以用于在不同的 Goroutines 之间进行数据交换和共享。\n>\n> 通过使用 Goroutines，开发者可以将任务并发地划分为多个独立的执行单元，每个执行单元由一个 Goroutine 来处理。这样可以简化并发编程的复杂性，并充分发挥多核处理器的性能优势。\n>\n> 总结: Goroutine 是 Go 语言中的一种轻量级并发执行单元，它提供了高效的并发编程抽象。通过使用 Goroutines，开发者可以方便地实现并发任务，并充分利用多核处理器的性能。同时，通过通道的机制，Goroutines 可以安全地进行通信和同步，实现高效的并发编程。\n\n\n\n### 1.1. 编译器下载安装\n\n> 官网：https://golang.org/dl/\n\n- mac\n  - 下载*.pkg直接安装 默认安装目录 `/usr/local/go`\n  - 添加**/usr/local/go/bin**目录到环境变量 `export PATH=$PATH:/usr/local/go/bin`\n\n### 1.2. Hello World\n\n```go\npackage main import \"fmt\" func main() {   \n  fmt.Printf(\"Hello, Go\\n\") \n} /* main 是入口, 名固定不能改 */\n\n$ go build hello.go \n$./hello \n\n>> Hello, Go\n```\n\n- package main 包声名, 必须在源文件非注释第一行声名这个文件属于哪个包, 每个Go程序都必须有一个名为 main 的包\n- import \"fmt\" 导入包, 表示这个程序需要\"fmt\"包, 注: \"fmt\" go的格式化输入输出包\n- func main() {} go的第一个程序都必须有一个main函数, 这是程序入口, go程序执行顺序: init -> main -> 其他, 没有init就main最先执行\n\n**注: 当标识符以大写字母开头****（包括常量、变量、类型、函数名、结构字段等等）表示可被外部包使用, 以小写字母开头表示不可被外部包使用(但对包内部是可用的)\n\n### 1.3. 基础\n\n- 注释\n  - `//` 单行注释\n  - ` /*` 多行注释 `*/`\n\n- 标识符: 由字母, 数字, 下划线构成, 不能数字开头, 不能是go的关键字\n- 关键字:\n\n> 官方文档：https://go.dev/ref/spec#Keywords\n\n| 关键字                                                       | 涉及功能 |\n| ------------------------------------------------------------ | -------- |\n| select, case, if, else, switch, default                      | 逻辑判断 |\n|                                                              | 异常捕获 |\n| for, continue, break, return                                 | 循环     |\n| import, package,                                             | 导包     |\n| func, interface                                              | 定义     |\n|                                                              | 异步     |\n|                                                              | 变量空间 |\n| , select, defer, go, map, struct, chan, goto, range, type, const, fallthrough, var | 其他     |\n\n- 预定义标识符:\n\n| 标识符                              | 含义                                                   |\n| ----------------------------------- | ------------------------------------------------------ |\n| bool, true, false                   | 布尔类型， 真，假                                      |\n| byte                                | alias for uint8                                        |\n| rune                                | alias for int32                                        |\n| int, int8, int16, int32, int64      | 整数类型关键字, 有符号整数类型的不同位数               |\n| uint, uint8, uint16, uint32, uint64 | 无符号整数类型的关键字, 无符号整数类型的不同位数       |\n| uintptr                             | 用于存储指针值的整数类型                               |\n| float32, float64                    | 浮点数类型的不同精度                                   |\n| complex32, complex64                | 复数类型的不同精度                                     |\n| string                              | 字符串类型的关键字                                     |\n| error                               | 表示错误类型的接口                                     |\n| make                                | 用于创建切片、映射和通道的内建函数                     |\n| new                                 | 用于分配内存的内建函数                                 |\n| append                              | 用于向切片追加元素的内建函数                           |\n| len                                 | 用于返回切片、数组、字典、字符串或通道的长度的内建函数 |\n| cap                                 | 对于切片或容量为数组、切片或通道的内建函数，返回其容量 |\n\n### 1.4. 数据类型\n\n- 布尔: true / false\n- 数字: uint8 / uint16 / uint32 / uint64 (无符号 0-255-65535-...) / int8 / int16 / float32 / float64 ( -128-127 -32768 - 32768 .. ..)\n- 字符串: utf-8\n- 派生类型: \n","source":"_posts/go从入门到放弃.md","raw":"---\ntitle: go从入门到放弃\ndate: 2023-06-30 11:59:24\ntags:\n---\n\n# 一. 基础\n\n- 编译型语言\n  - 定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。\n  - 白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了\n  - 示例：C++、Go、Java\n- 解释型语言\n  - 定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。\n  - 白话定义：每次运行都会从第一行进行编译,编译一行执行一行\n  - 示例：Python、JavaScript、Ruby \n- 静态语言\n  - 如果在编译时知道变量的类型, 则为静态类型语言. 优点是编译器可以执行各种检查, 程序没跑起来就能找到一些小错误\n  - 示例：C++、Go、Java \n- 动态语言\n  - 定义：在运行期间过才去做数据类型检查的语言, 在用动态语言编程时, 不用给变量指定数据类型, 该语言会丰第一次赋值给变量时, 在内部将数据类型记录下来, 不必每次都指定类型\n  - 示例：Python, PHP,  JavaScript\n- 强类型\n  - 定义：为所有变量指定数据类型称之为\"强类型\", 不允许两种不同类型的变量相互操作\n  - 示例：Python, Go, Java, C#\n- 弱类型\n  - 定义：也称为弱类型定义语言, 一个变量可以赋不同数据类型的值, 允许将一块内存看做多种类型, 比如直接将整型变量与字符变量相加\n  - 示例：C, C++, JavaScript, PHP\n\n## 1. 基中基\n\n> 在 Python 中，要实现并发编程，通常需要使用特定的库或框架，如 threading、multiprocessing、asyncio 等。这些库提供了线程、进程、协程等抽象，用于实现并发任务的调度和执行。Python 的标准库提供了一些基本的并发工具，但在处理大规模并发时可能需要使用更高级的第三方库。\n>\n> 而在 Go 中，原生的 Goroutine 和调度器提供了并发编程的内置支持，不需要依赖额外的框架或库。Goroutine 是 Go 语言提供的一种轻量级的并发执行单元，通过使用关键字 `go` 来启动 Goroutine，无需额外的线程或进程管理。调度器会自动将 Goroutines 调度到可用的系统线程上执行，并进行高效的并发调度。\n>\n> 由于 Goroutines 是 Go 语言内部的机制，Go 运行时系统负责管理 Goroutines 的创建、调度和销毁，使得并发编程在 Go 中变得非常简单和高效。此外，Go 还提供了通道（Channel）作为 Goroutines 之间进行通信和同步的机制，进一步简化了并发编程的复杂性。\n>\n> 总结:  Go 在语言本身就提供了原生的并发支持，使用 Goroutine 和调度器实现轻量级的并发编程。相比之下，Python 需要借助额外的库或框架来处理并发任务，并且在处理大规模并发时可能需要使用更高级的工具。\n>\n> Goroutine 是 Go 语言中并发编程的核心概念之一，它是一种轻量级的执行单元。每个 Goroutine 都是一个独立的执行线程，可以与其他 Goroutines 并发地执行。\n>\n> Goroutine 可以看作是一种比传统线程更轻量级、更高效的并发编程抽象。与传统的线程相比，Goroutine 的创建和销毁开销很小，可以高效地创建大量的 Goroutines。这使得在 Go 语言中可以方便地使用大量的 Goroutines 来实现并发任务，而不会消耗过多的系统资源。\n>\n> 使用 Goroutines 的一个重要特点是它们之间的切换开销非常低。由于 Goroutines 是由 Go 调度器（Scheduler）管理的，调度器可以在 Goroutines 之间非常高效地进行切换，以实现并发执行。当一个 Goroutine 遇到阻塞操作（例如等待 I/O 完成或休眠）时，调度器会自动切换到其他可执行的 Goroutine，以充分利用系统资源。\n>\n> 另一个重要特点是 Goroutines 之间可以通过通道（Channel）进行通信和同步。通道是 Goroutines 之间安全地传递数据的机制，可以用于在不同的 Goroutines 之间进行数据交换和共享。\n>\n> 通过使用 Goroutines，开发者可以将任务并发地划分为多个独立的执行单元，每个执行单元由一个 Goroutine 来处理。这样可以简化并发编程的复杂性，并充分发挥多核处理器的性能优势。\n>\n> 总结: Goroutine 是 Go 语言中的一种轻量级并发执行单元，它提供了高效的并发编程抽象。通过使用 Goroutines，开发者可以方便地实现并发任务，并充分利用多核处理器的性能。同时，通过通道的机制，Goroutines 可以安全地进行通信和同步，实现高效的并发编程。\n\n\n\n### 1.1. 编译器下载安装\n\n> 官网：https://golang.org/dl/\n\n- mac\n  - 下载*.pkg直接安装 默认安装目录 `/usr/local/go`\n  - 添加**/usr/local/go/bin**目录到环境变量 `export PATH=$PATH:/usr/local/go/bin`\n\n### 1.2. Hello World\n\n```go\npackage main import \"fmt\" func main() {   \n  fmt.Printf(\"Hello, Go\\n\") \n} /* main 是入口, 名固定不能改 */\n\n$ go build hello.go \n$./hello \n\n>> Hello, Go\n```\n\n- package main 包声名, 必须在源文件非注释第一行声名这个文件属于哪个包, 每个Go程序都必须有一个名为 main 的包\n- import \"fmt\" 导入包, 表示这个程序需要\"fmt\"包, 注: \"fmt\" go的格式化输入输出包\n- func main() {} go的第一个程序都必须有一个main函数, 这是程序入口, go程序执行顺序: init -> main -> 其他, 没有init就main最先执行\n\n**注: 当标识符以大写字母开头****（包括常量、变量、类型、函数名、结构字段等等）表示可被外部包使用, 以小写字母开头表示不可被外部包使用(但对包内部是可用的)\n\n### 1.3. 基础\n\n- 注释\n  - `//` 单行注释\n  - ` /*` 多行注释 `*/`\n\n- 标识符: 由字母, 数字, 下划线构成, 不能数字开头, 不能是go的关键字\n- 关键字:\n\n> 官方文档：https://go.dev/ref/spec#Keywords\n\n| 关键字                                                       | 涉及功能 |\n| ------------------------------------------------------------ | -------- |\n| select, case, if, else, switch, default                      | 逻辑判断 |\n|                                                              | 异常捕获 |\n| for, continue, break, return                                 | 循环     |\n| import, package,                                             | 导包     |\n| func, interface                                              | 定义     |\n|                                                              | 异步     |\n|                                                              | 变量空间 |\n| , select, defer, go, map, struct, chan, goto, range, type, const, fallthrough, var | 其他     |\n\n- 预定义标识符:\n\n| 标识符                              | 含义                                                   |\n| ----------------------------------- | ------------------------------------------------------ |\n| bool, true, false                   | 布尔类型， 真，假                                      |\n| byte                                | alias for uint8                                        |\n| rune                                | alias for int32                                        |\n| int, int8, int16, int32, int64      | 整数类型关键字, 有符号整数类型的不同位数               |\n| uint, uint8, uint16, uint32, uint64 | 无符号整数类型的关键字, 无符号整数类型的不同位数       |\n| uintptr                             | 用于存储指针值的整数类型                               |\n| float32, float64                    | 浮点数类型的不同精度                                   |\n| complex32, complex64                | 复数类型的不同精度                                     |\n| string                              | 字符串类型的关键字                                     |\n| error                               | 表示错误类型的接口                                     |\n| make                                | 用于创建切片、映射和通道的内建函数                     |\n| new                                 | 用于分配内存的内建函数                                 |\n| append                              | 用于向切片追加元素的内建函数                           |\n| len                                 | 用于返回切片、数组、字典、字符串或通道的长度的内建函数 |\n| cap                                 | 对于切片或容量为数组、切片或通道的内建函数，返回其容量 |\n\n### 1.4. 数据类型\n\n- 布尔: true / false\n- 数字: uint8 / uint16 / uint32 / uint64 (无符号 0-255-65535-...) / int8 / int16 / float32 / float64 ( -128-127 -32768 - 32768 .. ..)\n- 字符串: utf-8\n- 派生类型: \n","slug":"go从入门到放弃","published":1,"updated":"2023-07-04T05:11:53.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc8000cisuhb8ah7oz1","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ul>\n<li>编译型语言<ul>\n<li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li>\n<li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>解释型语言<ul>\n<li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li>\n<li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li>\n<li>示例：Python、JavaScript、Ruby</li>\n</ul>\n</li>\n<li>静态语言<ul>\n<li>如果在编译时知道变量的类型, 则为静态类型语言. 优点是编译器可以执行各种检查, 程序没跑起来就能找到一些小错误</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>动态语言<ul>\n<li>定义：在运行期间过才去做数据类型检查的语言, 在用动态语言编程时, 不用给变量指定数据类型, 该语言会丰第一次赋值给变量时, 在内部将数据类型记录下来, 不必每次都指定类型</li>\n<li>示例：Python, PHP,  JavaScript</li>\n</ul>\n</li>\n<li>强类型<ul>\n<li>定义：为所有变量指定数据类型称之为”强类型”, 不允许两种不同类型的变量相互操作</li>\n<li>示例：Python, Go, Java, C#</li>\n</ul>\n</li>\n<li>弱类型<ul>\n<li>定义：也称为弱类型定义语言, 一个变量可以赋不同数据类型的值, 允许将一块内存看做多种类型, 比如直接将整型变量与字符变量相加</li>\n<li>示例：C, C++, JavaScript, PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-基中基\"><a href=\"#1-基中基\" class=\"headerlink\" title=\"1. 基中基\"></a>1. 基中基</h2><blockquote>\n<p>在 Python 中，要实现并发编程，通常需要使用特定的库或框架，如 threading、multiprocessing、asyncio 等。这些库提供了线程、进程、协程等抽象，用于实现并发任务的调度和执行。Python 的标准库提供了一些基本的并发工具，但在处理大规模并发时可能需要使用更高级的第三方库。</p>\n<p>而在 Go 中，原生的 Goroutine 和调度器提供了并发编程的内置支持，不需要依赖额外的框架或库。Goroutine 是 Go 语言提供的一种轻量级的并发执行单元，通过使用关键字 <code>go</code> 来启动 Goroutine，无需额外的线程或进程管理。调度器会自动将 Goroutines 调度到可用的系统线程上执行，并进行高效的并发调度。</p>\n<p>由于 Goroutines 是 Go 语言内部的机制，Go 运行时系统负责管理 Goroutines 的创建、调度和销毁，使得并发编程在 Go 中变得非常简单和高效。此外，Go 还提供了通道（Channel）作为 Goroutines 之间进行通信和同步的机制，进一步简化了并发编程的复杂性。</p>\n<p>总结:  Go 在语言本身就提供了原生的并发支持，使用 Goroutine 和调度器实现轻量级的并发编程。相比之下，Python 需要借助额外的库或框架来处理并发任务，并且在处理大规模并发时可能需要使用更高级的工具。</p>\n<p>Goroutine 是 Go 语言中并发编程的核心概念之一，它是一种轻量级的执行单元。每个 Goroutine 都是一个独立的执行线程，可以与其他 Goroutines 并发地执行。</p>\n<p>Goroutine 可以看作是一种比传统线程更轻量级、更高效的并发编程抽象。与传统的线程相比，Goroutine 的创建和销毁开销很小，可以高效地创建大量的 Goroutines。这使得在 Go 语言中可以方便地使用大量的 Goroutines 来实现并发任务，而不会消耗过多的系统资源。</p>\n<p>使用 Goroutines 的一个重要特点是它们之间的切换开销非常低。由于 Goroutines 是由 Go 调度器（Scheduler）管理的，调度器可以在 Goroutines 之间非常高效地进行切换，以实现并发执行。当一个 Goroutine 遇到阻塞操作（例如等待 I&#x2F;O 完成或休眠）时，调度器会自动切换到其他可执行的 Goroutine，以充分利用系统资源。</p>\n<p>另一个重要特点是 Goroutines 之间可以通过通道（Channel）进行通信和同步。通道是 Goroutines 之间安全地传递数据的机制，可以用于在不同的 Goroutines 之间进行数据交换和共享。</p>\n<p>通过使用 Goroutines，开发者可以将任务并发地划分为多个独立的执行单元，每个执行单元由一个 Goroutine 来处理。这样可以简化并发编程的复杂性，并充分发挥多核处理器的性能优势。</p>\n<p>总结: Goroutine 是 Go 语言中的一种轻量级并发执行单元，它提供了高效的并发编程抽象。通过使用 Goroutines，开发者可以方便地实现并发任务，并充分利用多核处理器的性能。同时，通过通道的机制，Goroutines 可以安全地进行通信和同步，实现高效的并发编程。</p>\n</blockquote>\n<h3 id=\"1-1-编译器下载安装\"><a href=\"#1-1-编译器下载安装\" class=\"headerlink\" title=\"1.1. 编译器下载安装\"></a>1.1. 编译器下载安装</h3><blockquote>\n<p>官网：<a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n</blockquote>\n<ul>\n<li>mac<ul>\n<li>下载*.pkg直接安装 默认安装目录 <code>/usr/local/go</code></li>\n<li>添加**&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin**目录到环境变量 <code>export PATH=$PATH:/usr/local/go/bin</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-Hello-World\"><a href=\"#1-2-Hello-World\" class=\"headerlink\" title=\"1.2. Hello World\"></a>1.2. Hello World</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;   </span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Hello, Go\\n&quot;</span>) </span><br><span class=\"line\">&#125; <span class=\"comment\">/* main 是入口, 名固定不能改 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> build hello.<span class=\"keyword\">go</span> </span><br><span class=\"line\">$./hello </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt; Hello, Go</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package main 包声名, 必须在源文件非注释第一行声名这个文件属于哪个包, 每个Go程序都必须有一个名为 main 的包</li>\n<li>import “fmt” 导入包, 表示这个程序需要”fmt”包, 注: “fmt” go的格式化输入输出包</li>\n<li>func main() {} go的第一个程序都必须有一个main函数, 这是程序入口, go程序执行顺序: init -&gt; main -&gt; 其他, 没有init就main最先执行</li>\n</ul>\n<p>*<em>注: 当标识符以大写字母开头</em>***（包括常量、变量、类型、函数名、结构字段等等）表示可被外部包使用, 以小写字母开头表示不可被外部包使用(但对包内部是可用的)</p>\n<h3 id=\"1-3-基础\"><a href=\"#1-3-基础\" class=\"headerlink\" title=\"1.3. 基础\"></a>1.3. 基础</h3><ul>\n<li><p>注释</p>\n<ul>\n<li><code>//</code> 单行注释</li>\n<li><code> /*</code> 多行注释 <code>*/</code></li>\n</ul>\n</li>\n<li><p>标识符: 由字母, 数字, 下划线构成, 不能数字开头, 不能是go的关键字</p>\n</li>\n<li><p>关键字:</p>\n</li>\n</ul>\n<blockquote>\n<p>官方文档：<a href=\"https://go.dev/ref/spec#Keywords\">https://go.dev/ref/spec#Keywords</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>涉及功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select, case, if, else, switch, default</td>\n<td>逻辑判断</td>\n</tr>\n<tr>\n<td></td>\n<td>异常捕获</td>\n</tr>\n<tr>\n<td>for, continue, break, return</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>import, package,</td>\n<td>导包</td>\n</tr>\n<tr>\n<td>func, interface</td>\n<td>定义</td>\n</tr>\n<tr>\n<td></td>\n<td>异步</td>\n</tr>\n<tr>\n<td></td>\n<td>变量空间</td>\n</tr>\n<tr>\n<td>, select, defer, go, map, struct, chan, goto, range, type, const, fallthrough, var</td>\n<td>其他</td>\n</tr>\n</tbody></table>\n<ul>\n<li>预定义标识符:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标识符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool, true, false</td>\n<td>布尔类型， 真，假</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>alias for uint8</td>\n</tr>\n<tr>\n<td>rune</td>\n<td>alias for int32</td>\n</tr>\n<tr>\n<td>int, int8, int16, int32, int64</td>\n<td>整数类型关键字, 有符号整数类型的不同位数</td>\n</tr>\n<tr>\n<td>uint, uint8, uint16, uint32, uint64</td>\n<td>无符号整数类型的关键字, 无符号整数类型的不同位数</td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>用于存储指针值的整数类型</td>\n</tr>\n<tr>\n<td>float32, float64</td>\n<td>浮点数类型的不同精度</td>\n</tr>\n<tr>\n<td>complex32, complex64</td>\n<td>复数类型的不同精度</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串类型的关键字</td>\n</tr>\n<tr>\n<td>error</td>\n<td>表示错误类型的接口</td>\n</tr>\n<tr>\n<td>make</td>\n<td>用于创建切片、映射和通道的内建函数</td>\n</tr>\n<tr>\n<td>new</td>\n<td>用于分配内存的内建函数</td>\n</tr>\n<tr>\n<td>append</td>\n<td>用于向切片追加元素的内建函数</td>\n</tr>\n<tr>\n<td>len</td>\n<td>用于返回切片、数组、字典、字符串或通道的长度的内建函数</td>\n</tr>\n<tr>\n<td>cap</td>\n<td>对于切片或容量为数组、切片或通道的内建函数，返回其容量</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-数据类型\"><a href=\"#1-4-数据类型\" class=\"headerlink\" title=\"1.4. 数据类型\"></a>1.4. 数据类型</h3><ul>\n<li>布尔: true &#x2F; false</li>\n<li>数字: uint8 &#x2F; uint16 &#x2F; uint32 &#x2F; uint64 (无符号 0-255-65535-…) &#x2F; int8 &#x2F; int16 &#x2F; float32 &#x2F; float64 ( -128-127 -32768 - 32768 .. ..)</li>\n<li>字符串: utf-8</li>\n<li>派生类型:</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ul>\n<li>编译型语言<ul>\n<li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li>\n<li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>解释型语言<ul>\n<li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li>\n<li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li>\n<li>示例：Python、JavaScript、Ruby</li>\n</ul>\n</li>\n<li>静态语言<ul>\n<li>如果在编译时知道变量的类型, 则为静态类型语言. 优点是编译器可以执行各种检查, 程序没跑起来就能找到一些小错误</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>动态语言<ul>\n<li>定义：在运行期间过才去做数据类型检查的语言, 在用动态语言编程时, 不用给变量指定数据类型, 该语言会丰第一次赋值给变量时, 在内部将数据类型记录下来, 不必每次都指定类型</li>\n<li>示例：Python, PHP,  JavaScript</li>\n</ul>\n</li>\n<li>强类型<ul>\n<li>定义：为所有变量指定数据类型称之为”强类型”, 不允许两种不同类型的变量相互操作</li>\n<li>示例：Python, Go, Java, C#</li>\n</ul>\n</li>\n<li>弱类型<ul>\n<li>定义：也称为弱类型定义语言, 一个变量可以赋不同数据类型的值, 允许将一块内存看做多种类型, 比如直接将整型变量与字符变量相加</li>\n<li>示例：C, C++, JavaScript, PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-基中基\"><a href=\"#1-基中基\" class=\"headerlink\" title=\"1. 基中基\"></a>1. 基中基</h2><blockquote>\n<p>在 Python 中，要实现并发编程，通常需要使用特定的库或框架，如 threading、multiprocessing、asyncio 等。这些库提供了线程、进程、协程等抽象，用于实现并发任务的调度和执行。Python 的标准库提供了一些基本的并发工具，但在处理大规模并发时可能需要使用更高级的第三方库。</p>\n<p>而在 Go 中，原生的 Goroutine 和调度器提供了并发编程的内置支持，不需要依赖额外的框架或库。Goroutine 是 Go 语言提供的一种轻量级的并发执行单元，通过使用关键字 <code>go</code> 来启动 Goroutine，无需额外的线程或进程管理。调度器会自动将 Goroutines 调度到可用的系统线程上执行，并进行高效的并发调度。</p>\n<p>由于 Goroutines 是 Go 语言内部的机制，Go 运行时系统负责管理 Goroutines 的创建、调度和销毁，使得并发编程在 Go 中变得非常简单和高效。此外，Go 还提供了通道（Channel）作为 Goroutines 之间进行通信和同步的机制，进一步简化了并发编程的复杂性。</p>\n<p>总结:  Go 在语言本身就提供了原生的并发支持，使用 Goroutine 和调度器实现轻量级的并发编程。相比之下，Python 需要借助额外的库或框架来处理并发任务，并且在处理大规模并发时可能需要使用更高级的工具。</p>\n<p>Goroutine 是 Go 语言中并发编程的核心概念之一，它是一种轻量级的执行单元。每个 Goroutine 都是一个独立的执行线程，可以与其他 Goroutines 并发地执行。</p>\n<p>Goroutine 可以看作是一种比传统线程更轻量级、更高效的并发编程抽象。与传统的线程相比，Goroutine 的创建和销毁开销很小，可以高效地创建大量的 Goroutines。这使得在 Go 语言中可以方便地使用大量的 Goroutines 来实现并发任务，而不会消耗过多的系统资源。</p>\n<p>使用 Goroutines 的一个重要特点是它们之间的切换开销非常低。由于 Goroutines 是由 Go 调度器（Scheduler）管理的，调度器可以在 Goroutines 之间非常高效地进行切换，以实现并发执行。当一个 Goroutine 遇到阻塞操作（例如等待 I&#x2F;O 完成或休眠）时，调度器会自动切换到其他可执行的 Goroutine，以充分利用系统资源。</p>\n<p>另一个重要特点是 Goroutines 之间可以通过通道（Channel）进行通信和同步。通道是 Goroutines 之间安全地传递数据的机制，可以用于在不同的 Goroutines 之间进行数据交换和共享。</p>\n<p>通过使用 Goroutines，开发者可以将任务并发地划分为多个独立的执行单元，每个执行单元由一个 Goroutine 来处理。这样可以简化并发编程的复杂性，并充分发挥多核处理器的性能优势。</p>\n<p>总结: Goroutine 是 Go 语言中的一种轻量级并发执行单元，它提供了高效的并发编程抽象。通过使用 Goroutines，开发者可以方便地实现并发任务，并充分利用多核处理器的性能。同时，通过通道的机制，Goroutines 可以安全地进行通信和同步，实现高效的并发编程。</p>\n</blockquote>\n<h3 id=\"1-1-编译器下载安装\"><a href=\"#1-1-编译器下载安装\" class=\"headerlink\" title=\"1.1. 编译器下载安装\"></a>1.1. 编译器下载安装</h3><blockquote>\n<p>官网：<a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n</blockquote>\n<ul>\n<li>mac<ul>\n<li>下载*.pkg直接安装 默认安装目录 <code>/usr/local/go</code></li>\n<li>添加**&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin**目录到环境变量 <code>export PATH=$PATH:/usr/local/go/bin</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-Hello-World\"><a href=\"#1-2-Hello-World\" class=\"headerlink\" title=\"1.2. Hello World\"></a>1.2. Hello World</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;   </span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Hello, Go\\n&quot;</span>) </span><br><span class=\"line\">&#125; <span class=\"comment\">/* main 是入口, 名固定不能改 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> build hello.<span class=\"keyword\">go</span> </span><br><span class=\"line\">$./hello </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt; Hello, Go</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package main 包声名, 必须在源文件非注释第一行声名这个文件属于哪个包, 每个Go程序都必须有一个名为 main 的包</li>\n<li>import “fmt” 导入包, 表示这个程序需要”fmt”包, 注: “fmt” go的格式化输入输出包</li>\n<li>func main() {} go的第一个程序都必须有一个main函数, 这是程序入口, go程序执行顺序: init -&gt; main -&gt; 其他, 没有init就main最先执行</li>\n</ul>\n<p>*<em>注: 当标识符以大写字母开头</em>***（包括常量、变量、类型、函数名、结构字段等等）表示可被外部包使用, 以小写字母开头表示不可被外部包使用(但对包内部是可用的)</p>\n<h3 id=\"1-3-基础\"><a href=\"#1-3-基础\" class=\"headerlink\" title=\"1.3. 基础\"></a>1.3. 基础</h3><ul>\n<li><p>注释</p>\n<ul>\n<li><code>//</code> 单行注释</li>\n<li><code> /*</code> 多行注释 <code>*/</code></li>\n</ul>\n</li>\n<li><p>标识符: 由字母, 数字, 下划线构成, 不能数字开头, 不能是go的关键字</p>\n</li>\n<li><p>关键字:</p>\n</li>\n</ul>\n<blockquote>\n<p>官方文档：<a href=\"https://go.dev/ref/spec#Keywords\">https://go.dev/ref/spec#Keywords</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>涉及功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select, case, if, else, switch, default</td>\n<td>逻辑判断</td>\n</tr>\n<tr>\n<td></td>\n<td>异常捕获</td>\n</tr>\n<tr>\n<td>for, continue, break, return</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>import, package,</td>\n<td>导包</td>\n</tr>\n<tr>\n<td>func, interface</td>\n<td>定义</td>\n</tr>\n<tr>\n<td></td>\n<td>异步</td>\n</tr>\n<tr>\n<td></td>\n<td>变量空间</td>\n</tr>\n<tr>\n<td>, select, defer, go, map, struct, chan, goto, range, type, const, fallthrough, var</td>\n<td>其他</td>\n</tr>\n</tbody></table>\n<ul>\n<li>预定义标识符:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标识符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool, true, false</td>\n<td>布尔类型， 真，假</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>alias for uint8</td>\n</tr>\n<tr>\n<td>rune</td>\n<td>alias for int32</td>\n</tr>\n<tr>\n<td>int, int8, int16, int32, int64</td>\n<td>整数类型关键字, 有符号整数类型的不同位数</td>\n</tr>\n<tr>\n<td>uint, uint8, uint16, uint32, uint64</td>\n<td>无符号整数类型的关键字, 无符号整数类型的不同位数</td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>用于存储指针值的整数类型</td>\n</tr>\n<tr>\n<td>float32, float64</td>\n<td>浮点数类型的不同精度</td>\n</tr>\n<tr>\n<td>complex32, complex64</td>\n<td>复数类型的不同精度</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串类型的关键字</td>\n</tr>\n<tr>\n<td>error</td>\n<td>表示错误类型的接口</td>\n</tr>\n<tr>\n<td>make</td>\n<td>用于创建切片、映射和通道的内建函数</td>\n</tr>\n<tr>\n<td>new</td>\n<td>用于分配内存的内建函数</td>\n</tr>\n<tr>\n<td>append</td>\n<td>用于向切片追加元素的内建函数</td>\n</tr>\n<tr>\n<td>len</td>\n<td>用于返回切片、数组、字典、字符串或通道的长度的内建函数</td>\n</tr>\n<tr>\n<td>cap</td>\n<td>对于切片或容量为数组、切片或通道的内建函数，返回其容量</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-数据类型\"><a href=\"#1-4-数据类型\" class=\"headerlink\" title=\"1.4. 数据类型\"></a>1.4. 数据类型</h3><ul>\n<li>布尔: true &#x2F; false</li>\n<li>数字: uint8 &#x2F; uint16 &#x2F; uint32 &#x2F; uint64 (无符号 0-255-65535-…) &#x2F; int8 &#x2F; int16 &#x2F; float32 &#x2F; float64 ( -128-127 -32768 - 32768 .. ..)</li>\n<li>字符串: utf-8</li>\n<li>派生类型:</li>\n</ul>\n"},{"title":"hexo部署报错","date":"2021-12-09T03:25:26.000Z","_content":"\n### 报错内容\n\n```shell\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/krmac/myProjects/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (node:events:390:28)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) {\n    code: 128\n  }\n}\n```\n\n### 解决\n\n直接删除 `.deploy_git`  重新 `hexo g` 生成即可\n\n","source":"_posts/hexo部署报错.md","raw":"---\ntitle: hexo部署报错\ndate: 2021-12-09 11:25:26\ntags:\n---\n\n### 报错内容\n\n```shell\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/krmac/myProjects/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (node:events:390:28)\n      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) {\n    code: 128\n  }\n}\n```\n\n### 解决\n\n直接删除 `.deploy_git`  重新 `hexo g` 生成即可\n\n","slug":"hexo部署报错","published":1,"updated":"2022-02-20T09:12:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc9000disuhhn7fcm7s","content":"<h3 id=\"报错内容\"><a href=\"#报错内容\" class=\"headerlink\" title=\"报错内容\"></a>报错内容</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: in unpopulated submodule &#x27;.deploy_git&#x27;</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/krmac/myProjects/blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:390:28)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>直接删除 <code>.deploy_git</code>  重新 <code>hexo g</code> 生成即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"报错内容\"><a href=\"#报错内容\" class=\"headerlink\" title=\"报错内容\"></a>报错内容</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: in unpopulated submodule &#x27;.deploy_git&#x27;</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/krmac/myProjects/blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:390:28)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>直接删除 <code>.deploy_git</code>  重新 <code>hexo g</code> 生成即可</p>\n"},{"title":"machine","date":"2023-08-25T01:54:30.000Z","_content":"\n\n\n\n\n# 毛坯内孔Φ43改Φ49\n\n```shell\nM08\nM03 S500 T101\nG99\nG0 Z3 X50.5\nG1 Z1 F0.2\nX46 W-2\nZ-85\nG0 U-1\nG0 Z3\nX49\nG1 Z-85\nG0 U-1\nG0 Z200\nT303\nS300 M03\nG0 X45 Z1\nZ-63\nG75 R0\nG75 X54 Z-84 P1000 Q3500 F0.03\nG0 Z260\nM05\nM09\nM30\n```\n\n# 毛坯内孔Φ33改Φ35\n\n```shell\nM08\nM03 S500 T101\nG99\nG0 Z3 X50.5\nG1 Z1 F0.2\nX35 W-2\nZ-80\nG0 U-1\nG0 Z200\nT303\nS300 M03\nG0 X45 Z1\nZ-83\nG75 R0\nG75 X40 Z-79 P1000 Q3500 F0.03\nG0 Z260\nM05\nM09\nM30\n```\n\n\n\n","source":"_posts/machine.md","raw":"---\ntitle: machine\ndate: 2023-08-25 09:54:30\ntags: uc machine\n---\n\n\n\n\n\n# 毛坯内孔Φ43改Φ49\n\n```shell\nM08\nM03 S500 T101\nG99\nG0 Z3 X50.5\nG1 Z1 F0.2\nX46 W-2\nZ-85\nG0 U-1\nG0 Z3\nX49\nG1 Z-85\nG0 U-1\nG0 Z200\nT303\nS300 M03\nG0 X45 Z1\nZ-63\nG75 R0\nG75 X54 Z-84 P1000 Q3500 F0.03\nG0 Z260\nM05\nM09\nM30\n```\n\n# 毛坯内孔Φ33改Φ35\n\n```shell\nM08\nM03 S500 T101\nG99\nG0 Z3 X50.5\nG1 Z1 F0.2\nX35 W-2\nZ-80\nG0 U-1\nG0 Z200\nT303\nS300 M03\nG0 X45 Z1\nZ-83\nG75 R0\nG75 X40 Z-79 P1000 Q3500 F0.03\nG0 Z260\nM05\nM09\nM30\n```\n\n\n\n","slug":"machine","published":1,"updated":"2024-05-23T07:19:33.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegc9000eisuhf2ii8b7f","content":"<h1 id=\"毛坯内孔Φ43改Φ49\"><a href=\"#毛坯内孔Φ43改Φ49\" class=\"headerlink\" title=\"毛坯内孔Φ43改Φ49\"></a>毛坯内孔Φ43改Φ49</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M08</span><br><span class=\"line\">M03 S500 T101</span><br><span class=\"line\">G99</span><br><span class=\"line\">G0 Z3 X50.5</span><br><span class=\"line\">G1 Z1 F0.2</span><br><span class=\"line\">X46 W-2</span><br><span class=\"line\">Z-85</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z3</span><br><span class=\"line\">X49</span><br><span class=\"line\">G1 Z-85</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z200</span><br><span class=\"line\">T303</span><br><span class=\"line\">S300 M03</span><br><span class=\"line\">G0 X45 Z1</span><br><span class=\"line\">Z-63</span><br><span class=\"line\">G75 R0</span><br><span class=\"line\">G75 X54 Z-84 P1000 Q3500 F0.03</span><br><span class=\"line\">G0 Z260</span><br><span class=\"line\">M05</span><br><span class=\"line\">M09</span><br><span class=\"line\">M30</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"毛坯内孔Φ33改Φ35\"><a href=\"#毛坯内孔Φ33改Φ35\" class=\"headerlink\" title=\"毛坯内孔Φ33改Φ35\"></a>毛坯内孔Φ33改Φ35</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M08</span><br><span class=\"line\">M03 S500 T101</span><br><span class=\"line\">G99</span><br><span class=\"line\">G0 Z3 X50.5</span><br><span class=\"line\">G1 Z1 F0.2</span><br><span class=\"line\">X35 W-2</span><br><span class=\"line\">Z-80</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z200</span><br><span class=\"line\">T303</span><br><span class=\"line\">S300 M03</span><br><span class=\"line\">G0 X45 Z1</span><br><span class=\"line\">Z-83</span><br><span class=\"line\">G75 R0</span><br><span class=\"line\">G75 X40 Z-79 P1000 Q3500 F0.03</span><br><span class=\"line\">G0 Z260</span><br><span class=\"line\">M05</span><br><span class=\"line\">M09</span><br><span class=\"line\">M30</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"毛坯内孔Φ43改Φ49\"><a href=\"#毛坯内孔Φ43改Φ49\" class=\"headerlink\" title=\"毛坯内孔Φ43改Φ49\"></a>毛坯内孔Φ43改Φ49</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M08</span><br><span class=\"line\">M03 S500 T101</span><br><span class=\"line\">G99</span><br><span class=\"line\">G0 Z3 X50.5</span><br><span class=\"line\">G1 Z1 F0.2</span><br><span class=\"line\">X46 W-2</span><br><span class=\"line\">Z-85</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z3</span><br><span class=\"line\">X49</span><br><span class=\"line\">G1 Z-85</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z200</span><br><span class=\"line\">T303</span><br><span class=\"line\">S300 M03</span><br><span class=\"line\">G0 X45 Z1</span><br><span class=\"line\">Z-63</span><br><span class=\"line\">G75 R0</span><br><span class=\"line\">G75 X54 Z-84 P1000 Q3500 F0.03</span><br><span class=\"line\">G0 Z260</span><br><span class=\"line\">M05</span><br><span class=\"line\">M09</span><br><span class=\"line\">M30</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"毛坯内孔Φ33改Φ35\"><a href=\"#毛坯内孔Φ33改Φ35\" class=\"headerlink\" title=\"毛坯内孔Φ33改Φ35\"></a>毛坯内孔Φ33改Φ35</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M08</span><br><span class=\"line\">M03 S500 T101</span><br><span class=\"line\">G99</span><br><span class=\"line\">G0 Z3 X50.5</span><br><span class=\"line\">G1 Z1 F0.2</span><br><span class=\"line\">X35 W-2</span><br><span class=\"line\">Z-80</span><br><span class=\"line\">G0 U-1</span><br><span class=\"line\">G0 Z200</span><br><span class=\"line\">T303</span><br><span class=\"line\">S300 M03</span><br><span class=\"line\">G0 X45 Z1</span><br><span class=\"line\">Z-83</span><br><span class=\"line\">G75 R0</span><br><span class=\"line\">G75 X40 Z-79 P1000 Q3500 F0.03</span><br><span class=\"line\">G0 Z260</span><br><span class=\"line\">M05</span><br><span class=\"line\">M09</span><br><span class=\"line\">M30</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"mac + python + oracle.md","date":"2021-06-01T01:56:00.000Z","_content":"\n> Oracle 字符串只能用单引号\n\n### mac安装通过docker安装使用oracle\n> 参考: https://github.com/MaksymBilenko/docker-oracle-12c\n```shell\n# 拉取镜像\ndocker pull quay.io/maksymbilenko/oracle-12c\n\n# 创建容器并运行\ndocker run -d -p 8080:8080 -p 1521:1521 --name=oracle quay.io/maksymbilenko/oracle-12c\n\n# 连接配置\nhostname: localhost\nport: 1521\nsid: xe\nservice name: xe\nusername: system\npassword: oracle\n```\n\n### 基操\n\n- 查看数据库版本: `select * from v$version;`\n\n#### 用户\n\n- 创建用户:  `create user 用户名 identified by 密码`\n  -   例: `create user test identified by test`\n\n> 第一次创建`create user 'root' identified by '123456'` \n>\n> 提示 missing user or role name 是因为此处用户名不需要引号\n>\n> 修改后提示无效密码, 同样密码也不需要引号\n\n- 修改密码: `alter user 用户名 identified by 新密码`\n\n#### 角色\n\n> oracle为兼容以前版本，提供三种标准角色（role）:connect, resource和dba.\n\n1. connect role(连接角色)\n\n--临时用户，特指不需要建表的用户，通常只赋予他们connect role. \n\n--connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select/insert/update和delete等。\n\n--拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link）\n\n \n\n2. resource role(资源角色)\n\n--更可靠和正式的数据库用户可以授予resource role。\n\n--resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。\n\n\n\n3. dba role(数据库管理员角色)\n\n--dba role拥有所有的系统权限\n\n--包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有\n\n\n\n除了前面三种系统角色----connect、resource和dba，用户还可以在oracle创建自己的role。\n\n用户创建的role可以由表或系统权限或两者的组合构成。\n\n为了创建role，用户必须具有create role系统权限。\n\n1. 创建角色: `create role 角色名;`\n\n2. 授权角色:  `grant select on 表名 to 角色名;`\n\n3. 删除角色: `drop role 角色名;`\n\n#### 权限\n\n- 授权: `grant connect, resource to 用户名;`\n- 撤消:  `revoke connect, resource from 用户名;`\n\n### 库表\n\n> 创建表时提示:  `no privileges on tablespace USERS`\n>\n> 执行: `alter user 库名 quota unlimited on users;`\n\n\n\n- 创建数据库: `create tablespace 表间名 datafile '数据文件名' size 表空间大小;`\n  - 例: `create tablespace TEST datafile 'test' size 20M;`\n- 查看建表语句: `select dbms_metadata.get_ddl('TABLE','USERINFO') from dual;`\n\n\n\n### 错误汇总\n\n- 找不到 `libocci.dylib`\n\n参考: `https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html` 根据提示要安装 `Oracle Instant Client` \n\n下载 `http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html` 的`Basic Package` \n\n下载解压后在环境变量中添加 `export DYLD_LIBRARY_PATH=解压文件目录`\n\n- ORA-12541\n\n服务未启动\n\n- ORA-12505\n\n报错时的配置: `oracle+cx_oracle://test:123456@localhost:1521/TEST`\n\n连接配置不是具体到库, 而是到服务名, 修改为: `oracle+cx_oracle://test:123456@localhost:1521/xe`\n\n> 服务名查看命令: `select INSTANCE_NAME from v$instance;`\n\n\n\n\n\n","source":"_posts/mac下使用oracle.md","raw":"---\ntitle: mac + python + oracle.md\ndate: 2021-06-01 09:56:00\ntags:\n---\n\n> Oracle 字符串只能用单引号\n\n### mac安装通过docker安装使用oracle\n> 参考: https://github.com/MaksymBilenko/docker-oracle-12c\n```shell\n# 拉取镜像\ndocker pull quay.io/maksymbilenko/oracle-12c\n\n# 创建容器并运行\ndocker run -d -p 8080:8080 -p 1521:1521 --name=oracle quay.io/maksymbilenko/oracle-12c\n\n# 连接配置\nhostname: localhost\nport: 1521\nsid: xe\nservice name: xe\nusername: system\npassword: oracle\n```\n\n### 基操\n\n- 查看数据库版本: `select * from v$version;`\n\n#### 用户\n\n- 创建用户:  `create user 用户名 identified by 密码`\n  -   例: `create user test identified by test`\n\n> 第一次创建`create user 'root' identified by '123456'` \n>\n> 提示 missing user or role name 是因为此处用户名不需要引号\n>\n> 修改后提示无效密码, 同样密码也不需要引号\n\n- 修改密码: `alter user 用户名 identified by 新密码`\n\n#### 角色\n\n> oracle为兼容以前版本，提供三种标准角色（role）:connect, resource和dba.\n\n1. connect role(连接角色)\n\n--临时用户，特指不需要建表的用户，通常只赋予他们connect role. \n\n--connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select/insert/update和delete等。\n\n--拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link）\n\n \n\n2. resource role(资源角色)\n\n--更可靠和正式的数据库用户可以授予resource role。\n\n--resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。\n\n\n\n3. dba role(数据库管理员角色)\n\n--dba role拥有所有的系统权限\n\n--包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有\n\n\n\n除了前面三种系统角色----connect、resource和dba，用户还可以在oracle创建自己的role。\n\n用户创建的role可以由表或系统权限或两者的组合构成。\n\n为了创建role，用户必须具有create role系统权限。\n\n1. 创建角色: `create role 角色名;`\n\n2. 授权角色:  `grant select on 表名 to 角色名;`\n\n3. 删除角色: `drop role 角色名;`\n\n#### 权限\n\n- 授权: `grant connect, resource to 用户名;`\n- 撤消:  `revoke connect, resource from 用户名;`\n\n### 库表\n\n> 创建表时提示:  `no privileges on tablespace USERS`\n>\n> 执行: `alter user 库名 quota unlimited on users;`\n\n\n\n- 创建数据库: `create tablespace 表间名 datafile '数据文件名' size 表空间大小;`\n  - 例: `create tablespace TEST datafile 'test' size 20M;`\n- 查看建表语句: `select dbms_metadata.get_ddl('TABLE','USERINFO') from dual;`\n\n\n\n### 错误汇总\n\n- 找不到 `libocci.dylib`\n\n参考: `https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html` 根据提示要安装 `Oracle Instant Client` \n\n下载 `http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html` 的`Basic Package` \n\n下载解压后在环境变量中添加 `export DYLD_LIBRARY_PATH=解压文件目录`\n\n- ORA-12541\n\n服务未启动\n\n- ORA-12505\n\n报错时的配置: `oracle+cx_oracle://test:123456@localhost:1521/TEST`\n\n连接配置不是具体到库, 而是到服务名, 修改为: `oracle+cx_oracle://test:123456@localhost:1521/xe`\n\n> 服务名查看命令: `select INSTANCE_NAME from v$instance;`\n\n\n\n\n\n","slug":"mac下使用oracle","published":1,"updated":"2021-06-13T14:33:29.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegca000fisuh67tc0upt","content":"<blockquote>\n<p>Oracle 字符串只能用单引号</p>\n</blockquote>\n<h3 id=\"mac安装通过docker安装使用oracle\"><a href=\"#mac安装通过docker安装使用oracle\" class=\"headerlink\" title=\"mac安装通过docker安装使用oracle\"></a>mac安装通过docker安装使用oracle</h3><blockquote>\n<p>参考: <a href=\"https://github.com/MaksymBilenko/docker-oracle-12c\">https://github.com/MaksymBilenko/docker-oracle-12c</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取镜像</span></span><br><span class=\"line\">docker pull quay.io/maksymbilenko/oracle-12c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建容器并运行</span></span><br><span class=\"line\">docker run -d -p 8080:8080 -p 1521:1521 --name=oracle quay.io/maksymbilenko/oracle-12c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接配置</span></span><br><span class=\"line\">hostname: localhost</span><br><span class=\"line\">port: 1521</span><br><span class=\"line\">sid: xe</span><br><span class=\"line\">service name: xe</span><br><span class=\"line\">username: system</span><br><span class=\"line\">password: oracle</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><ul>\n<li>查看数据库版本: <code>select * from v$version;</code></li>\n</ul>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><ul>\n<li>创建用户:  <code>create user 用户名 identified by 密码</code><ul>\n<li>例: <code>create user test identified by test</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>第一次创建<code>create user &#39;root&#39; identified by &#39;123456&#39;</code> </p>\n<p>提示 missing user or role name 是因为此处用户名不需要引号</p>\n<p>修改后提示无效密码, 同样密码也不需要引号</p>\n</blockquote>\n<ul>\n<li>修改密码: <code>alter user 用户名 identified by 新密码</code></li>\n</ul>\n<h4 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h4><blockquote>\n<p>oracle为兼容以前版本，提供三种标准角色（role）:connect, resource和dba.</p>\n</blockquote>\n<ol>\n<li>connect role(连接角色)</li>\n</ol>\n<p>–临时用户，特指不需要建表的用户，通常只赋予他们connect role. </p>\n<p>–connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select&#x2F;insert&#x2F;update和delete等。</p>\n<p>–拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link）</p>\n<ol start=\"2\">\n<li>resource role(资源角色)</li>\n</ol>\n<p>–更可靠和正式的数据库用户可以授予resource role。</p>\n<p>–resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。</p>\n<ol start=\"3\">\n<li>dba role(数据库管理员角色)</li>\n</ol>\n<p>–dba role拥有所有的系统权限</p>\n<p>–包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有</p>\n<p>除了前面三种系统角色—-connect、resource和dba，用户还可以在oracle创建自己的role。</p>\n<p>用户创建的role可以由表或系统权限或两者的组合构成。</p>\n<p>为了创建role，用户必须具有create role系统权限。</p>\n<ol>\n<li><p>创建角色: <code>create role 角色名;</code></p>\n</li>\n<li><p>授权角色:  <code>grant select on 表名 to 角色名;</code></p>\n</li>\n<li><p>删除角色: <code>drop role 角色名;</code></p>\n</li>\n</ol>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li>授权: <code>grant connect, resource to 用户名;</code></li>\n<li>撤消:  <code>revoke connect, resource from 用户名;</code></li>\n</ul>\n<h3 id=\"库表\"><a href=\"#库表\" class=\"headerlink\" title=\"库表\"></a>库表</h3><blockquote>\n<p>创建表时提示:  <code>no privileges on tablespace USERS</code></p>\n<p>执行: <code>alter user 库名 quota unlimited on users;</code></p>\n</blockquote>\n<ul>\n<li>创建数据库: <code>create tablespace 表间名 datafile &#39;数据文件名&#39; size 表空间大小;</code><ul>\n<li>例: <code>create tablespace TEST datafile &#39;test&#39; size 20M;</code></li>\n</ul>\n</li>\n<li>查看建表语句: <code>select dbms_metadata.get_ddl(&#39;TABLE&#39;,&#39;USERINFO&#39;) from dual;</code></li>\n</ul>\n<h3 id=\"错误汇总\"><a href=\"#错误汇总\" class=\"headerlink\" title=\"错误汇总\"></a>错误汇总</h3><ul>\n<li>找不到 <code>libocci.dylib</code></li>\n</ul>\n<p>参考: <code>https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html</code> 根据提示要安装 <code>Oracle Instant Client</code> </p>\n<p>下载 <code>http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html</code> 的<code>Basic Package</code> </p>\n<p>下载解压后在环境变量中添加 <code>export DYLD_LIBRARY_PATH=解压文件目录</code></p>\n<ul>\n<li>ORA-12541</li>\n</ul>\n<p>服务未启动</p>\n<ul>\n<li>ORA-12505</li>\n</ul>\n<p>报错时的配置: <code>oracle+cx_oracle://test:123456@localhost:1521/TEST</code></p>\n<p>连接配置不是具体到库, 而是到服务名, 修改为: <code>oracle+cx_oracle://test:123456@localhost:1521/xe</code></p>\n<blockquote>\n<p>服务名查看命令: <code>select INSTANCE_NAME from v$instance;</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Oracle 字符串只能用单引号</p>\n</blockquote>\n<h3 id=\"mac安装通过docker安装使用oracle\"><a href=\"#mac安装通过docker安装使用oracle\" class=\"headerlink\" title=\"mac安装通过docker安装使用oracle\"></a>mac安装通过docker安装使用oracle</h3><blockquote>\n<p>参考: <a href=\"https://github.com/MaksymBilenko/docker-oracle-12c\">https://github.com/MaksymBilenko/docker-oracle-12c</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取镜像</span></span><br><span class=\"line\">docker pull quay.io/maksymbilenko/oracle-12c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建容器并运行</span></span><br><span class=\"line\">docker run -d -p 8080:8080 -p 1521:1521 --name=oracle quay.io/maksymbilenko/oracle-12c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接配置</span></span><br><span class=\"line\">hostname: localhost</span><br><span class=\"line\">port: 1521</span><br><span class=\"line\">sid: xe</span><br><span class=\"line\">service name: xe</span><br><span class=\"line\">username: system</span><br><span class=\"line\">password: oracle</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><ul>\n<li>查看数据库版本: <code>select * from v$version;</code></li>\n</ul>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><ul>\n<li>创建用户:  <code>create user 用户名 identified by 密码</code><ul>\n<li>例: <code>create user test identified by test</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>第一次创建<code>create user &#39;root&#39; identified by &#39;123456&#39;</code> </p>\n<p>提示 missing user or role name 是因为此处用户名不需要引号</p>\n<p>修改后提示无效密码, 同样密码也不需要引号</p>\n</blockquote>\n<ul>\n<li>修改密码: <code>alter user 用户名 identified by 新密码</code></li>\n</ul>\n<h4 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h4><blockquote>\n<p>oracle为兼容以前版本，提供三种标准角色（role）:connect, resource和dba.</p>\n</blockquote>\n<ol>\n<li>connect role(连接角色)</li>\n</ol>\n<p>–临时用户，特指不需要建表的用户，通常只赋予他们connect role. </p>\n<p>–connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select&#x2F;insert&#x2F;update和delete等。</p>\n<p>–拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link）</p>\n<ol start=\"2\">\n<li>resource role(资源角色)</li>\n</ol>\n<p>–更可靠和正式的数据库用户可以授予resource role。</p>\n<p>–resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。</p>\n<ol start=\"3\">\n<li>dba role(数据库管理员角色)</li>\n</ol>\n<p>–dba role拥有所有的系统权限</p>\n<p>–包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有</p>\n<p>除了前面三种系统角色—-connect、resource和dba，用户还可以在oracle创建自己的role。</p>\n<p>用户创建的role可以由表或系统权限或两者的组合构成。</p>\n<p>为了创建role，用户必须具有create role系统权限。</p>\n<ol>\n<li><p>创建角色: <code>create role 角色名;</code></p>\n</li>\n<li><p>授权角色:  <code>grant select on 表名 to 角色名;</code></p>\n</li>\n<li><p>删除角色: <code>drop role 角色名;</code></p>\n</li>\n</ol>\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><ul>\n<li>授权: <code>grant connect, resource to 用户名;</code></li>\n<li>撤消:  <code>revoke connect, resource from 用户名;</code></li>\n</ul>\n<h3 id=\"库表\"><a href=\"#库表\" class=\"headerlink\" title=\"库表\"></a>库表</h3><blockquote>\n<p>创建表时提示:  <code>no privileges on tablespace USERS</code></p>\n<p>执行: <code>alter user 库名 quota unlimited on users;</code></p>\n</blockquote>\n<ul>\n<li>创建数据库: <code>create tablespace 表间名 datafile &#39;数据文件名&#39; size 表空间大小;</code><ul>\n<li>例: <code>create tablespace TEST datafile &#39;test&#39; size 20M;</code></li>\n</ul>\n</li>\n<li>查看建表语句: <code>select dbms_metadata.get_ddl(&#39;TABLE&#39;,&#39;USERINFO&#39;) from dual;</code></li>\n</ul>\n<h3 id=\"错误汇总\"><a href=\"#错误汇总\" class=\"headerlink\" title=\"错误汇总\"></a>错误汇总</h3><ul>\n<li>找不到 <code>libocci.dylib</code></li>\n</ul>\n<p>参考: <code>https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html</code> 根据提示要安装 <code>Oracle Instant Client</code> </p>\n<p>下载 <code>http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html</code> 的<code>Basic Package</code> </p>\n<p>下载解压后在环境变量中添加 <code>export DYLD_LIBRARY_PATH=解压文件目录</code></p>\n<ul>\n<li>ORA-12541</li>\n</ul>\n<p>服务未启动</p>\n<ul>\n<li>ORA-12505</li>\n</ul>\n<p>报错时的配置: <code>oracle+cx_oracle://test:123456@localhost:1521/TEST</code></p>\n<p>连接配置不是具体到库, 而是到服务名, 修改为: <code>oracle+cx_oracle://test:123456@localhost:1521/xe</code></p>\n<blockquote>\n<p>服务名查看命令: <code>select INSTANCE_NAME from v$instance;</code></p>\n</blockquote>\n"},{"title":"nginx","date":"2021-03-18T09:10:44.000Z","_content":"### nginx服务更新证书\n```\nnginx配置文件: /etc/nginx/sites_enabled\nserver {\n    listen  443;\n    server_name djdeveloper.cn *.djdeveloper.cn;\n    root    /var/www/djdeveloper.cn;\n    autoindex   off;\n    ssl on;\n    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;\n    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;\n\n    ssl_session_cache       shared:SSL:1m;\n    ssl_session_timeout     5m;\n}\n\nnginx证书: /etc/nginx/ssl\n\ncp **.full.crt **.full.crt.bak\ncp **.key **.key.bak\n\nvim **.full.crt cp\nvim **.key cp\n\nnginx -s reload\n```\n\n### 配置跨域:\n\n```shell\n位置: http{这里, server{}}\n\nadd_header 'Access-Control-Allow-Origin' '*';\nadd_header 'Access-Control-Allow-Credentials' 'true';\n```\n\n### nginx 502 错误初步排查\n- nginx 配置文件默认目录 /etc/nginx/nginx.conf\n- 配置文件中有 include * 为包含的配置文件\n- access_log off 为关闭日志, 开启后为 access_log /var/www/ccd.log\n- 如果在日志文件中能看到请求说明与nginx无关, 是项目的问题\n- nginx -s reload\n- nginx -t 检查配置文件语法是否正确\n- lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -> port2 是port2出了问题\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ndate: 2021-03-18 17:10:44\ntags:\n---\n### nginx服务更新证书\n```\nnginx配置文件: /etc/nginx/sites_enabled\nserver {\n    listen  443;\n    server_name djdeveloper.cn *.djdeveloper.cn;\n    root    /var/www/djdeveloper.cn;\n    autoindex   off;\n    ssl on;\n    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;\n    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;\n\n    ssl_session_cache       shared:SSL:1m;\n    ssl_session_timeout     5m;\n}\n\nnginx证书: /etc/nginx/ssl\n\ncp **.full.crt **.full.crt.bak\ncp **.key **.key.bak\n\nvim **.full.crt cp\nvim **.key cp\n\nnginx -s reload\n```\n\n### 配置跨域:\n\n```shell\n位置: http{这里, server{}}\n\nadd_header 'Access-Control-Allow-Origin' '*';\nadd_header 'Access-Control-Allow-Credentials' 'true';\n```\n\n### nginx 502 错误初步排查\n- nginx 配置文件默认目录 /etc/nginx/nginx.conf\n- 配置文件中有 include * 为包含的配置文件\n- access_log off 为关闭日志, 开启后为 access_log /var/www/ccd.log\n- 如果在日志文件中能看到请求说明与nginx无关, 是项目的问题\n- nginx -s reload\n- nginx -t 检查配置文件语法是否正确\n- lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -> port2 是port2出了问题\n\n","slug":"nginx","published":1,"updated":"2021-06-13T14:33:29.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegca000hisuh185h7xwf","content":"<h3 id=\"nginx服务更新证书\"><a href=\"#nginx服务更新证书\" class=\"headerlink\" title=\"nginx服务更新证书\"></a>nginx服务更新证书</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx配置文件: /etc/nginx/sites_enabled</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443;</span><br><span class=\"line\">    server_name djdeveloper.cn *.djdeveloper.cn;</span><br><span class=\"line\">    root    /var/www/djdeveloper.cn;</span><br><span class=\"line\">    autoindex   off;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache       shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout     5m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nginx证书: /etc/nginx/ssl</span><br><span class=\"line\"></span><br><span class=\"line\">cp **.full.crt **.full.crt.bak</span><br><span class=\"line\">cp **.key **.key.bak</span><br><span class=\"line\"></span><br><span class=\"line\">vim **.full.crt cp</span><br><span class=\"line\">vim **.key cp</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置跨域\"><a href=\"#配置跨域\" class=\"headerlink\" title=\"配置跨域:\"></a>配置跨域:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位置: http&#123;这里, server&#123;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-502-错误初步排查\"><a href=\"#nginx-502-错误初步排查\" class=\"headerlink\" title=\"nginx 502 错误初步排查\"></a>nginx 502 错误初步排查</h3><ul>\n<li>nginx 配置文件默认目录 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>配置文件中有 include * 为包含的配置文件</li>\n<li>access_log off 为关闭日志, 开启后为 access_log &#x2F;var&#x2F;www&#x2F;ccd.log</li>\n<li>如果在日志文件中能看到请求说明与nginx无关, 是项目的问题</li>\n<li>nginx -s reload</li>\n<li>nginx -t 检查配置文件语法是否正确</li>\n<li>lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -&gt; port2 是port2出了问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx服务更新证书\"><a href=\"#nginx服务更新证书\" class=\"headerlink\" title=\"nginx服务更新证书\"></a>nginx服务更新证书</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx配置文件: /etc/nginx/sites_enabled</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443;</span><br><span class=\"line\">    server_name djdeveloper.cn *.djdeveloper.cn;</span><br><span class=\"line\">    root    /var/www/djdeveloper.cn;</span><br><span class=\"line\">    autoindex   off;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache       shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout     5m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nginx证书: /etc/nginx/ssl</span><br><span class=\"line\"></span><br><span class=\"line\">cp **.full.crt **.full.crt.bak</span><br><span class=\"line\">cp **.key **.key.bak</span><br><span class=\"line\"></span><br><span class=\"line\">vim **.full.crt cp</span><br><span class=\"line\">vim **.key cp</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置跨域\"><a href=\"#配置跨域\" class=\"headerlink\" title=\"配置跨域:\"></a>配置跨域:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位置: http&#123;这里, server&#123;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-502-错误初步排查\"><a href=\"#nginx-502-错误初步排查\" class=\"headerlink\" title=\"nginx 502 错误初步排查\"></a>nginx 502 错误初步排查</h3><ul>\n<li>nginx 配置文件默认目录 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>配置文件中有 include * 为包含的配置文件</li>\n<li>access_log off 为关闭日志, 开启后为 access_log &#x2F;var&#x2F;www&#x2F;ccd.log</li>\n<li>如果在日志文件中能看到请求说明与nginx无关, 是项目的问题</li>\n<li>nginx -s reload</li>\n<li>nginx -t 检查配置文件语法是否正确</li>\n<li>lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -&gt; port2 是port2出了问题</li>\n</ul>\n"},{"title":"nginx相关","date":"2021-03-18T09:05:06.000Z","_content":"### nginx服务更新证书\n```\nnginx配置文件: /etc/nginx/sites_enabled\nserver {\n    listen  443;\n    server_name djdeveloper.cn *.djdeveloper.cn;\n    root    /var/www/djdeveloper.cn;\n    autoindex   off;\n    ssl on;\n    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;\n    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;\n\n    ssl_session_cache       shared:SSL:1m;\n    ssl_session_timeout     5m;\n}\n\nnginx证书: /etc/nginx/ssl\n\ncp **.full.crt **.full.crt.bak\ncp **.key **.key.bak\n\nvim **.full.crt cp\nvim **.key cp\n\nnginx -s reload\n```\n\n### 配置跨域:\n\n```shell\n位置: http{这里, server{}}\n\nadd_header 'Access-Control-Allow-Origin' '*';\nadd_header 'Access-Control-Allow-Credentials' 'true';\n```\n\n### nginx 502 错误初步排查\n- nginx 配置文件默认目录 /etc/nginx/nginx.conf\n- 配置文件中有 include * 为包含的配置文件\n- access_log off 为关闭日志, 开启后为 access_log /var/www/ccd.log\n- 如果在日志文件中能看到请求说明与nginx无关, 是项目的问题\n- nginx -s reload\n- nginx -t 检查配置文件语法是否正确\n- lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -> port2 是port2出了问题\n\n","source":"_posts/nginx相关.md","raw":"---\ntitle: nginx相关\ndate: 2021-03-18 17:05:06\ntags:\n---\n### nginx服务更新证书\n```\nnginx配置文件: /etc/nginx/sites_enabled\nserver {\n    listen  443;\n    server_name djdeveloper.cn *.djdeveloper.cn;\n    root    /var/www/djdeveloper.cn;\n    autoindex   off;\n    ssl on;\n    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;\n    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;\n\n    ssl_session_cache       shared:SSL:1m;\n    ssl_session_timeout     5m;\n}\n\nnginx证书: /etc/nginx/ssl\n\ncp **.full.crt **.full.crt.bak\ncp **.key **.key.bak\n\nvim **.full.crt cp\nvim **.key cp\n\nnginx -s reload\n```\n\n### 配置跨域:\n\n```shell\n位置: http{这里, server{}}\n\nadd_header 'Access-Control-Allow-Origin' '*';\nadd_header 'Access-Control-Allow-Credentials' 'true';\n```\n\n### nginx 502 错误初步排查\n- nginx 配置文件默认目录 /etc/nginx/nginx.conf\n- 配置文件中有 include * 为包含的配置文件\n- access_log off 为关闭日志, 开启后为 access_log /var/www/ccd.log\n- 如果在日志文件中能看到请求说明与nginx无关, 是项目的问题\n- nginx -s reload\n- nginx -t 检查配置文件语法是否正确\n- lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -> port2 是port2出了问题\n\n","slug":"nginx相关","published":1,"updated":"2021-06-13T14:33:29.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcb000iisuhc692e0bq","content":"<h3 id=\"nginx服务更新证书\"><a href=\"#nginx服务更新证书\" class=\"headerlink\" title=\"nginx服务更新证书\"></a>nginx服务更新证书</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx配置文件: /etc/nginx/sites_enabled</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443;</span><br><span class=\"line\">    server_name djdeveloper.cn *.djdeveloper.cn;</span><br><span class=\"line\">    root    /var/www/djdeveloper.cn;</span><br><span class=\"line\">    autoindex   off;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache       shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout     5m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nginx证书: /etc/nginx/ssl</span><br><span class=\"line\"></span><br><span class=\"line\">cp **.full.crt **.full.crt.bak</span><br><span class=\"line\">cp **.key **.key.bak</span><br><span class=\"line\"></span><br><span class=\"line\">vim **.full.crt cp</span><br><span class=\"line\">vim **.key cp</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置跨域\"><a href=\"#配置跨域\" class=\"headerlink\" title=\"配置跨域:\"></a>配置跨域:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位置: http&#123;这里, server&#123;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-502-错误初步排查\"><a href=\"#nginx-502-错误初步排查\" class=\"headerlink\" title=\"nginx 502 错误初步排查\"></a>nginx 502 错误初步排查</h3><ul>\n<li>nginx 配置文件默认目录 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>配置文件中有 include * 为包含的配置文件</li>\n<li>access_log off 为关闭日志, 开启后为 access_log &#x2F;var&#x2F;www&#x2F;ccd.log</li>\n<li>如果在日志文件中能看到请求说明与nginx无关, 是项目的问题</li>\n<li>nginx -s reload</li>\n<li>nginx -t 检查配置文件语法是否正确</li>\n<li>lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -&gt; port2 是port2出了问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx服务更新证书\"><a href=\"#nginx服务更新证书\" class=\"headerlink\" title=\"nginx服务更新证书\"></a>nginx服务更新证书</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx配置文件: /etc/nginx/sites_enabled</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443;</span><br><span class=\"line\">    server_name djdeveloper.cn *.djdeveloper.cn;</span><br><span class=\"line\">    root    /var/www/djdeveloper.cn;</span><br><span class=\"line\">    autoindex   off;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache       shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout     5m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nginx证书: /etc/nginx/ssl</span><br><span class=\"line\"></span><br><span class=\"line\">cp **.full.crt **.full.crt.bak</span><br><span class=\"line\">cp **.key **.key.bak</span><br><span class=\"line\"></span><br><span class=\"line\">vim **.full.crt cp</span><br><span class=\"line\">vim **.key cp</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置跨域\"><a href=\"#配置跨域\" class=\"headerlink\" title=\"配置跨域:\"></a>配置跨域:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位置: http&#123;这里, server&#123;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class=\"line\">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-502-错误初步排查\"><a href=\"#nginx-502-错误初步排查\" class=\"headerlink\" title=\"nginx 502 错误初步排查\"></a>nginx 502 错误初步排查</h3><ul>\n<li>nginx 配置文件默认目录 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li>\n<li>配置文件中有 include * 为包含的配置文件</li>\n<li>access_log off 为关闭日志, 开启后为 access_log &#x2F;var&#x2F;www&#x2F;ccd.log</li>\n<li>如果在日志文件中能看到请求说明与nginx无关, 是项目的问题</li>\n<li>nginx -s reload</li>\n<li>nginx -t 检查配置文件语法是否正确</li>\n<li>lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -&gt; port2 是port2出了问题</li>\n</ul>\n"},{"title":"pycharm2vscode.md","date":"2021-09-20T01:13:59.000Z","_content":"\n# VSCode常用快捷键\n\n- 全部折叠:  `cmd + k` + `cmd + 0`\n\n\n\n# 注:\n\n## 关于导包\n\n- PyCharm 可以在项目指定目录右键指定为导包路径, VSCode需要在`.vscode/launch.json`内 `settings.configurations` 配置`env`时加上 `\"PYTHONPATH\": \"${fileDirname}/../smartbase:${fileDirname}\"`多个目录通过 `:` 追加\n","source":"_posts/pycharm2vscode.md","raw":"---\ntitle: pycharm2vscode.md\ndate: 2021-09-20 09:13:59\ntags:\n---\n\n# VSCode常用快捷键\n\n- 全部折叠:  `cmd + k` + `cmd + 0`\n\n\n\n# 注:\n\n## 关于导包\n\n- PyCharm 可以在项目指定目录右键指定为导包路径, VSCode需要在`.vscode/launch.json`内 `settings.configurations` 配置`env`时加上 `\"PYTHONPATH\": \"${fileDirname}/../smartbase:${fileDirname}\"`多个目录通过 `:` 追加\n","slug":"pycharm2vscode","published":1,"updated":"2022-02-20T09:12:08.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcb000jisuh8w09byfq","content":"<h1 id=\"VSCode常用快捷键\"><a href=\"#VSCode常用快捷键\" class=\"headerlink\" title=\"VSCode常用快捷键\"></a>VSCode常用快捷键</h1><ul>\n<li>全部折叠:  <code>cmd + k</code> + <code>cmd + 0</code></li>\n</ul>\n<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注:\"></a>注:</h1><h2 id=\"关于导包\"><a href=\"#关于导包\" class=\"headerlink\" title=\"关于导包\"></a>关于导包</h2><ul>\n<li>PyCharm 可以在项目指定目录右键指定为导包路径, VSCode需要在<code>.vscode/launch.json</code>内 <code>settings.configurations</code> 配置<code>env</code>时加上 <code>&quot;PYTHONPATH&quot;: &quot;$&#123;fileDirname&#125;/../smartbase:$&#123;fileDirname&#125;&quot;</code>多个目录通过 <code>:</code> 追加</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VSCode常用快捷键\"><a href=\"#VSCode常用快捷键\" class=\"headerlink\" title=\"VSCode常用快捷键\"></a>VSCode常用快捷键</h1><ul>\n<li>全部折叠:  <code>cmd + k</code> + <code>cmd + 0</code></li>\n</ul>\n<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注:\"></a>注:</h1><h2 id=\"关于导包\"><a href=\"#关于导包\" class=\"headerlink\" title=\"关于导包\"></a>关于导包</h2><ul>\n<li>PyCharm 可以在项目指定目录右键指定为导包路径, VSCode需要在<code>.vscode/launch.json</code>内 <code>settings.configurations</code> 配置<code>env</code>时加上 <code>&quot;PYTHONPATH&quot;: &quot;$&#123;fileDirname&#125;/../smartbase:$&#123;fileDirname&#125;&quot;</code>多个目录通过 <code>:</code> 追加</li>\n</ul>\n"},{"title":"oracle常用命令","date":"2021-12-09T08:05:29.000Z","_content":"\n### 和MySQL对比\n\n- 大小写: **oracle** 本身不区分大小写 (会把关键字全部转为大写再执行),但是对引号里的字符区分大小写。\n\n- 主键自增: **oracle** 没有自带的主键自增, 需要先创建一个序列, 再创建一个触发器, 来实现主键自增\n\n\n\n#### 相关命令\n\n```shell\n# 查看当前用户所有序列\nselect * from user_objects where object_type='SEQUENCE';\n\n# 查看表的所有触发器\nselect * from all_triggers where table_name='表名'; \n\n# 创建序列\ncreate sequence 序列名称(一般是表名_SEQ)\nstart with 1  # 开始数字\nminvalue 1 # 最小值\nmaxvalue   # 最大值\ncycle    # 是否循环 cycle / nocycle\nincrement by 1  # 增长数字\nnocache # 不使用缓存\n\n# 删除序列\nDROP SEQUENCE 序列名;\n\n# 创建触发器\ncreate or replace trigger 触发器名\n        before insert on 表名\n        referencing old as old new as new\n        for each row\n      begin\n        select 序列名.nextval\n          into :new.ID\n          from dual;\n      end 触发器名;\n\n# 删除触发器\ndrop trigger 触发器名;\n\n\n```\n\n\n\n### 基操\n\n```shell\n# 查版本\nselect * from v$version;\n\n# sqlalchemy_URI  注: 不用指定数据库\noracle+cx_oracle://{账号}:{密码}@10.168.199.21:1521/?service_name={服务名}\n\n\n\n\n```\n\n\n\n### **Docker Alpine安装oracle客户端**\n\n1. 进入docker容器\n```shell\ndocker run -it --name=容器名 镜像名:latest /bin/sh       由镜像创建容器并进入(只有镜像无容器)\n或\ndocker exec -it 容器名 /bin/sh                          直接进入运行中的容器\n```\n\n2. 安装必要包\n\n```shell\napk add libaio, libnsl, unzip\n```\n\n3. 下载解压oracle basic包\n\n> 需要对应服务器版本, 命令`select * from v$version;`\n>\n> 各版本下载地址(32位): https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html\n>\n> 各版本下载地址(64位): https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\n```shell\n# 下载basic免安装zip包, 需要登录验证, 所以下载链接不能复用, 要在上面链接中找对应版本下载\n\n# 弄个单独目录存\ncd /usr/local\nmkdir oracle\ncd oracle\n\n# wget -c 支持断点续传\nwget -c https://download.oracle.com/otn/linux/instantclient/11204/instantclient-basic-linux.x64-11.2.0.4.0.zip\n?AuthParam=1644827926_6725c450378f19288cb3dc5d040b8a18\n\n# unzip 解压\nunzip instantclient-basic-linux.x64-11.2.0.4.0.zip?AuthParam\\=1644827926_6725c450378f19288cb3dc5d040b8a18\n\n# 整理下文件\nmv ./instantclient_11_2/* ./\nrmdir instantclient_11_2\n```\n> unzip End-of-central-directory signature not found: 多半是下载的文件有问题, 重新下载就可以\n\n4. 添加环境变量\n\n```shell\n# 通过查看 /etc/profile 可以看到会加载 /etc/profile.d/目录下的 .sh结尾的文件\n\n# 弄个单独的环境变量配置文件\nvi /etc/profile.d/oracle.sh\n \nexport ORACLE_HOME=/usr/local/oracle\nexport NLS_LANG=AMERICAN_AMERICA.AL32UTF8\nexport LD_LIBRARY_PATH=$ORACLE_HOME\nexport PATH=$ORACLE_HOME:$PATH\n\n# 测试下加上没有\nsource /etc/profile\necho $PATH\n\n# 退出容器\nexit\n```\n> 注: 这里会有很多奇怪的报错, 以下为作者碰到的\n>\n> 报错1. Error loading shared library /usr/local/oracle/lib/libclntsh.so: No such file or directory\n>\n> (一开始是打算用软链接的, 但是没用, 直接复制就可以了, 不知道为什么)\n>\n> ```shell\n> mkdir /usr/local/oracle/lib\n> cp /usr/local/oracle/libclntsh.so.11.1 /usr/local/oracle/lib/libclntsh.so\n> ```\n> 如果经过以上操作扔有此报错, 且是用supervisor启动的, 可能是因为supervisor没读到环境变量, 需要在supervisor配置文件中添加\n>\n> ```shell\n> environment=ORACLE_HOME=\"/usr/local/oracle\",NLS_LANG=\"AMERICAN_AMERICA.AL32UTF8\",LD_LIBRARY_PATH=\"/usr/local/oracle\"\n> \n> ```\n>\n> 注: supervisor添加环境变量时, 多个变量以`,`分隔, 单个变量多个值以`:`分隔\n>\n> 报错2. \n> Error loading shared library libnsl.so.1: No such file or directory (needed by /usr/local/oracle/lib/libclntsh.so\n> (libnsl.so.1  或 libnsl.so) 建对应软链接\n>\n> ```shell\n> ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so.1\n> ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so\n> ```\n>\n> 报错3: cx_Oracle.DatabaseError: ORA-21561: OID generation faile\n>\n> 这是hosts文件有问题\n>\n> ```shell\n> hostname  # 查看当前hostname\n> 把当前hostname加入到 /etc/hosts 文件的 127.0.0.1 即可\n> ```\n>\n> \n\n5. 提交镜像\n\n```shell\ndocker commit -a 'laowang' 容器名 镜像名:1.0.0\n```\n\n6. 换docker启动用的镜像版本号\n\n> 注: 最后会发现环境变量没有加载, 原因未知\n>\n> 绕路解决方法: \n>\n> -  通过DockerFile直接运行容器的项目: 修改`Dockerfile`文件,  例: `CMD source /etc/profile && gunicorn ....`\n> - 通过DockerCompose启动的项目:  修改`docker-compose.yml`文件 例: `command: /bin/sh -c \"source /etc/profile && gunicorn ....\"`\n>\n> **python 直连测试代码**\n>\n> import cx_Oracle\n> conn = cx_Oracle.connect(\"user/passwd@host/instance\")\n\n\n\n### 报错\n\n- 报错ORA-00904: 后查到是数据库字段写错了, 和模型类的不一致\n\n- 索引失效(partition of such index is in unusable state):\n\n  - ```sql\n    select index_name,status from user_indexes;  # 查失效索引\n    \n    alter index SYS_C00164313 rebuild;  # 重建索引\n    ```\n\n    \n","source":"_posts/python+flask+oracle+docker+alpine.md","raw":"---\ntitle: oracle常用命令\ndate: 2021-12-09 16:05:29\ntags:\n---\n\n### 和MySQL对比\n\n- 大小写: **oracle** 本身不区分大小写 (会把关键字全部转为大写再执行),但是对引号里的字符区分大小写。\n\n- 主键自增: **oracle** 没有自带的主键自增, 需要先创建一个序列, 再创建一个触发器, 来实现主键自增\n\n\n\n#### 相关命令\n\n```shell\n# 查看当前用户所有序列\nselect * from user_objects where object_type='SEQUENCE';\n\n# 查看表的所有触发器\nselect * from all_triggers where table_name='表名'; \n\n# 创建序列\ncreate sequence 序列名称(一般是表名_SEQ)\nstart with 1  # 开始数字\nminvalue 1 # 最小值\nmaxvalue   # 最大值\ncycle    # 是否循环 cycle / nocycle\nincrement by 1  # 增长数字\nnocache # 不使用缓存\n\n# 删除序列\nDROP SEQUENCE 序列名;\n\n# 创建触发器\ncreate or replace trigger 触发器名\n        before insert on 表名\n        referencing old as old new as new\n        for each row\n      begin\n        select 序列名.nextval\n          into :new.ID\n          from dual;\n      end 触发器名;\n\n# 删除触发器\ndrop trigger 触发器名;\n\n\n```\n\n\n\n### 基操\n\n```shell\n# 查版本\nselect * from v$version;\n\n# sqlalchemy_URI  注: 不用指定数据库\noracle+cx_oracle://{账号}:{密码}@10.168.199.21:1521/?service_name={服务名}\n\n\n\n\n```\n\n\n\n### **Docker Alpine安装oracle客户端**\n\n1. 进入docker容器\n```shell\ndocker run -it --name=容器名 镜像名:latest /bin/sh       由镜像创建容器并进入(只有镜像无容器)\n或\ndocker exec -it 容器名 /bin/sh                          直接进入运行中的容器\n```\n\n2. 安装必要包\n\n```shell\napk add libaio, libnsl, unzip\n```\n\n3. 下载解压oracle basic包\n\n> 需要对应服务器版本, 命令`select * from v$version;`\n>\n> 各版本下载地址(32位): https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html\n>\n> 各版本下载地址(64位): https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\n```shell\n# 下载basic免安装zip包, 需要登录验证, 所以下载链接不能复用, 要在上面链接中找对应版本下载\n\n# 弄个单独目录存\ncd /usr/local\nmkdir oracle\ncd oracle\n\n# wget -c 支持断点续传\nwget -c https://download.oracle.com/otn/linux/instantclient/11204/instantclient-basic-linux.x64-11.2.0.4.0.zip\n?AuthParam=1644827926_6725c450378f19288cb3dc5d040b8a18\n\n# unzip 解压\nunzip instantclient-basic-linux.x64-11.2.0.4.0.zip?AuthParam\\=1644827926_6725c450378f19288cb3dc5d040b8a18\n\n# 整理下文件\nmv ./instantclient_11_2/* ./\nrmdir instantclient_11_2\n```\n> unzip End-of-central-directory signature not found: 多半是下载的文件有问题, 重新下载就可以\n\n4. 添加环境变量\n\n```shell\n# 通过查看 /etc/profile 可以看到会加载 /etc/profile.d/目录下的 .sh结尾的文件\n\n# 弄个单独的环境变量配置文件\nvi /etc/profile.d/oracle.sh\n \nexport ORACLE_HOME=/usr/local/oracle\nexport NLS_LANG=AMERICAN_AMERICA.AL32UTF8\nexport LD_LIBRARY_PATH=$ORACLE_HOME\nexport PATH=$ORACLE_HOME:$PATH\n\n# 测试下加上没有\nsource /etc/profile\necho $PATH\n\n# 退出容器\nexit\n```\n> 注: 这里会有很多奇怪的报错, 以下为作者碰到的\n>\n> 报错1. Error loading shared library /usr/local/oracle/lib/libclntsh.so: No such file or directory\n>\n> (一开始是打算用软链接的, 但是没用, 直接复制就可以了, 不知道为什么)\n>\n> ```shell\n> mkdir /usr/local/oracle/lib\n> cp /usr/local/oracle/libclntsh.so.11.1 /usr/local/oracle/lib/libclntsh.so\n> ```\n> 如果经过以上操作扔有此报错, 且是用supervisor启动的, 可能是因为supervisor没读到环境变量, 需要在supervisor配置文件中添加\n>\n> ```shell\n> environment=ORACLE_HOME=\"/usr/local/oracle\",NLS_LANG=\"AMERICAN_AMERICA.AL32UTF8\",LD_LIBRARY_PATH=\"/usr/local/oracle\"\n> \n> ```\n>\n> 注: supervisor添加环境变量时, 多个变量以`,`分隔, 单个变量多个值以`:`分隔\n>\n> 报错2. \n> Error loading shared library libnsl.so.1: No such file or directory (needed by /usr/local/oracle/lib/libclntsh.so\n> (libnsl.so.1  或 libnsl.so) 建对应软链接\n>\n> ```shell\n> ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so.1\n> ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so\n> ```\n>\n> 报错3: cx_Oracle.DatabaseError: ORA-21561: OID generation faile\n>\n> 这是hosts文件有问题\n>\n> ```shell\n> hostname  # 查看当前hostname\n> 把当前hostname加入到 /etc/hosts 文件的 127.0.0.1 即可\n> ```\n>\n> \n\n5. 提交镜像\n\n```shell\ndocker commit -a 'laowang' 容器名 镜像名:1.0.0\n```\n\n6. 换docker启动用的镜像版本号\n\n> 注: 最后会发现环境变量没有加载, 原因未知\n>\n> 绕路解决方法: \n>\n> -  通过DockerFile直接运行容器的项目: 修改`Dockerfile`文件,  例: `CMD source /etc/profile && gunicorn ....`\n> - 通过DockerCompose启动的项目:  修改`docker-compose.yml`文件 例: `command: /bin/sh -c \"source /etc/profile && gunicorn ....\"`\n>\n> **python 直连测试代码**\n>\n> import cx_Oracle\n> conn = cx_Oracle.connect(\"user/passwd@host/instance\")\n\n\n\n### 报错\n\n- 报错ORA-00904: 后查到是数据库字段写错了, 和模型类的不一致\n\n- 索引失效(partition of such index is in unusable state):\n\n  - ```sql\n    select index_name,status from user_indexes;  # 查失效索引\n    \n    alter index SYS_C00164313 rebuild;  # 重建索引\n    ```\n\n    \n","slug":"python+flask+oracle+docker+alpine","published":1,"updated":"2022-07-24T08:18:32.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcb000lisuh3u9efm3w","content":"<h3 id=\"和MySQL对比\"><a href=\"#和MySQL对比\" class=\"headerlink\" title=\"和MySQL对比\"></a>和MySQL对比</h3><ul>\n<li><p>大小写: <strong>oracle</strong> 本身不区分大小写 (会把关键字全部转为大写再执行),但是对引号里的字符区分大小写。</p>\n</li>\n<li><p>主键自增: <strong>oracle</strong> 没有自带的主键自增, 需要先创建一个序列, 再创建一个触发器, 来实现主键自增</p>\n</li>\n</ul>\n<h4 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前用户所有序列</span></span><br><span class=\"line\">select * from user_objects where object_type=&#x27;SEQUENCE&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看表的所有触发器</span></span><br><span class=\"line\">select * from all_triggers where table_name=&#x27;表名&#x27;; </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建序列</span></span><br><span class=\"line\">create sequence 序列名称(一般是表名_SEQ)</span><br><span class=\"line\">start with 1  # 开始数字</span><br><span class=\"line\">minvalue 1 # 最小值</span><br><span class=\"line\">maxvalue   # 最大值</span><br><span class=\"line\">cycle    # 是否循环 cycle / nocycle</span><br><span class=\"line\">increment by 1  # 增长数字</span><br><span class=\"line\">nocache # 不使用缓存</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除序列</span></span><br><span class=\"line\">DROP SEQUENCE 序列名;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建触发器</span></span><br><span class=\"line\">create or replace trigger 触发器名</span><br><span class=\"line\">        before insert on 表名</span><br><span class=\"line\">        referencing old as old new as new</span><br><span class=\"line\">        for each row</span><br><span class=\"line\">      begin</span><br><span class=\"line\">        select 序列名.nextval</span><br><span class=\"line\">          into :new.ID</span><br><span class=\"line\">          from dual;</span><br><span class=\"line\">      end 触发器名;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除触发器</span></span><br><span class=\"line\">drop trigger 触发器名;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查版本</span></span><br><span class=\"line\">select * from v$version;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sqlalchemy_URI  注: 不用指定数据库</span></span><br><span class=\"line\">oracle+cx_oracle://&#123;账号&#125;:&#123;密码&#125;@10.168.199.21:1521/?service_name=&#123;服务名&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Docker-Alpine安装oracle客户端\"><a href=\"#Docker-Alpine安装oracle客户端\" class=\"headerlink\" title=\"Docker Alpine安装oracle客户端\"></a><strong>Docker Alpine安装oracle客户端</strong></h3><ol>\n<li><p>进入docker容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=容器名 镜像名:latest /bin/sh       由镜像创建容器并进入(只有镜像无容器)</span><br><span class=\"line\">或</span><br><span class=\"line\">docker exec -it 容器名 /bin/sh                          直接进入运行中的容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装必要包</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add libaio, libnsl, unzip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>下载解压oracle basic包</li>\n</ol>\n<blockquote>\n<p>需要对应服务器版本, 命令<code>select * from v$version;</code></p>\n<p>各版本下载地址(32位): <a href=\"https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html\">https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html</a></p>\n<p>各版本下载地址(64位): <a href=\"https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\">https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载basic免安装zip包, 需要登录验证, 所以下载链接不能复用, 要在上面链接中找对应版本下载</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弄个单独目录存</span></span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir oracle</span><br><span class=\"line\">cd oracle</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">wget -c 支持断点续传</span></span><br><span class=\"line\">wget -c https://download.oracle.com/otn/linux/instantclient/11204/instantclient-basic-linux.x64-11.2.0.4.0.zip</span><br><span class=\"line\">?AuthParam=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">unzip 解压</span></span><br><span class=\"line\">unzip instantclient-basic-linux.x64-11.2.0.4.0.zip?AuthParam\\=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">整理下文件</span></span><br><span class=\"line\">mv ./instantclient_11_2/* ./</span><br><span class=\"line\">rmdir instantclient_11_2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>unzip End-of-central-directory signature not found: 多半是下载的文件有问题, 重新下载就可以</p>\n</blockquote>\n<ol start=\"4\">\n<li>添加环境变量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过查看 /etc/profile 可以看到会加载 /etc/profile.d/目录下的 .sh结尾的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弄个单独的环境变量配置文件</span></span><br><span class=\"line\">vi /etc/profile.d/oracle.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">export ORACLE_HOME=/usr/local/oracle</span><br><span class=\"line\">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class=\"line\">export LD_LIBRARY_PATH=$ORACLE_HOME</span><br><span class=\"line\">export PATH=$ORACLE_HOME:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试下加上没有</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出容器</span></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注: 这里会有很多奇怪的报错, 以下为作者碰到的</p>\n<p>报错1. Error loading shared library &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so: No such file or directory</p>\n<p>(一开始是打算用软链接的, 但是没用, 直接复制就可以了, 不知道为什么)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/oracle/lib</span><br><span class=\"line\">cp /usr/local/oracle/libclntsh.so.11.1 /usr/local/oracle/lib/libclntsh.so</span><br></pre></td></tr></table></figure>\n<p>如果经过以上操作扔有此报错, 且是用supervisor启动的, 可能是因为supervisor没读到环境变量, 需要在supervisor配置文件中添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment=ORACLE_HOME=&quot;/usr/local/oracle&quot;,NLS_LANG=&quot;AMERICAN_AMERICA.AL32UTF8&quot;,LD_LIBRARY_PATH=&quot;/usr/local/oracle&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注: supervisor添加环境变量时, 多个变量以<code>,</code>分隔, 单个变量多个值以<code>:</code>分隔</p>\n<p>报错2.<br>Error loading shared library libnsl.so.1: No such file or directory (needed by &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so<br>(libnsl.so.1  或 libnsl.so) 建对应软链接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so.1</span><br><span class=\"line\">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so</span><br></pre></td></tr></table></figure>\n\n<p>报错3: cx_Oracle.DatabaseError: ORA-21561: OID generation faile</p>\n<p>这是hosts文件有问题</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname  # 查看当前hostname</span><br><span class=\"line\">把当前hostname加入到 /etc/hosts 文件的 127.0.0.1 即可</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<ol start=\"5\">\n<li>提交镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -a &#x27;laowang&#x27; 容器名 镜像名:1.0.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>换docker启动用的镜像版本号</li>\n</ol>\n<blockquote>\n<p>注: 最后会发现环境变量没有加载, 原因未知</p>\n<p>绕路解决方法: </p>\n<ul>\n<li>通过DockerFile直接运行容器的项目: 修改<code>Dockerfile</code>文件,  例: <code>CMD source /etc/profile &amp;&amp; gunicorn ....</code></li>\n<li>通过DockerCompose启动的项目:  修改<code>docker-compose.yml</code>文件 例: <code>command: /bin/sh -c &quot;source /etc/profile &amp;&amp; gunicorn ....&quot;</code></li>\n</ul>\n<p><strong>python 直连测试代码</strong></p>\n<p>import cx_Oracle<br>conn &#x3D; cx_Oracle.connect(“user&#x2F;passwd@host&#x2F;instance”)</p>\n</blockquote>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><ul>\n<li><p>报错ORA-00904: 后查到是数据库字段写错了, 和模型类的不一致</p>\n</li>\n<li><p>索引失效(partition of such index is in unusable state):</p>\n<ul>\n<li><pre><code class=\"sql\">select index_name,status from user_indexes;  # 查失效索引\n\nalter index SYS_C00164313 rebuild;  # 重建索引\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"和MySQL对比\"><a href=\"#和MySQL对比\" class=\"headerlink\" title=\"和MySQL对比\"></a>和MySQL对比</h3><ul>\n<li><p>大小写: <strong>oracle</strong> 本身不区分大小写 (会把关键字全部转为大写再执行),但是对引号里的字符区分大小写。</p>\n</li>\n<li><p>主键自增: <strong>oracle</strong> 没有自带的主键自增, 需要先创建一个序列, 再创建一个触发器, 来实现主键自增</p>\n</li>\n</ul>\n<h4 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前用户所有序列</span></span><br><span class=\"line\">select * from user_objects where object_type=&#x27;SEQUENCE&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看表的所有触发器</span></span><br><span class=\"line\">select * from all_triggers where table_name=&#x27;表名&#x27;; </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建序列</span></span><br><span class=\"line\">create sequence 序列名称(一般是表名_SEQ)</span><br><span class=\"line\">start with 1  # 开始数字</span><br><span class=\"line\">minvalue 1 # 最小值</span><br><span class=\"line\">maxvalue   # 最大值</span><br><span class=\"line\">cycle    # 是否循环 cycle / nocycle</span><br><span class=\"line\">increment by 1  # 增长数字</span><br><span class=\"line\">nocache # 不使用缓存</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除序列</span></span><br><span class=\"line\">DROP SEQUENCE 序列名;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建触发器</span></span><br><span class=\"line\">create or replace trigger 触发器名</span><br><span class=\"line\">        before insert on 表名</span><br><span class=\"line\">        referencing old as old new as new</span><br><span class=\"line\">        for each row</span><br><span class=\"line\">      begin</span><br><span class=\"line\">        select 序列名.nextval</span><br><span class=\"line\">          into :new.ID</span><br><span class=\"line\">          from dual;</span><br><span class=\"line\">      end 触发器名;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除触发器</span></span><br><span class=\"line\">drop trigger 触发器名;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查版本</span></span><br><span class=\"line\">select * from v$version;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sqlalchemy_URI  注: 不用指定数据库</span></span><br><span class=\"line\">oracle+cx_oracle://&#123;账号&#125;:&#123;密码&#125;@10.168.199.21:1521/?service_name=&#123;服务名&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Docker-Alpine安装oracle客户端\"><a href=\"#Docker-Alpine安装oracle客户端\" class=\"headerlink\" title=\"Docker Alpine安装oracle客户端\"></a><strong>Docker Alpine安装oracle客户端</strong></h3><ol>\n<li><p>进入docker容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=容器名 镜像名:latest /bin/sh       由镜像创建容器并进入(只有镜像无容器)</span><br><span class=\"line\">或</span><br><span class=\"line\">docker exec -it 容器名 /bin/sh                          直接进入运行中的容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装必要包</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add libaio, libnsl, unzip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>下载解压oracle basic包</li>\n</ol>\n<blockquote>\n<p>需要对应服务器版本, 命令<code>select * from v$version;</code></p>\n<p>各版本下载地址(32位): <a href=\"https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html\">https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html</a></p>\n<p>各版本下载地址(64位): <a href=\"https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\">https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载basic免安装zip包, 需要登录验证, 所以下载链接不能复用, 要在上面链接中找对应版本下载</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弄个单独目录存</span></span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir oracle</span><br><span class=\"line\">cd oracle</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">wget -c 支持断点续传</span></span><br><span class=\"line\">wget -c https://download.oracle.com/otn/linux/instantclient/11204/instantclient-basic-linux.x64-11.2.0.4.0.zip</span><br><span class=\"line\">?AuthParam=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">unzip 解压</span></span><br><span class=\"line\">unzip instantclient-basic-linux.x64-11.2.0.4.0.zip?AuthParam\\=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">整理下文件</span></span><br><span class=\"line\">mv ./instantclient_11_2/* ./</span><br><span class=\"line\">rmdir instantclient_11_2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>unzip End-of-central-directory signature not found: 多半是下载的文件有问题, 重新下载就可以</p>\n</blockquote>\n<ol start=\"4\">\n<li>添加环境变量</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过查看 /etc/profile 可以看到会加载 /etc/profile.d/目录下的 .sh结尾的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弄个单独的环境变量配置文件</span></span><br><span class=\"line\">vi /etc/profile.d/oracle.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">export ORACLE_HOME=/usr/local/oracle</span><br><span class=\"line\">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class=\"line\">export LD_LIBRARY_PATH=$ORACLE_HOME</span><br><span class=\"line\">export PATH=$ORACLE_HOME:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试下加上没有</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出容器</span></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注: 这里会有很多奇怪的报错, 以下为作者碰到的</p>\n<p>报错1. Error loading shared library &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so: No such file or directory</p>\n<p>(一开始是打算用软链接的, 但是没用, 直接复制就可以了, 不知道为什么)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/oracle/lib</span><br><span class=\"line\">cp /usr/local/oracle/libclntsh.so.11.1 /usr/local/oracle/lib/libclntsh.so</span><br></pre></td></tr></table></figure>\n<p>如果经过以上操作扔有此报错, 且是用supervisor启动的, 可能是因为supervisor没读到环境变量, 需要在supervisor配置文件中添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment=ORACLE_HOME=&quot;/usr/local/oracle&quot;,NLS_LANG=&quot;AMERICAN_AMERICA.AL32UTF8&quot;,LD_LIBRARY_PATH=&quot;/usr/local/oracle&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注: supervisor添加环境变量时, 多个变量以<code>,</code>分隔, 单个变量多个值以<code>:</code>分隔</p>\n<p>报错2.<br>Error loading shared library libnsl.so.1: No such file or directory (needed by &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so<br>(libnsl.so.1  或 libnsl.so) 建对应软链接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so.1</span><br><span class=\"line\">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so</span><br></pre></td></tr></table></figure>\n\n<p>报错3: cx_Oracle.DatabaseError: ORA-21561: OID generation faile</p>\n<p>这是hosts文件有问题</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname  # 查看当前hostname</span><br><span class=\"line\">把当前hostname加入到 /etc/hosts 文件的 127.0.0.1 即可</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<ol start=\"5\">\n<li>提交镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -a &#x27;laowang&#x27; 容器名 镜像名:1.0.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>换docker启动用的镜像版本号</li>\n</ol>\n<blockquote>\n<p>注: 最后会发现环境变量没有加载, 原因未知</p>\n<p>绕路解决方法: </p>\n<ul>\n<li>通过DockerFile直接运行容器的项目: 修改<code>Dockerfile</code>文件,  例: <code>CMD source /etc/profile &amp;&amp; gunicorn ....</code></li>\n<li>通过DockerCompose启动的项目:  修改<code>docker-compose.yml</code>文件 例: <code>command: /bin/sh -c &quot;source /etc/profile &amp;&amp; gunicorn ....&quot;</code></li>\n</ul>\n<p><strong>python 直连测试代码</strong></p>\n<p>import cx_Oracle<br>conn &#x3D; cx_Oracle.connect(“user&#x2F;passwd@host&#x2F;instance”)</p>\n</blockquote>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><ul>\n<li><p>报错ORA-00904: 后查到是数据库字段写错了, 和模型类的不一致</p>\n</li>\n<li><p>索引失效(partition of such index is in unusable state):</p>\n<ul>\n<li><pre><code class=\"sql\">select index_name,status from user_indexes;  # 查失效索引\n\nalter index SYS_C00164313 rebuild;  # 重建索引\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"python虚拟环境conda","date":"2023-04-26T06:18:19.000Z","_content":"\n# conda\n\n> mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（自带的默认虚拟环境）\n\n## 常用命令\n\n### 基操\n\n1. `conda create`：创建新的虚拟环境。`conda create -n py39 python=3.9`\n2. `conda activate`：激活一个已经存在的虚拟环境。\n3. `conda deactivate`：停用当前激活的虚拟环境。\n4. `conda list`：列出所有已安装的包及其版本号。\n5. `conda install`：安装新的包。\n6. `conda update`：更新已安装的包。\n7. `conda remove`：卸载已安装的包。\n8. `conda search`：搜索可用的包。\n9. `conda info`：查看conda的配置信息。\n10. `conda clean`：清理conda中的缓存、未使用的软件包和环境。\n11. `conda config`：配置conda的选项。\n\n\n\n\n\n## 常见问题\n\n### mac下安完anaconda后进终端会自动启用base虚拟环境\n\n- 使用 `conda config --set auto_activate_base false` 关闭\n\n","source":"_posts/python虚拟环境conda.md","raw":"---\ntitle: python虚拟环境conda\ndate: 2023-04-26 14:18:19\ntags: python conda\n---\n\n# conda\n\n> mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（自带的默认虚拟环境）\n\n## 常用命令\n\n### 基操\n\n1. `conda create`：创建新的虚拟环境。`conda create -n py39 python=3.9`\n2. `conda activate`：激活一个已经存在的虚拟环境。\n3. `conda deactivate`：停用当前激活的虚拟环境。\n4. `conda list`：列出所有已安装的包及其版本号。\n5. `conda install`：安装新的包。\n6. `conda update`：更新已安装的包。\n7. `conda remove`：卸载已安装的包。\n8. `conda search`：搜索可用的包。\n9. `conda info`：查看conda的配置信息。\n10. `conda clean`：清理conda中的缓存、未使用的软件包和环境。\n11. `conda config`：配置conda的选项。\n\n\n\n\n\n## 常见问题\n\n### mac下安完anaconda后进终端会自动启用base虚拟环境\n\n- 使用 `conda config --set auto_activate_base false` 关闭\n\n","slug":"python虚拟环境conda","published":1,"updated":"2023-07-01T01:58:15.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcc000misuhh7iw7a53","content":"<h1 id=\"conda\"><a href=\"#conda\" class=\"headerlink\" title=\"conda\"></a>conda</h1><blockquote>\n<p>mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（自带的默认虚拟环境）</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><ol>\n<li><code>conda create</code>：创建新的虚拟环境。<code>conda create -n py39 python=3.9</code></li>\n<li><code>conda activate</code>：激活一个已经存在的虚拟环境。</li>\n<li><code>conda deactivate</code>：停用当前激活的虚拟环境。</li>\n<li><code>conda list</code>：列出所有已安装的包及其版本号。</li>\n<li><code>conda install</code>：安装新的包。</li>\n<li><code>conda update</code>：更新已安装的包。</li>\n<li><code>conda remove</code>：卸载已安装的包。</li>\n<li><code>conda search</code>：搜索可用的包。</li>\n<li><code>conda info</code>：查看conda的配置信息。</li>\n<li><code>conda clean</code>：清理conda中的缓存、未使用的软件包和环境。</li>\n<li><code>conda config</code>：配置conda的选项。</li>\n</ol>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"mac下安完anaconda后进终端会自动启用base虚拟环境\"><a href=\"#mac下安完anaconda后进终端会自动启用base虚拟环境\" class=\"headerlink\" title=\"mac下安完anaconda后进终端会自动启用base虚拟环境\"></a>mac下安完anaconda后进终端会自动启用base虚拟环境</h3><ul>\n<li>使用 <code>conda config --set auto_activate_base false</code> 关闭</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"conda\"><a href=\"#conda\" class=\"headerlink\" title=\"conda\"></a>conda</h1><blockquote>\n<p>mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（自带的默认虚拟环境）</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"基操\"><a href=\"#基操\" class=\"headerlink\" title=\"基操\"></a>基操</h3><ol>\n<li><code>conda create</code>：创建新的虚拟环境。<code>conda create -n py39 python=3.9</code></li>\n<li><code>conda activate</code>：激活一个已经存在的虚拟环境。</li>\n<li><code>conda deactivate</code>：停用当前激活的虚拟环境。</li>\n<li><code>conda list</code>：列出所有已安装的包及其版本号。</li>\n<li><code>conda install</code>：安装新的包。</li>\n<li><code>conda update</code>：更新已安装的包。</li>\n<li><code>conda remove</code>：卸载已安装的包。</li>\n<li><code>conda search</code>：搜索可用的包。</li>\n<li><code>conda info</code>：查看conda的配置信息。</li>\n<li><code>conda clean</code>：清理conda中的缓存、未使用的软件包和环境。</li>\n<li><code>conda config</code>：配置conda的选项。</li>\n</ol>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"mac下安完anaconda后进终端会自动启用base虚拟环境\"><a href=\"#mac下安完anaconda后进终端会自动启用base虚拟环境\" class=\"headerlink\" title=\"mac下安完anaconda后进终端会自动启用base虚拟环境\"></a>mac下安完anaconda后进终端会自动启用base虚拟环境</h3><ul>\n<li>使用 <code>conda config --set auto_activate_base false</code> 关闭</li>\n</ul>\n"},{"title":"python从入门到放弃","date":"2023-06-30T03:14:42.000Z","_content":"\n# 一. 基础\n\n- 编译型语言\n  - 定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。\n  - 白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了\n  - 示例：C++、Go、Java\n- 解释型语言\n  - 定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。\n  - 白话定义：每次运行都会从第一行进行编译,编译一行执行一行\n  - 示例：Python、JavaScript、Ruby \n\n## 1. 基中基\n\n### 1.1. 关键字\n\n| 关键字                                       | 涉及功能                         |\n| -------------------------------------------- | -------------------------------- |\n| True, False, None                            | 真 假 空                         |\n| if, elif, else, and, not, assert, or, is, in | 逻辑判断                         |\n| try, except, finally, raise                  | 异常捕获                         |\n| for, while, continue, break, return          | 循环                             |\n| from, import                                 | 导包                             |\n| def, class, lambda                           | 定义函数、类、匿名函数           |\n| async, await, yield                          | 异步                             |\n| global, nonlocal                             | 变量空间                         |\n| as, del, pass, with, type                    | 重命名、删除、PASS、上下文、类型 |\n\n### 1.2. 逻辑运算符\n\n- 与 `and`: 一假即假\n- 或 `or`: 一真即真（注意短路逻辑： `1 or 1 / 0` 不会报错，程序只会走第一个1然后就会执行下一行）\n- 非 `not`: 真假取反\n\n### 1.3. 比较运算符\n\n- `//` 取整除 9 // 4 = 2\n\n- `%` 取余 9%4 = 1\n\n- `^`   取异或  把数字转化为二进制取  0 1 为 1 ，1 0 为 1， 1 1 为1， 0 0 为 0\n\n- `**`  幂\n\n### 1.4. 比较运算符\n\n- `> < == != >= <=`\n\n- 返回的结果都是bool类型, True表示条件成立, False表示不成立.\n\n### 1.5. 输入输出\n\n- `print()` 调用底层的`sys.stdout.write`方法，前往控制台打印输出\n\n- `input()`  无论输入什么类型的数据，都会转化为字符串\n\n### 1.6. 循环\n\n- 循环语句结合`else`语句使用，当循环语句执行了`break`表示非正常结束，`else`语句不会执行，否则会执行`else`语句\n\n- 循环语句里有`break/return`时, `break/return`执行了, `else`语句就不会执行\n- `break/continue` 只影响一层循环 \n\n### 1.7. if三目运算\n\n- `a if a > b else b` 条件成立取a，不成立取b\n\n- if 除了判断bool类型, 还可以判断\n  - 容器类型(字符串, 列表, 元组, 字典, 集合, `range()`, `bytes()`) 判断是否有数据\n  - 非零即真(只要不是0, 条件都成立)\n  - None 条件不成立, not none, 表示非空, 条件成立\n\n### 1.8 注释\n\n- 单行 `# 这是注释`\n- 多行 `\"\"\" 这是多行注释 \"\"\"`\n\n## 2. 容器\n\n### 2.1. 字符串\n\n> **字符串用`join`比直接`+`高效原因**：在 Python 中，字符串是不可变类型，这意味着一旦我们创建了一个字符串对象，它就不能被修改或更新。因此，每次使用 `+` 操作符拼接字符串时，都会创建一个新的字符串对象，并将之前字符串对象的内容复制到新的字符串对象中，这个复制的操作会带来额外的内存分配和内存拷贝的开销，特别是在需要拼接大量的字符串时，会消耗大量的系统资源，导致程序运行缓慢。 相对地，使用 `join()` 方法的拼接字符串操作则更加高效。`join()` 方法本质上是将多个字符串通过指定的分隔符拼接在一起，而与此相关的方法包括 `split()`，`replace()` 和 `format()` 等方法，它们均采用类似的算法。在 `join()` 方法的实现中，Python 的解释器会先在内存中分配一个足够大的单个字符串缓冲区，然后扫描要拼接的字符串，将其复制到单个缓冲区中，并在不同字符串之间插入指定的分隔符。这种方法可以有效地避免频繁创建或拷贝字符串对象，从而提高拼接字符串的效率。 此外，`join()` 方法还可以接受一个可迭代对象作为参数，如列表，元组，生成器等，它们会返回一个字符串，其中可迭代对象按照指定的分隔符进行拼接。这种方式具有更高的灵活性和实用性，因为它可以用于拼接任意数量的字符串，而且可以用于迭代较大的数据集合，而不会导致系统资源消耗过多。\n\n- 定义：用单引号、双引号、三引号均可，仅三引号可以换行\n- 切片：` [开始位置:结束位置:步长] ` 左闭右开\n  - `[::-1]` 字符串快速逆置\n\n```python\nmy_str = \"python\"\nisinstance(my_str, str)  # True\n\nmy_age = 18\nisinstance(my_age, int)  # True\n\nmy_age = str(my_age)  # \"18\"\nisinstance(my_age, str)  # True\n```\n\n**常用**\n\n- `.find(要查询的字符, 查询开始索引, 查询结束索引)` 左闭右开，查空返回 -1\n- `.replace(str1, str2, 替换次数)` 字符串替换，替换次数默认-1全部替换\n- `.split(str1, 切片次数)` 字符串以 str1 为分隔符进行切片，切片次数默认-1全部切，返回分隔后的列表\n- `.lower()` 英文转小写 `upper()`转大写\n\n### 2.2. 列表\n\n**定义**：`[]` 或 `list()` \n\n**列表推导式**： 列表中可以包含条件语句，表示筛选符合条件的元素。在这种情况下，底层逻辑还会涉及以下步骤：\n\n1. 创建一个空列表。\n2. 对于列表推导式中的每个元素表达式，按照迭代顺序依次执行以下步骤：\n   1. 在当前作用域中计算元素表达式的值。\n   2. 如果条件表达式的值为真，则将计算得到的值添加到列表中。\n3. 返回最终生成的列表。\n\n**增**\n\n- `.append` 加整个对象，加字典也是整个字典\n- `.extend` 打散加进去，加字典默认加字典的`key`\n- `.insert(index, obj)` 在指定位置前面加, 是整个加进去的\n\n**删**\n\n- `del list[::]` 可以和切片一起操作根据索引删除列表元素\n\n- `.pop()` 只能根据单独索引删除对应元素, 默认删最后一个, 会返回删除的元素\n\n- `.remove()` 指定元素删除\n\n**改**\n\n`list[index] = \"new\"`  可以用切片同时更改多个数据,注意下面示例\n\n```python\n>>> my_list = [1, \"2\", 3]\n>>> my_list[0] = \"1\"\n>>> my_list\n['1', '2', 3]\n>>> my_list[:0] = \"456\"\n>>> my_list\n['4', '5', '6', '1', '2', 3]\n>>> my_list[:2] = [1, 2]\n>>> my_list\n[1, 2, '6', '1', '2', 3]\n```\n\n**查**\n\n- `in` 判断是否存在，只可判断最外层数据，内层还有容器要索引进去查\n- `.index(obj, start, end)` 左闭右开，找不到报`ValueError`\n- `.count(obj)`\n\n**排序**\n\n- `.sort(reverse=False)` 默认是从小到大, `reverse=True` 改为从大到小\n\n- `.reverse()` 将列表逆置, 与上面的`reverse=True`不同\n\n### 2.3. 元组\n\n**定义**：`tuple()` 或 `(1, 2)`  如果只有一个元素, 逗号不能省略, 有序\n\n### 2.4. 字典\n\n**定义**\n\n- `dict()` 或 `{\"a\": 1, \"b\": 2}`\n- `zip`组合`key`和`value` 生成字典\n\n```python\n>>> keys = [\"a\", \"b\"]\n>>> values = [1, 2]\n\n>>> my_dict = dict(zip(keys, values))\n>>> my_dict\n{'a': 1, 'b': 2}\n```\n\n**增:**   \n\n- `dict[key] = value`\n\n**删:**   \n\n- `del dict[key]`  必须要有`key`数据\n\n- `.pop(key, default)`  必须要有`key`数据, 会返回所删项的`value`, 如果字典里没有这个`key`就会返回`default`\n\n- `.popitem()`  takes no arguments, return the last item as a tuple()\n\n- `.clear()` 清空\n\n**改:**  \n\n-  `dict[key] = value`  和增加元素相同, 所以当原本没有此`key`就变成增加元素了\n\n**查:**   \n\n- `dict[key]`  如果不存在会报错\n\n- `.get(key, default)`   如果不存在则返回`default`  不写`default`找不到会返回`None` 不会报错\n\n**合并:**  \n\n- `dict1.update(dict2)`  把字典2的每个键值对数据合并到字典1中, 如果有重复的则更新1的内容\n\n**遍历:** \n\n- `for key in dict.keys()`\n- `for values in dict.values()`\n- `for item in dict.items()`           **item是个tuple**\n- `for key, value in dict.items()`         遍历 + 拆包\n\n**排序：**\n\n- `sorted(d.items(), key=lambda x : x[0/1])`\n\n### 2.5. 集合\n\n- 集合是一个容器类型, 可以存储多个数据, 但是多个数据不能重复\n- 集合只能存储不可变类型数据, 也就是: 数字, 字符串, 元组    同字典的key\n- 空集合不能使用**{}**来表示, {}是字典, 创建时用 **set()** 来创建空集合\n- 遍历集合不能用通过下标, 可以用for遍历, 可迭代对象\n\n**特点:**\n\n1. 无序, so集合不能通过索引获取数据和通过索引修改数据\n2. 数据不能重复,数据是唯一的\n3. 可变类型\n\n**操作符：**\n\n**^**  补  {1，2} ^ {2, 3}  =>  {1, 3}\n\n**&** 交  {1，2} & {2, 3}  =>  {2, }\n\n**|**   并   {1，2} | {2, 3}  =>  {1, 2, 3}\n\n**-**   差   {1，2} - {2, 3}  =>  {1, }\n\n**增:**\n\n.**add()** 重复的数据只保留一个\n\n**删:**\n\n**.remove(value)** 指定数据删除\n\n### 2.6. 公共方法\n\n| 运算符 | Python 表达式      | 结果                         | 描述           | 支持的数据类型           |\n| ------ | ------------------ | ---------------------------- | -------------- | ------------------------ |\n| +      | [1, 2] + [3, 4]    | [1, 2, 3, 4]                 | 合并           | 字符串、列表、元组       |\n| *      | ['Hi!'] * 4        | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 复制           | 字符串、列表、元组       |\n| in     | 3 in (1, 2, 3)     | True                         | 元素是否存在   | 字符串、列表、元组、字典 |\n| not in | 4 not in (1, 2, 3) | True                         | 元素是否不存在 | 字符串、列表、元组、字典 |\n\n**python内置函数**\n\n- `len()`  获取容器的元素数量\n\n- `max()`  返回容器中元素最大值  |  类似的 `min()`  最小\n\n- `enumerate()` \n  - 在使用for循环的时候可以遍历数据又可以遍历索引, 列表/元组/字典都可以使用\n  - 当用于字典遍历所有items时返回的是一个索引数据和一个元组\n\n### 2.7. 可变不可变类型\n\n不可变类型\n\n- 定义：不允许在原本内存空间基础上修改数据, 修改数据后内存地址会发生变化\n- 示例：列表, 字典, 集合\n\n可变类型\n\n- 定义：允许在原本内存空间修改数据，修改后一是在原有内存空间基础上修改数据内存不变，二是重新赋值内存地址可能发生变化\n- 示例：数字, 字符串, 元组  \n\n## 3. 函数\n\n> 程序中定义的变量都是保存在内存中的, 局部变量也是, 当函数执行结束后局部变量都会销毁,内存释放\n\n### 3.1. 文档说明\n\n```python\ndef show():\n    \"\"\" func docs \"\"\"\n    # ''' others '''\n    print(\"life is short i use python\")\n\n\nshow()\nhelp(show)\n# life is short i use python\n# Help on function show in module __main__:\n# \n# show()\n#     func docs\n```\n\n### 3.2. 返回值\n\n- 函数不写`return` 取函数返回值时会取到 `None`\n- 在多层循环中 `return` 可把多层全部终止，`break` 只能终止一层\n\n### 3.3. 局部变量&全局变量\n\n- 局部变量：作用域仅在函数体内部,  随着函数执行结束会销毁\n- 全局变量：在函数体内外都生效，不会随着函数执行结束会销毁\n\n- `global` 本质是表示:  要修改全局变量的内存地址, 所以只有不可变类型需要`global`\n- 在函数内部使用全局变量时, 要先声明 `global` 全局变量, 如果是可变类型就不需要了\n- 对于操作全局变量的数据, 如果是通过重新赋值来完成的, 那么必须加上`global`关键字\n- `nonlocal` 使用场景是函数嵌套时，内层函数要使用外层函数的变量或参数\n\n```python\na = 1\nb = [1]\n\ndef t():\n    global a\n    a = 2\n    b.append(2)\n    print(a, b)\n\nt()\nprint(a, b)\n# 2 [1, 2]\n# 2 [1, 2]\n```\n\n### 3.4. 函数参数\n\n- 分类\n\n  - 位置参数：按照位置顺序依次给函数的参数传值\n\n  - 关键字参数：按照关键字名给函数的参数传值\n\n  注：前面按位置, 后面按关键字, 如果前面用了关键字参数, 后面不能再使用位置参数, 只能使用关键字参数传参\n\n- 不定长参数: 函数的参数个数不确定, 可能0个, 可能多个\n\n  - 不定长位置参数, `*args`, 调用函数时所有位置参数都封装成元组, 赋值给`args`\n  - 不定长关键字参数, `**kwargs`, 调用函数时所有关键字参数都封装成字典, 赋值给`kwargs`\n\n  注: `*args` 和 `**kwargs` 这两个参数名可以修改, 但一般不改, 大家习惯了\n\n```python\ndef show(name, *args, age=18, **kwargs):\n    print(\"name:\", name, \"age:\", age, \"args:\", args, \"kwargs:\", kwargs)\nshow(\"李四\", 1, 2, \"a\", a=1, b=2, age=20)\n\n# name: 李四 age: 20 args: (1, 2, 'a') kwargs: {'a': 1, 'b': 2}\n```\n\n- **拆包**：使用不同变量保存容器类型中的每个数据，对应的变量和数据数量要保持一致致\n\n  -  容器类型如:字符串, 列表, 元组, 字典, range, 集合(set) 都可以利用拆包, 容器类型可以使用变量保存不同的数据\n\n  - `*my_tuple`: 对元组/列表进行拆包, 也就是把元组/列表里每个数据按位置参数进行传参\n  - `**my_dict`: 对字典进行拆包, 也就是把字典里面的每一个键值对按关键字的方式进行传参\n\n### 3.5. 匿名函数\n\n定义：没有名字的函数, 就是匿名函数, 匿名函数返回值不需要 `return`，用` lambda` 定义\n\n格式:  `lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用]`\n\n```python\n>>> my_func = lambda a: print(a)\n>>> my_func(\"hello world\")\nhello world\n```\n\n### 3.6. 常见函数定义\n\n- 递归函数: 在一个函数内调用的是函数本身, 这样的函数称为递归函数\n- 函数嵌套：python中, 可以在函数内部再定义一个函数, 称为函数的嵌套（例：装饰器）\n- 高阶函数：函数的参数或者返回值是一个函数类型, 那么这样的函数就叫高阶函数（例：装饰器）\n\n## 4. 文件\n\n### 4.1. 常识\n\n- 在windows的python解释器里面, 打开文件默认的编码格式是 `gbk` 的\n\n- 在mac和linux的解释器里面, 打开文件默认的编码格式是 `utf-8` 的\n\n- `utf-8` 一个汉字占用三个字节, 一个字母占1个字节\n\n- 编码:  `.encode(\"utf-8\")`\n\n- 解码:  `.decode(\"utf-8\")`\n\n## 5. 面向对象\n\n> 面向对象就是对面向过程的封装\n>\n> **面向对象的三大特性**\n>\n> **封装:** 把属性和方法放到类里面的操作就是封装, 封装可以控制属性和方法的访问权限\n>\n> **继承:** 子类可以使用父类的方法或者属性, 提高了代码的复用性, 注意点: 父类的功能满足不了子类的需要, 重写父类的方法\n>\n> **多态:** \n>\n> - 对象调用同一个方法会出现不同的表现形式(表现结果)\n> - 多态的好处, 代码的可扩展性强, 代码兼容性强, 不关系类型, 只关系对象是否具有指定功能方法\n\n### 5.0. 类的实例化过程\n\n1. 内存分配：Python为对象分配所需的内存空间。\n\n2. 初始化实例：调用类的__init__方法来初始化实例。__init__方法是类中一个特殊的方法，它在实例化对象时被自动调用。\n\n3. 创建对象引用：创建一个指向该实例的引用，允许你通过变量来访问该实例。\n\n4. 执行__new__方法（可选）：如果定义了__new__方法，它将在__init__之前被调用。__new__方法负责创建实例。\n\n5. 返回实例：返回一个指向新实例的引用，使你可以使用该引用来操作该实例。\n\n总结起来，实例化一个类时，Python会为对象分配内存空间，然后调用__init__方法初始化实例，最后返回新实例的引用。这样，就可以通过该引用来操作和访问该实例的属性和方法。\n\n### 5.1. 魔法方法\n\n**定义**：方法名前后都有两个下划线, 这样的方法称为魔法方法, 魔法方法具有一定的特殊功能\n\n**常见魔法方法**：\n\n- `__new__` 分配内存的方法, 在`__init__`之前调用\n\n- `__init__`, 在创建一个对象时默认被调用,不需要手动调用, 可以在此方法内添加对象属性\n\n- `__del__`, 创建对象后, python解释器默认调用`__init__`方法, 当删除对象时, python解释器也会默认调用`__del__`方法\n\n- `__str__`, 当使用`print`输出对象的时候, 默认打印对象的内存地址, 如果类定义了此方法,那么就会打印从在这个方法中`return`的数据, 此方法返回必须是字符串类型, 作为这个对象的描述信息. \n\n- `__slots__`方法, 限定自定义类型的的对象只能绑定某些属性, 只对当前类对象生效, 对子类并不起任何作用\n\n- `__enter__`表示上文方法，需要返回一个操作文件对象\n\n- `__exit__`表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法\n\n**对象销毁的方式**:\n\n- 程序运行结束, 程序中所使用对象都要在内存中销毁\n\n- 当对象没有变量使用的时候, 该对象就会被销毁, 引用计数为0时会销毁\n\n### 5.2. 继承\n\n**语法**：`class 子类名(父类名):`  / `class 子类名(父类1, 父类2):`\n\n**说明**：子类复用父类里面的属性或方法,  提高代码的复用性,  能够使用父类里面的方法或者属性, 包括`__init__`方法\n\n**常识：**\n\n- 父类也称为基类,  子类也称为派生类\n\n- 单继承：子类只继承一个父类\n- 多继承：子类继承多个父类, 可以使用多个父类里的方法\n  - `.mro()`  方法可查看类的继承顺序\n- 多层继承：只要有类继承关系, 子类对父类及所有上层父类的方法都可以使用\n\n- 继承后方法的调用：先从本类查找, 依次往后查找, 找到就停, 如果没找到对应方法, 程序崩溃\n- 重写：子类继承父类, 对父类的功能方法进行重新改造（子类方法名要和父类方法名相同）\n\n**子类调用父类方法：**\n\n- `self.方法()` : 当子类没有这个方法时候才可以用, 子类有相同方法时用`父类的类名.方法(self)`\n\n- `父类的类名.方法(self)` :  类名调用对象方法, 需要自己手动传入self参数, 对象调用对象方法, 不需要传self参数\n\n- `super().方法()` :  `super`是一个类, `super()`表示创建了一个父类对象, 通过`__init__`方法给对象添加属性 \n\n  - 完整写法 `super(子类名称, self).父类方法()`  : 指定类名, 根据子类获取对应父类\n\n  -  super本质: 根据指定类 在类的继承顺序**类名.mro()**中获取下一个类, 然后调用下一个类的方法, 如果是单继承, super的调用可以认为是调用的是父类的方法\n\n### 5.3. 私有权限\n\n1. 在属性名和方法名前加两个下划线\n2. 私有属性和私有方法只能在本类中使用, 不能在类外部使用\n3. 其实私有属性及方法只是对属性名和方法名进行了包装, 把名字进行了修改\n4. 总结: 私有属性和方法 的包装格式: 在属性名和方法名前面加 `_本类类名__`\n5. 子类无法使用父类的私有属性和私有方法, 也是把名字做了包装, 同上\n6. 给对象添加私有属性只能在`__init__`方法里面完成\n\n### 5.4. 类属性和实例属性\n\n- **类属性**: 在类的内部init方法外部定义的属性, 类属性属于类\n\n- - **私有类属性**: 类名前加两个下划线, 也是把名字做了包装, 实际同对象的私有\n\n- **实例属性**: 在init方法内部定义的属性称为实例属性, 实例属性属于实例  (实例 == 对象)\n\n- **类不能访问对象属性, 但是对象可以访问类属性(对象不能修改类属性, 只能类去修改)**\n- **总结**: 对象属性的操作是由对象完成, 类属性操作由类来完成, 只不过对象可以访问类属性(也可以用 **self.__class__.类属性** 修改类属性, 用class找到类然后是类去修改类属性), 类不能访问对象属性\n\n### 5.5. 类中方法的种类\n\n- **实例方法**: 方法的第一个参数是self, 那么这样的方法就是对象方法, self表示当前对象, 实例方法, 类不能调用\n- **类方法**(修改和获取类的私有属性时使用): 方法第一参数cls并且还需要使用`@classmethod`的关键字进行修饰, cls表示当前类, 类方法可以获取和修改类的私有属性, 类方法类和对象都可以调用\n\n- **静态方法**: 方法里没有self和cls参数并且还需要使用`@staticmethod`的关键字进行修饰\n\n## 6. 异常&模块\n\n### 6.1. 异常\n\n**异常捕获` try...except...`**\n\n- `try` 表示尝试执行可能出问题的代码, `except` 表示如果代码出现异常, 进行捕获 `as e:`\n- 捕获异常类型的通用写法就是用`Exception`,  因为大多数异常类型都是最终继承`Exception`的\n- `BaseException` 可以捕获任何异常\n\n**`try...except...else...finally`**\n\n- `except` 与 `else` 互斥,  `finally`不管有没有异常都执行\n\n**异常的传递**\n\n- 当执行代码的时候遇到错误, 首先判断当前代码块对异常进行捕获, 如果没有, 那么再把异常一层一层往外传递, 如果外界的都没对异常的捕获, 程序就会崩溃, 如果有异常捕获, 就不会崩溃了\n\n**自定义异常**\n\n- class定义自定义异常类, 必须继承`Exception`或者`BaseException`才可以\n- 抛出自定义异常使用关键字`raise`\n- 注意:raise只能抛出异常类的对象\n\n### 6.2. 模块\n\n **通俗理解模块就是一个 .py 文件, 模块里面可以定义具体的功能代码(类, 函数, 全局变量, 匿名函数等等)**\n\n```python\n# 查看导入模块的搜索路径 \nimport sys \n\nprint(sys.path)       \n```\n\n- 模块好比一个工具箱, 模块里的每一个具体代码好比一个工具\n- 模块的命名规则和变量名的命名规则一样 使用下划线命名\n- 模块名的组成和变量名组成一样, 字母, 数字, 下划线开头, 如果以数字开头, 这个模块就不能使用了\n\n**导入模块的两种方式**\n\n- import 模块名  as 别名\n- from 模块名 import 功能代码(函数, 类, 全局变量)   as 别名\n- from 模块名 import *  导入模块里所有功能代码 一般不这样使用\n\n**导入模块注意点**\n\n- 自制的模块名不要和系统的模块重名\n- 使用from 模块名 import 功能, 在当前模块不要再定义导入功能的代码, 否则会覆盖之前导入功能代码\n\n**自制模块**\n\n- __all__ 指定导入对应的功能代码  __all__ = [类名, 类名.....]  all定义针对外界使用from 模块名 import * 导入,  只能导入all里面指定的功能代码\n\n**主模块名字**: __main__  \n\n**导入的模块名字**:  就是模块原本的名字\n\n**包:** **通俗理解只要文件夹里包含一个__init__.py文件, 那么这个文件夹就是包**\n\n- 包的作用: 包是用来管理不同模块的 \n- 模块的作用: 模块是用来管理不同功能代码的\n- 包名的命名规则和变量名一样, 使用下划线命名法\n- 包名的组成和变量名的组成一样, 数字, 字母, 下划线 不能数字开头\n- **包的特点**:\n\n- - 包里面有一个__init__.py文件,这是包的初始化文件, 当且仅当第一次导入包的时候会执行这个文件\n  - __init__.py 其实就是包的象征文件\n  - __init__.py 可以控制模块的导入行为\n  - __init__.py 可以定义类, 函数, 全局变量等代码\n\n**包的导入目的使用包里面的模块**\n\n**格式**: \n\n- import 包名  指定导入包, 用包调用模块, 使用模块中的功能代码 第一次导入包的时候会默认调用__init__.py  \n- import 包名.模块名\n- from 包名 import 模块名\n- from 包名 import 模块名 as 模块别名\n- from 包名 import *      默认不是导入包里所有模块, 需要在__init__.py中使用__all__去指定\n\n# 二. 高级\n\n## 1. 多任务\n\n### 1.1. 常识\n\n- 多任务的目的：充分利用CPU资源，提高执行效率\n\n- 时间片：内核分配给程序执行的一小段时间，这个时间内进程拥有cpu资源\n\n- 同步：协同步调，按预定的先后次序进行运行。如：你说完，我再说\n\n- 进程、线程同步：可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行; B执行，再将结果给A; A再继续操作\n\n- 进程状态: 等待状态不占用时间片, 即使时间片有剩余也会退出不占用CPU资源, 只有运行状态才占用CPU资源\n\n  ![image-20230704132442670](..\\images\\image-20230704132442670.png)\n\n### 1.2. 执行形式\n\n- 并发：在一个时间段内，交替的执行多个任务，任务数 > CPU核心数，时间片轮转\n- 并行：在一个时间点，多核CPU同时执行多个任务，任务数 < CPU核心数\n- 一般情况下，并发和并行同时存在\n\n### 1.3. 实现方式：进程\n\n- **进程是操作系统进行资源(CPU、内存)分配的基本单位**\n- 程序中至少有一个进程，这个进程称为主进程\n- 主进程会等待所有子进程执行结束再结束\n  - 如果子进程没执行完，主进程会一直等待，此时如果子进程进入死循环会导致主进程无法退出解决办法：\n    - 设置子进程为守护主进程，主进程退出时子进程直接销毁: `sub_process.daemon = True`\n    - 主进程退出前先销毁子进程: `sub_process.terminate()`\n- 每个进程中至少有一个线程，这个线程称为主线程\n- 进程间不共享全局变量\n- 进程之间执行也是无序的，由操作系统调度决定\n\n```python\n# 进程创建子进程时程序会复制一份代码去跑(也就是说操作系统会再次进行资源分配，所以创建出来的子进程所拥有的内存是和创建它的进程的内存是不同的，所以不可能共享全局变量)\n# 打印全局变量id可发现变量的内存地址是不同的\nimport time\nimport multiprocessing\n\n\nmy_list = []  # 列表可变类型，为全局变量\n\n\ndef read_val():\n    print(f\"reading list: {my_list}, id: {id(my_list)}\")\n\n\ndef write_val():\n    for i in range(3):\n        my_list.append(i)\n        print(f\"writed.....{my_list}, id: {id(my_list)}\")\n        time.sleep(0.5)\n\n\n# 创建子进程时：linux和mac不会拷贝主进程执行的代码，但windows会拷贝主进程代码并执行，所以对windows来说创建子进程的代码会发生递归执行而报错，需要把此部分代码放在__name__ == \"__main__\"判断下（判断主模块的代码只会执行一次），linux和mac就不需要\nif __name__ == \"__main__\":\n    read_task = multiprocessing.Process(target=read_val)\n    write_task = multiprocessing.Process(target=write_val)\n\n    write_task.start()\n    read_task.start()\n```\n\n### 1.4. 实现方式：线程\n\n- 线程是进程中执行代码的一个分支，每个线程想到执行代码需要CPU进行调度\n- **线程是CPU调度的基本单位**，每个进程至少有一个线程，称为主线程\n- 主线程会等待所有子线程结束再结束\n  - `sub_thread.setDaemon(True)`\n  - `threading.Thread(target=task, daemon=True)`\n- 线程执行时无序的, 谁抢到CPU, 谁就执行\n- 线程之间共享全局变量，因为在同一进程里面，所以使用的内存资源是相同的，这会导致数据错乱问题，解决方案\n  - 线程等待 `sub_thread.join()`\n  - 互斥锁：对共享数据进行锁定，保证同一时刻只有一个线程操作共享数据\n  - 以上两种方法都是把多任务改成单任务去执行，保证了数据的准确性，但执行效率会下降\n\n```python\nimport time\nimport threading\n\n\ndef sing(name):\n    cur_thread = threading.current_thread()\n    print(f\"sing: {cur_thread}\\n\")\n    for _ in range(3):\n        print(f\"singing {name}... \\n\")\n        time.sleep(0.2)\n\ndef dance():\n    cur_thread = threading.current_thread()\n    print(f\"dance: {cur_thread}\\n\")\n    for _ in range(3):\n        print(\"dancing... \\n\")\n        time.sleep(0.2)\n\ndef tutorial0():\n    \"\"\"线程无序\"\"\"\n    main_thread = threading.current_thread()\n    print(f\"main thread: {main_thread}\")\n\n    sing_thread = threading.Thread(target=sing, args=(\"正月十八\", ))\n    dance_thread = threading.Thread(target=dance)\n\n    sing_thread.start()\n    dance_thread.start()\n\n\n# 线程之间共享全局变量\ng_list = []\n\n\ndef add_data():\n    for i in range(3):\n        g_list.append(i)\n        print(f\"added, {g_list}\\n\")\n\n\ndef read_data():\n    print(f\"read data {g_list}\\n\")\n\n\ndef tutorial1():\n    \"\"\"线程共享全局变量\"\"\"\n    add_thread = threading.Thread(target=add_data)\n    read_thread = threading.Thread(target=read_data)\n\n    add_thread.start()\n    read_thread.start()\n\n\ng_num = 0\nlock = threading.Lock()\n\n\ndef add_num0():\n    lock.acquire()\n    for _ in range(100_0000):\n        global g_num  # int不可变要用全局需要声名\n        g_num += 1\n    print(f\"add0: {g_num}\")\n    lock.release()\n\n\ndef add_num1():\n    lock.acquire()\n    for _ in range(100_0000):\n        global g_num  # int不可变要用全局需要声名\n        g_num += 1\n    print(f\"add1: {g_num}\")\n    lock.release()\n\n\ndef tutorial2():\n    \"\"\"数据保护\"\"\"\n    thread0 = threading.Thread(target=add_num0)\n    thread1 = threading.Thread(target=add_num1)\n\n    thread0.start()\n    # thread0.join()  # 线程等待 在0执行完再向下执行\n    thread1.start()\n\nif __name__ == \"__main__\":\n    tutorial2()\n\n```\n\n### 1.5. 实现方式：协程\n\n**迭代器 Iterator**\n\n- 可迭代对象(Iterable)定义：包含 `__iter__` 方法\n  - 可迭代对象不一定是迭代器，但迭代器一定是可迭代对象\n\n```python\n# 判断一个对象是否可迭代\nfrom collections import Iterable\n\nisinstance(A, Iterable)\n```\n\n- 迭代器定义：包含 `__iter__` 和 `__next__` 方法\n  - 迭代是访问集合元素的一种方式\n  - 迭代器是一个可以记住遍历位置的对象\n  - 迭代器对象从集合第一个元素开始访问，直到所有元素被访问结束\n  - 迭代器只能往前不能后退\n  - 迭代器可以节省内存空间，实现循环\n- 迭代器优点：存放生成数据的实现方式而不是具体数据，占用很少的内存空间\n\n```python\nfrom collections.abc import Iterable, Iterator\n\n\nclass ClassIterator:\n\n    def __init__(self, obj) -> None:\n        self.obj = obj\n        self.cur_num = 0\n\n    def __iter__(self):\n        pass\n\n    def __next__(self):\n        if self.cur_num >= len(self.obj.names):\n            raise StopIteration\n\n        res = self.obj.names[self.cur_num]\n        self.cur_num += 1\n        return res\n\n\nclass Classmate:\n\n    def __init__(self) -> None:\n        self.names = list()\n\n    def add(self, name):\n        self.names.append(name)\n\n    def __iter__(self):\n        \"\"\"想要一个对象称为一个 可迭代对象, 即可以用for遍历\n        必须要有此方法\n        \"\"\"\n        return ClassIterator(self)\n\n\n# iter返回self\nclass Fibonacci:\n\n    def __init__(self, nums) -> None:\n        self.nums = nums\n        self.cur_num = 0\n        self.a = 0\n        self.b = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.cur_num >= len(self.nums):\n            raise StopIteration\n        \n        res = self.a\n        self.a, self.b = self.b, self.a + self.b\n        self.cur_num += 1\n\n        return res\n\n\nif __name__ == \"__main__\":\n    classmate = Classmate()\n\n    classmate.add(\"foo\")\n    classmate.add(\"zoo\")\n    classmate.add(\"yoo\")\n\n    # iter方法会自动调用__iter__方法接收返回值, 其返回值就是迭代器也就是ClassIterator类创建的对象就是迭代器\n    classmate_iterator = iter(classmate)\n    print(isinstance(classmate_iterator, Iterator))  # 判断是否是迭代器 True\n\n    for i in classmate:\n        print(i)  # foo zoo yoo\n\n    print(isinstance(classmate, Iterable))\n\n```\n\n**生成器 Generator**\n\n- 生成器是一种特殊的迭代器\n- 如果一个函数中有`yield`语句，那么这个函数就不再是函数，而是一个生成器模板\n- 定义：生成器推导式\n  - 列表推导式：`[i for i in range(3)]`\n    - 把列表推导式的`[]` 改为 `()` 返回的就是一个生成器\n- 生成器的启动：让生成器从断点处继续执行，即唤醒生成器\n  - `next()`第几次启动都可以，但不能传参\n  - `obj.send(param)` 需要传参时使用，不能第一次启动时使用\n- 获取生成器数据用 `next(generator)`方法\n- 生成器数据全部取出后再次使用`next()`方法会报`StopIteration`错误\n- `yield`关键字有两个作用\n  - 保存当前运行状态，暂停执行，将生成器挂起\n  - 将`yield`关键字后面表达式的值作为返回值返回，此时类似`return`\n\n```python\ndef create_num(cnt):\n    a, b = 0, 1\n    cur_num = 0\n    while cur_num < cnt:\n        yield a\n        a, b = b, a + b\n        cur_num += 1\n\ngen_obj = create_num(10)  # 此时创建了一个生成器对象\nprint(gen_obj)  # <generator object create_num at 0x0000022C5899D510>\nprint([i for i in gen_obj])  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n```\n\n**协程 Coroutine**\n\n```python\n# 使用greenlet\n\nimport time\nfrom greenlet import greenlet\n\ndef t1():\n    while True:\n        print(\"----------A----------\")\n        gr2.switch()\n        time.sleep(1)\n\n\ndef t2():\n    while True:\n        print(\"----------B----------\")\n        gr1.switch()\n        time.sleep(1)\n\ngr1 = greenlet(t1)\ngr2 = greenlet(t2)\n\nprint(gr1, gr2)\ngr2.switch()\n\n\"\"\"\n<greenlet.greenlet object at 0x00000276263C30F0 (otid=0x00000276263A9EE0) pending> <greenlet.greenlet object at 0x00000276263C31A0 (otid=0x00000276263C7040) pending>\n----------B----------\n----------A----------\n----------B----------\n----------A----------\n...\n\"\"\"\n\n# 使用gevent碰到延时就切换到其他的greenlet去运行\nfrom gevent import monkey\nmonkey.patch_all()\n```\n\n### 1.6. 不同实现方式对比\n\n- 进程是资源分配的基本单位，切换需要资源最大，效率很低\n- 线程是操作系统调度的基本单位，切换需要的资源一般，效率一般(不考虑GIL的情况下)\n- 协程切换任务需要的资源很小，效率高\n- 多进程、多线程根据CPU核数不同可能是并行的，协程在一个线程中所以一定是并发的\n\n### 1.7. GIL锁\n\n> GIL（全局解释器锁）是一个在CPython解释器中的锁，用于确保同一时刻只有一个线程执行Python字节码。这是由于CPython的内存管理机制并不是线程安全的，因此GIL可以防止多个线程同时访问、修改同一块内存，从而避免了可能出现的数据竞争和内存错误。但同时，GIL也限制了Python多线程并行性能，在一些密集计算和多线程CPU密集型任务场景中表现不及其他语言和并发框架。\n\n> CPython解释器的内存管理机制是基于引用计数的垃圾回收，即对象被引用一次计数器加一，对象引用被释放计数器减一，当计数器变为0时，对象被回收。这种内存管理机制并不是线程安全的，因为多个线程可能同时访问和修改同一块内存，从而导致计数器不一致，或者对象被销毁多次，或者内存泄漏等问题。因此，为了避免这些问题，CPython引入了GIL锁来确保同一时刻只有一个线程执行Python字节码，从而保证内存管理的线程安全性。\n\n-   全局解释器锁\n-   保证同一时间, 只有一个线程使用CPU, 不管主子线程\n-   GIL的存在导致, python中只有进程是可以并行的, 多线程实际也是并发的\n-   一个进程有一个GIL锁\n-   GIL不是python的特性, 只是CPython解释器的概念, 历史遗留问题\n-   所以cpu超线程对python是没用的！比如2核4线程，一个python死循环会让cpu两个线程跑满(这里说的线程是硬件层面的技术，模拟多个逻辑CPU提高处理并发性能)\n\n  **GIL锁什么时候释放**\n\n-   当前线程执行超时后会释放\n-   当前线程阻塞操作时会自动释放(input, io/输入输出)\n-   当前执行完成时\n\n  **GIL的弊端**\n\n-   GIL对计算密集型的程序会产生影响。因为计算密集型的程序，需要占用系统资源。\n-   GIL的存在，相当于始终在进行单线程运算，这样自然就慢了。\n-   IO密集型影响不大的原因在于，IO，input/output，这两个词就表明程序的瓶颈在于输入所耗费的时间，线程大部分时间在等待，所以它们是多个一起等（多线程）还是单个等（单线程）无所谓的。\n\n  **解决方案：**\n\n  要提升多线程执行效率，解决方案：\n\n-   更换解释器\n-   改为进程替换多线程\n-   子线程使用C语言实现（绕过GIL锁）\n\n  **必须要知道的是：**\n\n-   CPU 密集(计算密集)型不太适合多线程\n-   I/O 密集型适合多线程/协程（Gil锁会释放）\n\n  \n\n## 2. 高级语法\n\n### 2.1. 闭包&装饰器\n\n```python\n\"\"\"闭包\n定义：函数嵌套的前提下，内部函数使用了外部函数的变量或参数，外部函数返回内部函数\n作用：保存外部函数内的变量, 不会随着外部函数调用结束而销毁，但消耗内存!\n\n\"\"\"\ndef outter0(a):\n    local_a = \"world\"\n    def inner(b):\n        print(f\"inner: {a}, {b} {local_a}\")\n    return inner\n\ndef t0():\n    foo = outter0(\"foo\")\n    foo(\"hello\")\n\n    goo = outter0(\"goo\")\n    goo(\"hello\")\n\n    # inner: foo, hello world\n    # inner: goo, hello world\n\n\ndef outter1(a=10):\n    print(f\"outter: {a}\")\n\n    def inner(b=10):\n        nonlocal a\n        a = a + b  # 此时默认是是取local vars不声名nonlocal会报UnboundLocalError\n        print(f\"inner a: {a}, b: {b}\")\n    return inner\n\n\ndef t1():\n    f = outter1()\n    f()\n    # outter: 10\n    # inner a: 20, b: 10\n\n\n\"\"\"\n装饰器：本质就是一个闭包函数（但要求闭包函数有且只有一个参数, 参数必须是函数类型）\n装饰器的执行事件是加载模块事立即执行 (在函数定义时候执行了), 所以一般外部函数内不写其他东西, 只有内部函数\n特点：\n    - 不修改已有函数的源代码\n    - 不修改已有函数的调用方式\n    - 给已有函数增加额外的功能\n\"\"\"\n\n# 通用装饰器(inner的参数为 *args, **kwargs也就是接收任意参数)\ndef outter2(f):\n    def inner(*args, **kwargs):\n        print(f\"inner: {args, kwargs}\")\n        res = f(*args, **kwargs)\n        print(f\"inner: {res}\")\n        return res\n    return inner\n\n\n@outter2  # 相当于执行了这句代码：func = outter2(func)\ndef func2(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\n\ndef t2():\n    func2(1, 2, d=5)\n    # inner: ((1, 2), {'d': 5})\n    # func: (1, 2, 3, 5)\n    # inner: hello world\n\n\n# 带有参数的装饰器：装饰器外再加一层闭包\ndef outter3(flag=False):\n    def outter2(f):\n        def inner(*args, **kwargs):\n            # 此时只是打印flag, 没修改不可变类型，不需要声名nonlocal\n            print(f\"inner: {args, kwargs}, {flag=}\")\n            res = f(*args, **kwargs)\n            print(f\"inner: {res}, {flag=}\")\n            return res\n        return inner\n    return outter2\n\n\n@outter3(True)\ndef func3(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\ndef t3():\n    func3(1, 2, d=4)\n    # inner: ((1, 2), {'d': 4}), flag=True\n    # func: (1, 2, 3, 4)\n    # inner: hello world, flag=True\n\n\n# 类装饰器\nclass Outter4:\n    \n    def __init__(self, f):\n        self.f = f\n    \n    def __call__(self, *args, **kwargs):\n        print(f\"inner: {args=}, {kwargs=}\")\n        res = self.f(*args, **kwargs)\n        return res\n\n@Outter4\ndef func4(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\n\ndef t4():\n    func4(1, 2, d=4)\n    # inner: args=(1, 2), kwargs={'d': 4}\n    # func: (1, 2, 3, 4)\n\n\nif __name__ == \"__main__\":\n    t4()\n\n```\n\n### 2.2. property\n\n**3. property属性**\n\n- property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用\n- 定义方式\n  - 装饰器方式\n  - 类属性方式\n\n```python\n# 类属性方式 \nclass Student(object):   \n\n    def __init__(self):     \n        self.__age = 0   \n\n    def get_age(self):     \n        return self.__age   \n\n    def set_age(self, value):    \n        self.__age = value\n\n    # 第一个参数是获取值的方法， 第二个是设置值的方法   \n    age = property(get_age, set_age)      \n\n\n# 装饰器方式\nclass Student(object):   \n\n    def __init__(self):\n        self.__age = 0\n\n    # 获取年龄\n    @property\n    def age(self):\n        return self.__age   \n\n    # 设置年龄\n    @age.setter\n    def age(self, value):     \n        self.__age = value  \n\n```\n\n### 2.3. with语句&上下文管理器\n\n- with 语句执行完成以后自动调用关闭文件操作, 即使出现异常\n- 一个类只要实现了``__enter__()``和``__exit__()``这个两个方法，通过该类创建的对象我们就称之为上下文管理器\n\n```python\n# 要实现上下文管理器， 要实现__enter__ 和 __exit__  \nclass File(object):   \n\n    def __init__(self, file_name, file_mode):\n        self.file_name = file_name\n        self.file_mode = file_mode\n\n        # 实现上文的方法，主要用来提供资源，需要返回一个对象\n        def __enter__(self):\n            print('entered up')\n            self.fp = open(self.file_name, self.file_mode)\n            return self.fp\n\n        \n        # 实现下文的方法，主要用来释放资源\n        def __exit__(self, exc_type, exc_val, exc_tb):\n            print('exited down')\n            self.fp.close()\n\n            \nwith File(\"a.txt\", \"w\") as f:\n    print('-' * 28)\n\n# entered up\n# ----------------------------\n# exited down\n```\n\n- 上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的，也就是说刚才使用 open 函数创建的文件对象就是就是一个上下文管理器对象\n- ``__enter__``表示上文方法，需要返回一个操作文件对象\n\n- `__exit__`表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法\n\n### 2.4. 深拷贝和浅拷贝\n\n- `import copy`拷贝的目的: 保证原数据和拷贝的数据之间不影响\n- **`copy.copy()` 浅拷贝**，只对可变类型的第一层对象进行拷贝，对拷贝的对象开辟新的内存空间进行存储，不会拷贝对象内部的子对象\n  - 不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用\n  - 可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝\n- **`copy.deepcopy()` 深拷贝**, 只要发现对象有可变类型就会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n  - 不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n  - 可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n- **浅拷贝最多拷贝对象的一层 (即使可变类型, 也只拷贝第一层) 其它情况都是拷贝引用**\n- **深拷贝可能拷贝对象的多层 (只要是有可变类型, 就全部拷贝) 其它情况都是拷贝引用**\n\n### 2.5. 单例\n\n```python\n# 只有一份内存空间\n# __new__ 开辟内存空间, 会在__init__之前执行 \n\nclass Singleton(object):   \n    is_instance = None   \n    def __new__(cls, *args, **kwargs):\n        if cls.is_instance is None:\n            # 保证下边代码执行一次\n            cls.is_instance = object.__new__(cls)\n            return cls.is_instance\n        else:\n            return cls.is_instance\n\n\na = Singleton()\nb = Singleton()\nc = Singleton()\n\n>>> id(a) == id(b) == id(c)\n>>> True\n\n```\n\n# 面试造飞机\n\n1. 生成器和迭代器的区别\n   1. **定义方式：**\n      - 生成器是一种特殊的函数，它使用 `yield` 关键字来定义，并在函数体内使用 `yield` 来产生值。生成器函数可以暂停执行，并在需要时恢复执行，每次恢复执行时会从上次暂停的位置继续执行。\n      - 迭代器是一个实现了迭代协议的对象，它包含 `__iter__()` 方法和 `__next__()` 方法。`__iter__()` 方法返回迭代器自身，而 `__next__()` 方法用于返回迭代器的下一个值，如果没有下一个值则抛出 `StopIteration` 异常。\n   2. **使用方式：**\n      - 生成器通常用于生成一个序列的值，它们可以通过 `for` 循环来迭代产生的值，也可以通过调用 `next()` 函数手动迭代。\n      - 迭代器则是一种更通用的迭代工具，它可以迭代任何实现了迭代协议的对象，包括列表、元组、集合等。迭代器可以通过 `iter()` 函数获取，也可以直接用于 `for` 循环中。\n   3. **内存占用：**\n      - 生成器是一种惰性求值（Lazy Evaluation）的机制，它只在需要时生成值，并且不会一次性将所有值存储在内存中，因此生成器在处理大量数据时具有较低的内存消耗。\n      - 迭代器通常需要将所有的值存储在内存中，因此在处理大量数据时可能会消耗较多的内存。\n   4. **可变性：**\n      - 生成器是不可变的，一旦定义完成后，生成器的值无法修改。\n      - 迭代器通常是可变的，可以在迭代过程中修改迭代器的状态，例如添加、删除元素等。\n   \n   综上所述，生成器和迭代器在 Python 中都是用于处理可迭代对象的工具，但它们的定义方式、使用方式、内存占用和可变性等方面有一些区别。生成器通常用于惰性生成值，而迭代器则是一种通用的迭代工具，用于迭代任意可迭代对象。\n   \n2. python内存管理(同GIL锁是cpython解释器的特性)\n   1. Python的内存管理机制主要依赖于引用计数来迅速释放不再使用的对象，同时通过垃圾回收来处理循环引用等特殊情况，保证内存的高效利用。这种自动内存管理的方式让开发者从手动管理内存的负担中解放出来，提高了开发效率。\n   2. 引用计数：Python使用引用计数来跟踪每个对象被引用的次数。当一个对象被创建或者另一个对象引用它时，引用计数就会增加。当一个对象的引用计数降为0时，表示没有任何变量指向该对象，那么该对象将成为垃圾，Python会回收这部分内存以供其他对象使用。\n      \n      - 引用计数的优点是在对象不再被引用时立即释放内存，因为没有等待垃圾回收器的运行。但是引用计数无法解决循环引用的问题（两个或更多的对象相互引用，导致它们的引用计数都不会降为0），为此，Python引入了垃圾回收机制。\n   3. 垃圾回收（Garbage Collection）： Python中的垃圾回收机制是为了解决循环引用以及其他无法通过引用计数检测的垃圾对象。Python采用了分代回收算法，将对象分为不同的代（generation）。新创建的对象位于第0代，每经过一次垃圾回收，存活的对象会晋升到下一代。随着对象存活时间的增加，回收的频率会降低，因为大部分对象很快就会变成垃圾，只有少数长时间存活的对象才需要耗费更多的垃圾回收时间。\n      - 标记-清除（Mark and Sweep）：垃圾回收器首先标记所有可以访问的对象，然后清除所有未标记的对象，释放其内存。\n      \n      - 分代回收（Generational Garbage Collection）：将对象按照存活时间分为不同的代，一般将新创建的对象放入第0代，存活时间更长的对象依次放入第1代、第2代，通过不同代之间的垃圾回收来提高效率。\n      \n      - 引用计数+标记-清除：综合利用引用计数和标记-清除算法，处理循环引用以及其他无法通过引用计数回收的对象。\n      \n      - **分代回收在处理循环引用的情况**时，通过为每个对象分配一个分代标记来解决这个问题。分代标记可以被划分为两种类型：线程局部分代标记（thread local allocation context）和全局局部分代标记（global allocation context）。\n      \n        当一个对象被创建时，Python内核会为其分配一个分代标记，并将该标记与对象一起存储。对于循环引用的对象，分代标记会被保持不变。当一个对象被销毁时，Python通过检查对象的分代标记来确定是否已经被回收。如果对象的分代标记未被其他地方引用，那么该对象已经不再被使用，并需要进行回收。\n      \n        为了避免不必要的循环回收，Python内核会记录每个对象是否已经被回收。一旦对象被回收，就不会再被释放，即使再次被检测到。这样可以确保只有一次地回收每个对象。\n\n3. tcp与udp区别\n   1. 连接：tcp是一种面向连接的协议，在数据传输前要先建立一个连接，UDP是无连接协议，不需建立连接\n   2. 可靠性：TCP提供可靠的数据传输，确保数据包在从发送端到接收端的传输过程中不会丢失、被改变或出现重复，UDP不保证数据传输可靠性，可能导致丢包、被改变或重复\n   3. 速度：由于TCP的可靠性和流量控制机制，传输速度相对UDP会慢很多\n   4. 设计目的：TCP适用于对数据传输可靠性和稳定性要求较高，如文件传输、电子邮件和网页浏览等，UDP更擅长对实时性要求较高的应用，如实时语音、视频通信，在线游戏等\n   5. 头部信息：TCP和UDP的头部信息分别为20字节和8字节。TCP的头部信息包括数据包的序号和个别流标记，用于确保数据包在传输过程的顺序和完整性。UDP的头部信息相对较少主要包括数据包的源端和目标端的IP地址和端口\n   \n4. https原理\n   1. SSL/TCS 密钥包括一个私钥和一个公钥\n   2. 当用户通过浏览器访问一个HTTPS页面，服务器首先向浏览器发送公钥，浏览器接收到公钥后，会使用它来加密数据（请求头和请求体），然后将加密数据发送回服务器\n   3. 服务器使用接收到的加密数据和自己的私钥来解密数据。\n   \n5. TCP3次握手4次挥手\n   1. 客户端向服务端发送一个SYN（初始化）包，表明希望建立一个连接\n   2. 服务端同意建立连接会回复SYN+ACK包，表示可以建立连接\n   3. 客户端回复ACK包，连接建立\n   4. 客户端向服务端发送一个FIN包，表明希望断开连接，进入终止等待1状态\n   5. 服务端向客户端回复一个ACK包，表示进入终止等待状态，此时可传数据\n   6. 服务端向客户端发送一个FIN包，客户端进入终止等待2状态\n   7. 客户端向服务端回复一个ACK包，客户等待超时时间后断开连接，服务端立刻断开连接\n   \n6. Flask路由原理\n\n   Flask 的路由原理主要基于装饰器和 Python 的函数式编程概念。具体来说，Flask 使用 @app.route() 装饰器将 URL 路径和视图函数绑定在一起。当接收到一个 HTTP 请求时，Flask 会根据请求的 URL 找到对应的视图函数，并执行该函数来处理请求。\n\n7. django处理csrf原理\n\n   Django处理CSRF的原理基本上是通过在每个页面加载时生成一个唯一的CSRF令牌，并将其存储在用户的会话中。当用户在表单中提交请求时，Django会验证请求中包含的CSRF令牌是否与用户会话中存储的令牌匹配，以确保请求来自于站点的合法来源。\n\n8. django cookie session原理\n\n   在Django中，会话（Session）是一种存储在服务器端的数据，用于在用户请求之间保持状态。Django通常使用基于cookie的会话来管理会话数据，其原理如下：\n\n   1. **会话数据存储：** 当用户首次访问Django应用时，Django会为该用户创建一个唯一的会话标识符（session ID），通常是一个随机生成的字符串。会话数据存储在服务器端的缓存中，默认情况下使用的是数据库缓存。会话数据可以包含任意类型的数据，例如用户的身份验证信息、用户偏好设置等。\n   2. **会话ID的传递：** 一旦会话数据存储在服务器端，Django会将会话ID发送给客户端浏览器，通常是通过一个名为`sessionid`的cookie。这个cookie包含了用户的会话ID，用于在后续的请求中标识用户的会话数据。\n   3. **请求中的会话ID提取：** 当用户在浏览器上发送新的请求时，浏览器会自动将之前设置的`sessionid` cookie包含在请求头中。\n   4. **会话数据的检索：** Django在处理请求时会检查请求头中是否包含`sessionid` cookie，如果包含，Django会使用该会话ID来检索对应的会话数据。\n   5. **会话数据的使用：** 一旦会话数据被检索到，Django会将其提供给视图函数，以便在视图中使用。开发人员可以在视图中读取和修改会话数据，从而实现跨请求的状态保持。\n   6. **响应中的会话ID更新：** 如果在处理请求时会话数据发生了变化，Django会在响应中将更新后的会话ID发送给客户端浏览器。这是为了确保会话ID的安全性，以及避免可能的会话固定攻击（Session Fixation Attack）。\n\n   通过这种方式，Django使用基于cookie的会话机制来管理用户会话数据，从而实现了用户状态的保持和跨请求的数据传递。这种机制是一种常见的Web应用程序开发中用于处理用户状态的方式。\n\n\n\n# TIPS\n\n字典无序性: 在Python 3.7及之前的版本中，字典元素的顺序是不确定的，即它们的存储顺序与插入顺序不一定一致。但是从Python 3.7开始，字典保留了元素插入的顺序。这意味着当你迭代字典时，它们的顺序将与你添加键-值对的顺序相同。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/python从入门到放弃.md","raw":"---\ntitle: python从入门到放弃\ndate: 2023-06-30 11:14:42\ntags: python\n---\n\n# 一. 基础\n\n- 编译型语言\n  - 定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。\n  - 白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了\n  - 示例：C++、Go、Java\n- 解释型语言\n  - 定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。\n  - 白话定义：每次运行都会从第一行进行编译,编译一行执行一行\n  - 示例：Python、JavaScript、Ruby \n\n## 1. 基中基\n\n### 1.1. 关键字\n\n| 关键字                                       | 涉及功能                         |\n| -------------------------------------------- | -------------------------------- |\n| True, False, None                            | 真 假 空                         |\n| if, elif, else, and, not, assert, or, is, in | 逻辑判断                         |\n| try, except, finally, raise                  | 异常捕获                         |\n| for, while, continue, break, return          | 循环                             |\n| from, import                                 | 导包                             |\n| def, class, lambda                           | 定义函数、类、匿名函数           |\n| async, await, yield                          | 异步                             |\n| global, nonlocal                             | 变量空间                         |\n| as, del, pass, with, type                    | 重命名、删除、PASS、上下文、类型 |\n\n### 1.2. 逻辑运算符\n\n- 与 `and`: 一假即假\n- 或 `or`: 一真即真（注意短路逻辑： `1 or 1 / 0` 不会报错，程序只会走第一个1然后就会执行下一行）\n- 非 `not`: 真假取反\n\n### 1.3. 比较运算符\n\n- `//` 取整除 9 // 4 = 2\n\n- `%` 取余 9%4 = 1\n\n- `^`   取异或  把数字转化为二进制取  0 1 为 1 ，1 0 为 1， 1 1 为1， 0 0 为 0\n\n- `**`  幂\n\n### 1.4. 比较运算符\n\n- `> < == != >= <=`\n\n- 返回的结果都是bool类型, True表示条件成立, False表示不成立.\n\n### 1.5. 输入输出\n\n- `print()` 调用底层的`sys.stdout.write`方法，前往控制台打印输出\n\n- `input()`  无论输入什么类型的数据，都会转化为字符串\n\n### 1.6. 循环\n\n- 循环语句结合`else`语句使用，当循环语句执行了`break`表示非正常结束，`else`语句不会执行，否则会执行`else`语句\n\n- 循环语句里有`break/return`时, `break/return`执行了, `else`语句就不会执行\n- `break/continue` 只影响一层循环 \n\n### 1.7. if三目运算\n\n- `a if a > b else b` 条件成立取a，不成立取b\n\n- if 除了判断bool类型, 还可以判断\n  - 容器类型(字符串, 列表, 元组, 字典, 集合, `range()`, `bytes()`) 判断是否有数据\n  - 非零即真(只要不是0, 条件都成立)\n  - None 条件不成立, not none, 表示非空, 条件成立\n\n### 1.8 注释\n\n- 单行 `# 这是注释`\n- 多行 `\"\"\" 这是多行注释 \"\"\"`\n\n## 2. 容器\n\n### 2.1. 字符串\n\n> **字符串用`join`比直接`+`高效原因**：在 Python 中，字符串是不可变类型，这意味着一旦我们创建了一个字符串对象，它就不能被修改或更新。因此，每次使用 `+` 操作符拼接字符串时，都会创建一个新的字符串对象，并将之前字符串对象的内容复制到新的字符串对象中，这个复制的操作会带来额外的内存分配和内存拷贝的开销，特别是在需要拼接大量的字符串时，会消耗大量的系统资源，导致程序运行缓慢。 相对地，使用 `join()` 方法的拼接字符串操作则更加高效。`join()` 方法本质上是将多个字符串通过指定的分隔符拼接在一起，而与此相关的方法包括 `split()`，`replace()` 和 `format()` 等方法，它们均采用类似的算法。在 `join()` 方法的实现中，Python 的解释器会先在内存中分配一个足够大的单个字符串缓冲区，然后扫描要拼接的字符串，将其复制到单个缓冲区中，并在不同字符串之间插入指定的分隔符。这种方法可以有效地避免频繁创建或拷贝字符串对象，从而提高拼接字符串的效率。 此外，`join()` 方法还可以接受一个可迭代对象作为参数，如列表，元组，生成器等，它们会返回一个字符串，其中可迭代对象按照指定的分隔符进行拼接。这种方式具有更高的灵活性和实用性，因为它可以用于拼接任意数量的字符串，而且可以用于迭代较大的数据集合，而不会导致系统资源消耗过多。\n\n- 定义：用单引号、双引号、三引号均可，仅三引号可以换行\n- 切片：` [开始位置:结束位置:步长] ` 左闭右开\n  - `[::-1]` 字符串快速逆置\n\n```python\nmy_str = \"python\"\nisinstance(my_str, str)  # True\n\nmy_age = 18\nisinstance(my_age, int)  # True\n\nmy_age = str(my_age)  # \"18\"\nisinstance(my_age, str)  # True\n```\n\n**常用**\n\n- `.find(要查询的字符, 查询开始索引, 查询结束索引)` 左闭右开，查空返回 -1\n- `.replace(str1, str2, 替换次数)` 字符串替换，替换次数默认-1全部替换\n- `.split(str1, 切片次数)` 字符串以 str1 为分隔符进行切片，切片次数默认-1全部切，返回分隔后的列表\n- `.lower()` 英文转小写 `upper()`转大写\n\n### 2.2. 列表\n\n**定义**：`[]` 或 `list()` \n\n**列表推导式**： 列表中可以包含条件语句，表示筛选符合条件的元素。在这种情况下，底层逻辑还会涉及以下步骤：\n\n1. 创建一个空列表。\n2. 对于列表推导式中的每个元素表达式，按照迭代顺序依次执行以下步骤：\n   1. 在当前作用域中计算元素表达式的值。\n   2. 如果条件表达式的值为真，则将计算得到的值添加到列表中。\n3. 返回最终生成的列表。\n\n**增**\n\n- `.append` 加整个对象，加字典也是整个字典\n- `.extend` 打散加进去，加字典默认加字典的`key`\n- `.insert(index, obj)` 在指定位置前面加, 是整个加进去的\n\n**删**\n\n- `del list[::]` 可以和切片一起操作根据索引删除列表元素\n\n- `.pop()` 只能根据单独索引删除对应元素, 默认删最后一个, 会返回删除的元素\n\n- `.remove()` 指定元素删除\n\n**改**\n\n`list[index] = \"new\"`  可以用切片同时更改多个数据,注意下面示例\n\n```python\n>>> my_list = [1, \"2\", 3]\n>>> my_list[0] = \"1\"\n>>> my_list\n['1', '2', 3]\n>>> my_list[:0] = \"456\"\n>>> my_list\n['4', '5', '6', '1', '2', 3]\n>>> my_list[:2] = [1, 2]\n>>> my_list\n[1, 2, '6', '1', '2', 3]\n```\n\n**查**\n\n- `in` 判断是否存在，只可判断最外层数据，内层还有容器要索引进去查\n- `.index(obj, start, end)` 左闭右开，找不到报`ValueError`\n- `.count(obj)`\n\n**排序**\n\n- `.sort(reverse=False)` 默认是从小到大, `reverse=True` 改为从大到小\n\n- `.reverse()` 将列表逆置, 与上面的`reverse=True`不同\n\n### 2.3. 元组\n\n**定义**：`tuple()` 或 `(1, 2)`  如果只有一个元素, 逗号不能省略, 有序\n\n### 2.4. 字典\n\n**定义**\n\n- `dict()` 或 `{\"a\": 1, \"b\": 2}`\n- `zip`组合`key`和`value` 生成字典\n\n```python\n>>> keys = [\"a\", \"b\"]\n>>> values = [1, 2]\n\n>>> my_dict = dict(zip(keys, values))\n>>> my_dict\n{'a': 1, 'b': 2}\n```\n\n**增:**   \n\n- `dict[key] = value`\n\n**删:**   \n\n- `del dict[key]`  必须要有`key`数据\n\n- `.pop(key, default)`  必须要有`key`数据, 会返回所删项的`value`, 如果字典里没有这个`key`就会返回`default`\n\n- `.popitem()`  takes no arguments, return the last item as a tuple()\n\n- `.clear()` 清空\n\n**改:**  \n\n-  `dict[key] = value`  和增加元素相同, 所以当原本没有此`key`就变成增加元素了\n\n**查:**   \n\n- `dict[key]`  如果不存在会报错\n\n- `.get(key, default)`   如果不存在则返回`default`  不写`default`找不到会返回`None` 不会报错\n\n**合并:**  \n\n- `dict1.update(dict2)`  把字典2的每个键值对数据合并到字典1中, 如果有重复的则更新1的内容\n\n**遍历:** \n\n- `for key in dict.keys()`\n- `for values in dict.values()`\n- `for item in dict.items()`           **item是个tuple**\n- `for key, value in dict.items()`         遍历 + 拆包\n\n**排序：**\n\n- `sorted(d.items(), key=lambda x : x[0/1])`\n\n### 2.5. 集合\n\n- 集合是一个容器类型, 可以存储多个数据, 但是多个数据不能重复\n- 集合只能存储不可变类型数据, 也就是: 数字, 字符串, 元组    同字典的key\n- 空集合不能使用**{}**来表示, {}是字典, 创建时用 **set()** 来创建空集合\n- 遍历集合不能用通过下标, 可以用for遍历, 可迭代对象\n\n**特点:**\n\n1. 无序, so集合不能通过索引获取数据和通过索引修改数据\n2. 数据不能重复,数据是唯一的\n3. 可变类型\n\n**操作符：**\n\n**^**  补  {1，2} ^ {2, 3}  =>  {1, 3}\n\n**&** 交  {1，2} & {2, 3}  =>  {2, }\n\n**|**   并   {1，2} | {2, 3}  =>  {1, 2, 3}\n\n**-**   差   {1，2} - {2, 3}  =>  {1, }\n\n**增:**\n\n.**add()** 重复的数据只保留一个\n\n**删:**\n\n**.remove(value)** 指定数据删除\n\n### 2.6. 公共方法\n\n| 运算符 | Python 表达式      | 结果                         | 描述           | 支持的数据类型           |\n| ------ | ------------------ | ---------------------------- | -------------- | ------------------------ |\n| +      | [1, 2] + [3, 4]    | [1, 2, 3, 4]                 | 合并           | 字符串、列表、元组       |\n| *      | ['Hi!'] * 4        | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 复制           | 字符串、列表、元组       |\n| in     | 3 in (1, 2, 3)     | True                         | 元素是否存在   | 字符串、列表、元组、字典 |\n| not in | 4 not in (1, 2, 3) | True                         | 元素是否不存在 | 字符串、列表、元组、字典 |\n\n**python内置函数**\n\n- `len()`  获取容器的元素数量\n\n- `max()`  返回容器中元素最大值  |  类似的 `min()`  最小\n\n- `enumerate()` \n  - 在使用for循环的时候可以遍历数据又可以遍历索引, 列表/元组/字典都可以使用\n  - 当用于字典遍历所有items时返回的是一个索引数据和一个元组\n\n### 2.7. 可变不可变类型\n\n不可变类型\n\n- 定义：不允许在原本内存空间基础上修改数据, 修改数据后内存地址会发生变化\n- 示例：列表, 字典, 集合\n\n可变类型\n\n- 定义：允许在原本内存空间修改数据，修改后一是在原有内存空间基础上修改数据内存不变，二是重新赋值内存地址可能发生变化\n- 示例：数字, 字符串, 元组  \n\n## 3. 函数\n\n> 程序中定义的变量都是保存在内存中的, 局部变量也是, 当函数执行结束后局部变量都会销毁,内存释放\n\n### 3.1. 文档说明\n\n```python\ndef show():\n    \"\"\" func docs \"\"\"\n    # ''' others '''\n    print(\"life is short i use python\")\n\n\nshow()\nhelp(show)\n# life is short i use python\n# Help on function show in module __main__:\n# \n# show()\n#     func docs\n```\n\n### 3.2. 返回值\n\n- 函数不写`return` 取函数返回值时会取到 `None`\n- 在多层循环中 `return` 可把多层全部终止，`break` 只能终止一层\n\n### 3.3. 局部变量&全局变量\n\n- 局部变量：作用域仅在函数体内部,  随着函数执行结束会销毁\n- 全局变量：在函数体内外都生效，不会随着函数执行结束会销毁\n\n- `global` 本质是表示:  要修改全局变量的内存地址, 所以只有不可变类型需要`global`\n- 在函数内部使用全局变量时, 要先声明 `global` 全局变量, 如果是可变类型就不需要了\n- 对于操作全局变量的数据, 如果是通过重新赋值来完成的, 那么必须加上`global`关键字\n- `nonlocal` 使用场景是函数嵌套时，内层函数要使用外层函数的变量或参数\n\n```python\na = 1\nb = [1]\n\ndef t():\n    global a\n    a = 2\n    b.append(2)\n    print(a, b)\n\nt()\nprint(a, b)\n# 2 [1, 2]\n# 2 [1, 2]\n```\n\n### 3.4. 函数参数\n\n- 分类\n\n  - 位置参数：按照位置顺序依次给函数的参数传值\n\n  - 关键字参数：按照关键字名给函数的参数传值\n\n  注：前面按位置, 后面按关键字, 如果前面用了关键字参数, 后面不能再使用位置参数, 只能使用关键字参数传参\n\n- 不定长参数: 函数的参数个数不确定, 可能0个, 可能多个\n\n  - 不定长位置参数, `*args`, 调用函数时所有位置参数都封装成元组, 赋值给`args`\n  - 不定长关键字参数, `**kwargs`, 调用函数时所有关键字参数都封装成字典, 赋值给`kwargs`\n\n  注: `*args` 和 `**kwargs` 这两个参数名可以修改, 但一般不改, 大家习惯了\n\n```python\ndef show(name, *args, age=18, **kwargs):\n    print(\"name:\", name, \"age:\", age, \"args:\", args, \"kwargs:\", kwargs)\nshow(\"李四\", 1, 2, \"a\", a=1, b=2, age=20)\n\n# name: 李四 age: 20 args: (1, 2, 'a') kwargs: {'a': 1, 'b': 2}\n```\n\n- **拆包**：使用不同变量保存容器类型中的每个数据，对应的变量和数据数量要保持一致致\n\n  -  容器类型如:字符串, 列表, 元组, 字典, range, 集合(set) 都可以利用拆包, 容器类型可以使用变量保存不同的数据\n\n  - `*my_tuple`: 对元组/列表进行拆包, 也就是把元组/列表里每个数据按位置参数进行传参\n  - `**my_dict`: 对字典进行拆包, 也就是把字典里面的每一个键值对按关键字的方式进行传参\n\n### 3.5. 匿名函数\n\n定义：没有名字的函数, 就是匿名函数, 匿名函数返回值不需要 `return`，用` lambda` 定义\n\n格式:  `lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用]`\n\n```python\n>>> my_func = lambda a: print(a)\n>>> my_func(\"hello world\")\nhello world\n```\n\n### 3.6. 常见函数定义\n\n- 递归函数: 在一个函数内调用的是函数本身, 这样的函数称为递归函数\n- 函数嵌套：python中, 可以在函数内部再定义一个函数, 称为函数的嵌套（例：装饰器）\n- 高阶函数：函数的参数或者返回值是一个函数类型, 那么这样的函数就叫高阶函数（例：装饰器）\n\n## 4. 文件\n\n### 4.1. 常识\n\n- 在windows的python解释器里面, 打开文件默认的编码格式是 `gbk` 的\n\n- 在mac和linux的解释器里面, 打开文件默认的编码格式是 `utf-8` 的\n\n- `utf-8` 一个汉字占用三个字节, 一个字母占1个字节\n\n- 编码:  `.encode(\"utf-8\")`\n\n- 解码:  `.decode(\"utf-8\")`\n\n## 5. 面向对象\n\n> 面向对象就是对面向过程的封装\n>\n> **面向对象的三大特性**\n>\n> **封装:** 把属性和方法放到类里面的操作就是封装, 封装可以控制属性和方法的访问权限\n>\n> **继承:** 子类可以使用父类的方法或者属性, 提高了代码的复用性, 注意点: 父类的功能满足不了子类的需要, 重写父类的方法\n>\n> **多态:** \n>\n> - 对象调用同一个方法会出现不同的表现形式(表现结果)\n> - 多态的好处, 代码的可扩展性强, 代码兼容性强, 不关系类型, 只关系对象是否具有指定功能方法\n\n### 5.0. 类的实例化过程\n\n1. 内存分配：Python为对象分配所需的内存空间。\n\n2. 初始化实例：调用类的__init__方法来初始化实例。__init__方法是类中一个特殊的方法，它在实例化对象时被自动调用。\n\n3. 创建对象引用：创建一个指向该实例的引用，允许你通过变量来访问该实例。\n\n4. 执行__new__方法（可选）：如果定义了__new__方法，它将在__init__之前被调用。__new__方法负责创建实例。\n\n5. 返回实例：返回一个指向新实例的引用，使你可以使用该引用来操作该实例。\n\n总结起来，实例化一个类时，Python会为对象分配内存空间，然后调用__init__方法初始化实例，最后返回新实例的引用。这样，就可以通过该引用来操作和访问该实例的属性和方法。\n\n### 5.1. 魔法方法\n\n**定义**：方法名前后都有两个下划线, 这样的方法称为魔法方法, 魔法方法具有一定的特殊功能\n\n**常见魔法方法**：\n\n- `__new__` 分配内存的方法, 在`__init__`之前调用\n\n- `__init__`, 在创建一个对象时默认被调用,不需要手动调用, 可以在此方法内添加对象属性\n\n- `__del__`, 创建对象后, python解释器默认调用`__init__`方法, 当删除对象时, python解释器也会默认调用`__del__`方法\n\n- `__str__`, 当使用`print`输出对象的时候, 默认打印对象的内存地址, 如果类定义了此方法,那么就会打印从在这个方法中`return`的数据, 此方法返回必须是字符串类型, 作为这个对象的描述信息. \n\n- `__slots__`方法, 限定自定义类型的的对象只能绑定某些属性, 只对当前类对象生效, 对子类并不起任何作用\n\n- `__enter__`表示上文方法，需要返回一个操作文件对象\n\n- `__exit__`表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法\n\n**对象销毁的方式**:\n\n- 程序运行结束, 程序中所使用对象都要在内存中销毁\n\n- 当对象没有变量使用的时候, 该对象就会被销毁, 引用计数为0时会销毁\n\n### 5.2. 继承\n\n**语法**：`class 子类名(父类名):`  / `class 子类名(父类1, 父类2):`\n\n**说明**：子类复用父类里面的属性或方法,  提高代码的复用性,  能够使用父类里面的方法或者属性, 包括`__init__`方法\n\n**常识：**\n\n- 父类也称为基类,  子类也称为派生类\n\n- 单继承：子类只继承一个父类\n- 多继承：子类继承多个父类, 可以使用多个父类里的方法\n  - `.mro()`  方法可查看类的继承顺序\n- 多层继承：只要有类继承关系, 子类对父类及所有上层父类的方法都可以使用\n\n- 继承后方法的调用：先从本类查找, 依次往后查找, 找到就停, 如果没找到对应方法, 程序崩溃\n- 重写：子类继承父类, 对父类的功能方法进行重新改造（子类方法名要和父类方法名相同）\n\n**子类调用父类方法：**\n\n- `self.方法()` : 当子类没有这个方法时候才可以用, 子类有相同方法时用`父类的类名.方法(self)`\n\n- `父类的类名.方法(self)` :  类名调用对象方法, 需要自己手动传入self参数, 对象调用对象方法, 不需要传self参数\n\n- `super().方法()` :  `super`是一个类, `super()`表示创建了一个父类对象, 通过`__init__`方法给对象添加属性 \n\n  - 完整写法 `super(子类名称, self).父类方法()`  : 指定类名, 根据子类获取对应父类\n\n  -  super本质: 根据指定类 在类的继承顺序**类名.mro()**中获取下一个类, 然后调用下一个类的方法, 如果是单继承, super的调用可以认为是调用的是父类的方法\n\n### 5.3. 私有权限\n\n1. 在属性名和方法名前加两个下划线\n2. 私有属性和私有方法只能在本类中使用, 不能在类外部使用\n3. 其实私有属性及方法只是对属性名和方法名进行了包装, 把名字进行了修改\n4. 总结: 私有属性和方法 的包装格式: 在属性名和方法名前面加 `_本类类名__`\n5. 子类无法使用父类的私有属性和私有方法, 也是把名字做了包装, 同上\n6. 给对象添加私有属性只能在`__init__`方法里面完成\n\n### 5.4. 类属性和实例属性\n\n- **类属性**: 在类的内部init方法外部定义的属性, 类属性属于类\n\n- - **私有类属性**: 类名前加两个下划线, 也是把名字做了包装, 实际同对象的私有\n\n- **实例属性**: 在init方法内部定义的属性称为实例属性, 实例属性属于实例  (实例 == 对象)\n\n- **类不能访问对象属性, 但是对象可以访问类属性(对象不能修改类属性, 只能类去修改)**\n- **总结**: 对象属性的操作是由对象完成, 类属性操作由类来完成, 只不过对象可以访问类属性(也可以用 **self.__class__.类属性** 修改类属性, 用class找到类然后是类去修改类属性), 类不能访问对象属性\n\n### 5.5. 类中方法的种类\n\n- **实例方法**: 方法的第一个参数是self, 那么这样的方法就是对象方法, self表示当前对象, 实例方法, 类不能调用\n- **类方法**(修改和获取类的私有属性时使用): 方法第一参数cls并且还需要使用`@classmethod`的关键字进行修饰, cls表示当前类, 类方法可以获取和修改类的私有属性, 类方法类和对象都可以调用\n\n- **静态方法**: 方法里没有self和cls参数并且还需要使用`@staticmethod`的关键字进行修饰\n\n## 6. 异常&模块\n\n### 6.1. 异常\n\n**异常捕获` try...except...`**\n\n- `try` 表示尝试执行可能出问题的代码, `except` 表示如果代码出现异常, 进行捕获 `as e:`\n- 捕获异常类型的通用写法就是用`Exception`,  因为大多数异常类型都是最终继承`Exception`的\n- `BaseException` 可以捕获任何异常\n\n**`try...except...else...finally`**\n\n- `except` 与 `else` 互斥,  `finally`不管有没有异常都执行\n\n**异常的传递**\n\n- 当执行代码的时候遇到错误, 首先判断当前代码块对异常进行捕获, 如果没有, 那么再把异常一层一层往外传递, 如果外界的都没对异常的捕获, 程序就会崩溃, 如果有异常捕获, 就不会崩溃了\n\n**自定义异常**\n\n- class定义自定义异常类, 必须继承`Exception`或者`BaseException`才可以\n- 抛出自定义异常使用关键字`raise`\n- 注意:raise只能抛出异常类的对象\n\n### 6.2. 模块\n\n **通俗理解模块就是一个 .py 文件, 模块里面可以定义具体的功能代码(类, 函数, 全局变量, 匿名函数等等)**\n\n```python\n# 查看导入模块的搜索路径 \nimport sys \n\nprint(sys.path)       \n```\n\n- 模块好比一个工具箱, 模块里的每一个具体代码好比一个工具\n- 模块的命名规则和变量名的命名规则一样 使用下划线命名\n- 模块名的组成和变量名组成一样, 字母, 数字, 下划线开头, 如果以数字开头, 这个模块就不能使用了\n\n**导入模块的两种方式**\n\n- import 模块名  as 别名\n- from 模块名 import 功能代码(函数, 类, 全局变量)   as 别名\n- from 模块名 import *  导入模块里所有功能代码 一般不这样使用\n\n**导入模块注意点**\n\n- 自制的模块名不要和系统的模块重名\n- 使用from 模块名 import 功能, 在当前模块不要再定义导入功能的代码, 否则会覆盖之前导入功能代码\n\n**自制模块**\n\n- __all__ 指定导入对应的功能代码  __all__ = [类名, 类名.....]  all定义针对外界使用from 模块名 import * 导入,  只能导入all里面指定的功能代码\n\n**主模块名字**: __main__  \n\n**导入的模块名字**:  就是模块原本的名字\n\n**包:** **通俗理解只要文件夹里包含一个__init__.py文件, 那么这个文件夹就是包**\n\n- 包的作用: 包是用来管理不同模块的 \n- 模块的作用: 模块是用来管理不同功能代码的\n- 包名的命名规则和变量名一样, 使用下划线命名法\n- 包名的组成和变量名的组成一样, 数字, 字母, 下划线 不能数字开头\n- **包的特点**:\n\n- - 包里面有一个__init__.py文件,这是包的初始化文件, 当且仅当第一次导入包的时候会执行这个文件\n  - __init__.py 其实就是包的象征文件\n  - __init__.py 可以控制模块的导入行为\n  - __init__.py 可以定义类, 函数, 全局变量等代码\n\n**包的导入目的使用包里面的模块**\n\n**格式**: \n\n- import 包名  指定导入包, 用包调用模块, 使用模块中的功能代码 第一次导入包的时候会默认调用__init__.py  \n- import 包名.模块名\n- from 包名 import 模块名\n- from 包名 import 模块名 as 模块别名\n- from 包名 import *      默认不是导入包里所有模块, 需要在__init__.py中使用__all__去指定\n\n# 二. 高级\n\n## 1. 多任务\n\n### 1.1. 常识\n\n- 多任务的目的：充分利用CPU资源，提高执行效率\n\n- 时间片：内核分配给程序执行的一小段时间，这个时间内进程拥有cpu资源\n\n- 同步：协同步调，按预定的先后次序进行运行。如：你说完，我再说\n\n- 进程、线程同步：可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行; B执行，再将结果给A; A再继续操作\n\n- 进程状态: 等待状态不占用时间片, 即使时间片有剩余也会退出不占用CPU资源, 只有运行状态才占用CPU资源\n\n  ![image-20230704132442670](..\\images\\image-20230704132442670.png)\n\n### 1.2. 执行形式\n\n- 并发：在一个时间段内，交替的执行多个任务，任务数 > CPU核心数，时间片轮转\n- 并行：在一个时间点，多核CPU同时执行多个任务，任务数 < CPU核心数\n- 一般情况下，并发和并行同时存在\n\n### 1.3. 实现方式：进程\n\n- **进程是操作系统进行资源(CPU、内存)分配的基本单位**\n- 程序中至少有一个进程，这个进程称为主进程\n- 主进程会等待所有子进程执行结束再结束\n  - 如果子进程没执行完，主进程会一直等待，此时如果子进程进入死循环会导致主进程无法退出解决办法：\n    - 设置子进程为守护主进程，主进程退出时子进程直接销毁: `sub_process.daemon = True`\n    - 主进程退出前先销毁子进程: `sub_process.terminate()`\n- 每个进程中至少有一个线程，这个线程称为主线程\n- 进程间不共享全局变量\n- 进程之间执行也是无序的，由操作系统调度决定\n\n```python\n# 进程创建子进程时程序会复制一份代码去跑(也就是说操作系统会再次进行资源分配，所以创建出来的子进程所拥有的内存是和创建它的进程的内存是不同的，所以不可能共享全局变量)\n# 打印全局变量id可发现变量的内存地址是不同的\nimport time\nimport multiprocessing\n\n\nmy_list = []  # 列表可变类型，为全局变量\n\n\ndef read_val():\n    print(f\"reading list: {my_list}, id: {id(my_list)}\")\n\n\ndef write_val():\n    for i in range(3):\n        my_list.append(i)\n        print(f\"writed.....{my_list}, id: {id(my_list)}\")\n        time.sleep(0.5)\n\n\n# 创建子进程时：linux和mac不会拷贝主进程执行的代码，但windows会拷贝主进程代码并执行，所以对windows来说创建子进程的代码会发生递归执行而报错，需要把此部分代码放在__name__ == \"__main__\"判断下（判断主模块的代码只会执行一次），linux和mac就不需要\nif __name__ == \"__main__\":\n    read_task = multiprocessing.Process(target=read_val)\n    write_task = multiprocessing.Process(target=write_val)\n\n    write_task.start()\n    read_task.start()\n```\n\n### 1.4. 实现方式：线程\n\n- 线程是进程中执行代码的一个分支，每个线程想到执行代码需要CPU进行调度\n- **线程是CPU调度的基本单位**，每个进程至少有一个线程，称为主线程\n- 主线程会等待所有子线程结束再结束\n  - `sub_thread.setDaemon(True)`\n  - `threading.Thread(target=task, daemon=True)`\n- 线程执行时无序的, 谁抢到CPU, 谁就执行\n- 线程之间共享全局变量，因为在同一进程里面，所以使用的内存资源是相同的，这会导致数据错乱问题，解决方案\n  - 线程等待 `sub_thread.join()`\n  - 互斥锁：对共享数据进行锁定，保证同一时刻只有一个线程操作共享数据\n  - 以上两种方法都是把多任务改成单任务去执行，保证了数据的准确性，但执行效率会下降\n\n```python\nimport time\nimport threading\n\n\ndef sing(name):\n    cur_thread = threading.current_thread()\n    print(f\"sing: {cur_thread}\\n\")\n    for _ in range(3):\n        print(f\"singing {name}... \\n\")\n        time.sleep(0.2)\n\ndef dance():\n    cur_thread = threading.current_thread()\n    print(f\"dance: {cur_thread}\\n\")\n    for _ in range(3):\n        print(\"dancing... \\n\")\n        time.sleep(0.2)\n\ndef tutorial0():\n    \"\"\"线程无序\"\"\"\n    main_thread = threading.current_thread()\n    print(f\"main thread: {main_thread}\")\n\n    sing_thread = threading.Thread(target=sing, args=(\"正月十八\", ))\n    dance_thread = threading.Thread(target=dance)\n\n    sing_thread.start()\n    dance_thread.start()\n\n\n# 线程之间共享全局变量\ng_list = []\n\n\ndef add_data():\n    for i in range(3):\n        g_list.append(i)\n        print(f\"added, {g_list}\\n\")\n\n\ndef read_data():\n    print(f\"read data {g_list}\\n\")\n\n\ndef tutorial1():\n    \"\"\"线程共享全局变量\"\"\"\n    add_thread = threading.Thread(target=add_data)\n    read_thread = threading.Thread(target=read_data)\n\n    add_thread.start()\n    read_thread.start()\n\n\ng_num = 0\nlock = threading.Lock()\n\n\ndef add_num0():\n    lock.acquire()\n    for _ in range(100_0000):\n        global g_num  # int不可变要用全局需要声名\n        g_num += 1\n    print(f\"add0: {g_num}\")\n    lock.release()\n\n\ndef add_num1():\n    lock.acquire()\n    for _ in range(100_0000):\n        global g_num  # int不可变要用全局需要声名\n        g_num += 1\n    print(f\"add1: {g_num}\")\n    lock.release()\n\n\ndef tutorial2():\n    \"\"\"数据保护\"\"\"\n    thread0 = threading.Thread(target=add_num0)\n    thread1 = threading.Thread(target=add_num1)\n\n    thread0.start()\n    # thread0.join()  # 线程等待 在0执行完再向下执行\n    thread1.start()\n\nif __name__ == \"__main__\":\n    tutorial2()\n\n```\n\n### 1.5. 实现方式：协程\n\n**迭代器 Iterator**\n\n- 可迭代对象(Iterable)定义：包含 `__iter__` 方法\n  - 可迭代对象不一定是迭代器，但迭代器一定是可迭代对象\n\n```python\n# 判断一个对象是否可迭代\nfrom collections import Iterable\n\nisinstance(A, Iterable)\n```\n\n- 迭代器定义：包含 `__iter__` 和 `__next__` 方法\n  - 迭代是访问集合元素的一种方式\n  - 迭代器是一个可以记住遍历位置的对象\n  - 迭代器对象从集合第一个元素开始访问，直到所有元素被访问结束\n  - 迭代器只能往前不能后退\n  - 迭代器可以节省内存空间，实现循环\n- 迭代器优点：存放生成数据的实现方式而不是具体数据，占用很少的内存空间\n\n```python\nfrom collections.abc import Iterable, Iterator\n\n\nclass ClassIterator:\n\n    def __init__(self, obj) -> None:\n        self.obj = obj\n        self.cur_num = 0\n\n    def __iter__(self):\n        pass\n\n    def __next__(self):\n        if self.cur_num >= len(self.obj.names):\n            raise StopIteration\n\n        res = self.obj.names[self.cur_num]\n        self.cur_num += 1\n        return res\n\n\nclass Classmate:\n\n    def __init__(self) -> None:\n        self.names = list()\n\n    def add(self, name):\n        self.names.append(name)\n\n    def __iter__(self):\n        \"\"\"想要一个对象称为一个 可迭代对象, 即可以用for遍历\n        必须要有此方法\n        \"\"\"\n        return ClassIterator(self)\n\n\n# iter返回self\nclass Fibonacci:\n\n    def __init__(self, nums) -> None:\n        self.nums = nums\n        self.cur_num = 0\n        self.a = 0\n        self.b = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.cur_num >= len(self.nums):\n            raise StopIteration\n        \n        res = self.a\n        self.a, self.b = self.b, self.a + self.b\n        self.cur_num += 1\n\n        return res\n\n\nif __name__ == \"__main__\":\n    classmate = Classmate()\n\n    classmate.add(\"foo\")\n    classmate.add(\"zoo\")\n    classmate.add(\"yoo\")\n\n    # iter方法会自动调用__iter__方法接收返回值, 其返回值就是迭代器也就是ClassIterator类创建的对象就是迭代器\n    classmate_iterator = iter(classmate)\n    print(isinstance(classmate_iterator, Iterator))  # 判断是否是迭代器 True\n\n    for i in classmate:\n        print(i)  # foo zoo yoo\n\n    print(isinstance(classmate, Iterable))\n\n```\n\n**生成器 Generator**\n\n- 生成器是一种特殊的迭代器\n- 如果一个函数中有`yield`语句，那么这个函数就不再是函数，而是一个生成器模板\n- 定义：生成器推导式\n  - 列表推导式：`[i for i in range(3)]`\n    - 把列表推导式的`[]` 改为 `()` 返回的就是一个生成器\n- 生成器的启动：让生成器从断点处继续执行，即唤醒生成器\n  - `next()`第几次启动都可以，但不能传参\n  - `obj.send(param)` 需要传参时使用，不能第一次启动时使用\n- 获取生成器数据用 `next(generator)`方法\n- 生成器数据全部取出后再次使用`next()`方法会报`StopIteration`错误\n- `yield`关键字有两个作用\n  - 保存当前运行状态，暂停执行，将生成器挂起\n  - 将`yield`关键字后面表达式的值作为返回值返回，此时类似`return`\n\n```python\ndef create_num(cnt):\n    a, b = 0, 1\n    cur_num = 0\n    while cur_num < cnt:\n        yield a\n        a, b = b, a + b\n        cur_num += 1\n\ngen_obj = create_num(10)  # 此时创建了一个生成器对象\nprint(gen_obj)  # <generator object create_num at 0x0000022C5899D510>\nprint([i for i in gen_obj])  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n```\n\n**协程 Coroutine**\n\n```python\n# 使用greenlet\n\nimport time\nfrom greenlet import greenlet\n\ndef t1():\n    while True:\n        print(\"----------A----------\")\n        gr2.switch()\n        time.sleep(1)\n\n\ndef t2():\n    while True:\n        print(\"----------B----------\")\n        gr1.switch()\n        time.sleep(1)\n\ngr1 = greenlet(t1)\ngr2 = greenlet(t2)\n\nprint(gr1, gr2)\ngr2.switch()\n\n\"\"\"\n<greenlet.greenlet object at 0x00000276263C30F0 (otid=0x00000276263A9EE0) pending> <greenlet.greenlet object at 0x00000276263C31A0 (otid=0x00000276263C7040) pending>\n----------B----------\n----------A----------\n----------B----------\n----------A----------\n...\n\"\"\"\n\n# 使用gevent碰到延时就切换到其他的greenlet去运行\nfrom gevent import monkey\nmonkey.patch_all()\n```\n\n### 1.6. 不同实现方式对比\n\n- 进程是资源分配的基本单位，切换需要资源最大，效率很低\n- 线程是操作系统调度的基本单位，切换需要的资源一般，效率一般(不考虑GIL的情况下)\n- 协程切换任务需要的资源很小，效率高\n- 多进程、多线程根据CPU核数不同可能是并行的，协程在一个线程中所以一定是并发的\n\n### 1.7. GIL锁\n\n> GIL（全局解释器锁）是一个在CPython解释器中的锁，用于确保同一时刻只有一个线程执行Python字节码。这是由于CPython的内存管理机制并不是线程安全的，因此GIL可以防止多个线程同时访问、修改同一块内存，从而避免了可能出现的数据竞争和内存错误。但同时，GIL也限制了Python多线程并行性能，在一些密集计算和多线程CPU密集型任务场景中表现不及其他语言和并发框架。\n\n> CPython解释器的内存管理机制是基于引用计数的垃圾回收，即对象被引用一次计数器加一，对象引用被释放计数器减一，当计数器变为0时，对象被回收。这种内存管理机制并不是线程安全的，因为多个线程可能同时访问和修改同一块内存，从而导致计数器不一致，或者对象被销毁多次，或者内存泄漏等问题。因此，为了避免这些问题，CPython引入了GIL锁来确保同一时刻只有一个线程执行Python字节码，从而保证内存管理的线程安全性。\n\n-   全局解释器锁\n-   保证同一时间, 只有一个线程使用CPU, 不管主子线程\n-   GIL的存在导致, python中只有进程是可以并行的, 多线程实际也是并发的\n-   一个进程有一个GIL锁\n-   GIL不是python的特性, 只是CPython解释器的概念, 历史遗留问题\n-   所以cpu超线程对python是没用的！比如2核4线程，一个python死循环会让cpu两个线程跑满(这里说的线程是硬件层面的技术，模拟多个逻辑CPU提高处理并发性能)\n\n  **GIL锁什么时候释放**\n\n-   当前线程执行超时后会释放\n-   当前线程阻塞操作时会自动释放(input, io/输入输出)\n-   当前执行完成时\n\n  **GIL的弊端**\n\n-   GIL对计算密集型的程序会产生影响。因为计算密集型的程序，需要占用系统资源。\n-   GIL的存在，相当于始终在进行单线程运算，这样自然就慢了。\n-   IO密集型影响不大的原因在于，IO，input/output，这两个词就表明程序的瓶颈在于输入所耗费的时间，线程大部分时间在等待，所以它们是多个一起等（多线程）还是单个等（单线程）无所谓的。\n\n  **解决方案：**\n\n  要提升多线程执行效率，解决方案：\n\n-   更换解释器\n-   改为进程替换多线程\n-   子线程使用C语言实现（绕过GIL锁）\n\n  **必须要知道的是：**\n\n-   CPU 密集(计算密集)型不太适合多线程\n-   I/O 密集型适合多线程/协程（Gil锁会释放）\n\n  \n\n## 2. 高级语法\n\n### 2.1. 闭包&装饰器\n\n```python\n\"\"\"闭包\n定义：函数嵌套的前提下，内部函数使用了外部函数的变量或参数，外部函数返回内部函数\n作用：保存外部函数内的变量, 不会随着外部函数调用结束而销毁，但消耗内存!\n\n\"\"\"\ndef outter0(a):\n    local_a = \"world\"\n    def inner(b):\n        print(f\"inner: {a}, {b} {local_a}\")\n    return inner\n\ndef t0():\n    foo = outter0(\"foo\")\n    foo(\"hello\")\n\n    goo = outter0(\"goo\")\n    goo(\"hello\")\n\n    # inner: foo, hello world\n    # inner: goo, hello world\n\n\ndef outter1(a=10):\n    print(f\"outter: {a}\")\n\n    def inner(b=10):\n        nonlocal a\n        a = a + b  # 此时默认是是取local vars不声名nonlocal会报UnboundLocalError\n        print(f\"inner a: {a}, b: {b}\")\n    return inner\n\n\ndef t1():\n    f = outter1()\n    f()\n    # outter: 10\n    # inner a: 20, b: 10\n\n\n\"\"\"\n装饰器：本质就是一个闭包函数（但要求闭包函数有且只有一个参数, 参数必须是函数类型）\n装饰器的执行事件是加载模块事立即执行 (在函数定义时候执行了), 所以一般外部函数内不写其他东西, 只有内部函数\n特点：\n    - 不修改已有函数的源代码\n    - 不修改已有函数的调用方式\n    - 给已有函数增加额外的功能\n\"\"\"\n\n# 通用装饰器(inner的参数为 *args, **kwargs也就是接收任意参数)\ndef outter2(f):\n    def inner(*args, **kwargs):\n        print(f\"inner: {args, kwargs}\")\n        res = f(*args, **kwargs)\n        print(f\"inner: {res}\")\n        return res\n    return inner\n\n\n@outter2  # 相当于执行了这句代码：func = outter2(func)\ndef func2(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\n\ndef t2():\n    func2(1, 2, d=5)\n    # inner: ((1, 2), {'d': 5})\n    # func: (1, 2, 3, 5)\n    # inner: hello world\n\n\n# 带有参数的装饰器：装饰器外再加一层闭包\ndef outter3(flag=False):\n    def outter2(f):\n        def inner(*args, **kwargs):\n            # 此时只是打印flag, 没修改不可变类型，不需要声名nonlocal\n            print(f\"inner: {args, kwargs}, {flag=}\")\n            res = f(*args, **kwargs)\n            print(f\"inner: {res}, {flag=}\")\n            return res\n        return inner\n    return outter2\n\n\n@outter3(True)\ndef func3(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\ndef t3():\n    func3(1, 2, d=4)\n    # inner: ((1, 2), {'d': 4}), flag=True\n    # func: (1, 2, 3, 4)\n    # inner: hello world, flag=True\n\n\n# 类装饰器\nclass Outter4:\n    \n    def __init__(self, f):\n        self.f = f\n    \n    def __call__(self, *args, **kwargs):\n        print(f\"inner: {args=}, {kwargs=}\")\n        res = self.f(*args, **kwargs)\n        return res\n\n@Outter4\ndef func4(a, b, c=3, d=None):\n    print(f\"func: {a, b, c, d}\")\n    return \"hello world\"\n\n\ndef t4():\n    func4(1, 2, d=4)\n    # inner: args=(1, 2), kwargs={'d': 4}\n    # func: (1, 2, 3, 4)\n\n\nif __name__ == \"__main__\":\n    t4()\n\n```\n\n### 2.2. property\n\n**3. property属性**\n\n- property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用\n- 定义方式\n  - 装饰器方式\n  - 类属性方式\n\n```python\n# 类属性方式 \nclass Student(object):   \n\n    def __init__(self):     \n        self.__age = 0   \n\n    def get_age(self):     \n        return self.__age   \n\n    def set_age(self, value):    \n        self.__age = value\n\n    # 第一个参数是获取值的方法， 第二个是设置值的方法   \n    age = property(get_age, set_age)      \n\n\n# 装饰器方式\nclass Student(object):   \n\n    def __init__(self):\n        self.__age = 0\n\n    # 获取年龄\n    @property\n    def age(self):\n        return self.__age   \n\n    # 设置年龄\n    @age.setter\n    def age(self, value):     \n        self.__age = value  \n\n```\n\n### 2.3. with语句&上下文管理器\n\n- with 语句执行完成以后自动调用关闭文件操作, 即使出现异常\n- 一个类只要实现了``__enter__()``和``__exit__()``这个两个方法，通过该类创建的对象我们就称之为上下文管理器\n\n```python\n# 要实现上下文管理器， 要实现__enter__ 和 __exit__  \nclass File(object):   \n\n    def __init__(self, file_name, file_mode):\n        self.file_name = file_name\n        self.file_mode = file_mode\n\n        # 实现上文的方法，主要用来提供资源，需要返回一个对象\n        def __enter__(self):\n            print('entered up')\n            self.fp = open(self.file_name, self.file_mode)\n            return self.fp\n\n        \n        # 实现下文的方法，主要用来释放资源\n        def __exit__(self, exc_type, exc_val, exc_tb):\n            print('exited down')\n            self.fp.close()\n\n            \nwith File(\"a.txt\", \"w\") as f:\n    print('-' * 28)\n\n# entered up\n# ----------------------------\n# exited down\n```\n\n- 上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的，也就是说刚才使用 open 函数创建的文件对象就是就是一个上下文管理器对象\n- ``__enter__``表示上文方法，需要返回一个操作文件对象\n\n- `__exit__`表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法\n\n### 2.4. 深拷贝和浅拷贝\n\n- `import copy`拷贝的目的: 保证原数据和拷贝的数据之间不影响\n- **`copy.copy()` 浅拷贝**，只对可变类型的第一层对象进行拷贝，对拷贝的对象开辟新的内存空间进行存储，不会拷贝对象内部的子对象\n  - 不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用\n  - 可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝\n- **`copy.deepcopy()` 深拷贝**, 只要发现对象有可变类型就会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n  - 不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n  - 可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储\n- **浅拷贝最多拷贝对象的一层 (即使可变类型, 也只拷贝第一层) 其它情况都是拷贝引用**\n- **深拷贝可能拷贝对象的多层 (只要是有可变类型, 就全部拷贝) 其它情况都是拷贝引用**\n\n### 2.5. 单例\n\n```python\n# 只有一份内存空间\n# __new__ 开辟内存空间, 会在__init__之前执行 \n\nclass Singleton(object):   \n    is_instance = None   \n    def __new__(cls, *args, **kwargs):\n        if cls.is_instance is None:\n            # 保证下边代码执行一次\n            cls.is_instance = object.__new__(cls)\n            return cls.is_instance\n        else:\n            return cls.is_instance\n\n\na = Singleton()\nb = Singleton()\nc = Singleton()\n\n>>> id(a) == id(b) == id(c)\n>>> True\n\n```\n\n# 面试造飞机\n\n1. 生成器和迭代器的区别\n   1. **定义方式：**\n      - 生成器是一种特殊的函数，它使用 `yield` 关键字来定义，并在函数体内使用 `yield` 来产生值。生成器函数可以暂停执行，并在需要时恢复执行，每次恢复执行时会从上次暂停的位置继续执行。\n      - 迭代器是一个实现了迭代协议的对象，它包含 `__iter__()` 方法和 `__next__()` 方法。`__iter__()` 方法返回迭代器自身，而 `__next__()` 方法用于返回迭代器的下一个值，如果没有下一个值则抛出 `StopIteration` 异常。\n   2. **使用方式：**\n      - 生成器通常用于生成一个序列的值，它们可以通过 `for` 循环来迭代产生的值，也可以通过调用 `next()` 函数手动迭代。\n      - 迭代器则是一种更通用的迭代工具，它可以迭代任何实现了迭代协议的对象，包括列表、元组、集合等。迭代器可以通过 `iter()` 函数获取，也可以直接用于 `for` 循环中。\n   3. **内存占用：**\n      - 生成器是一种惰性求值（Lazy Evaluation）的机制，它只在需要时生成值，并且不会一次性将所有值存储在内存中，因此生成器在处理大量数据时具有较低的内存消耗。\n      - 迭代器通常需要将所有的值存储在内存中，因此在处理大量数据时可能会消耗较多的内存。\n   4. **可变性：**\n      - 生成器是不可变的，一旦定义完成后，生成器的值无法修改。\n      - 迭代器通常是可变的，可以在迭代过程中修改迭代器的状态，例如添加、删除元素等。\n   \n   综上所述，生成器和迭代器在 Python 中都是用于处理可迭代对象的工具，但它们的定义方式、使用方式、内存占用和可变性等方面有一些区别。生成器通常用于惰性生成值，而迭代器则是一种通用的迭代工具，用于迭代任意可迭代对象。\n   \n2. python内存管理(同GIL锁是cpython解释器的特性)\n   1. Python的内存管理机制主要依赖于引用计数来迅速释放不再使用的对象，同时通过垃圾回收来处理循环引用等特殊情况，保证内存的高效利用。这种自动内存管理的方式让开发者从手动管理内存的负担中解放出来，提高了开发效率。\n   2. 引用计数：Python使用引用计数来跟踪每个对象被引用的次数。当一个对象被创建或者另一个对象引用它时，引用计数就会增加。当一个对象的引用计数降为0时，表示没有任何变量指向该对象，那么该对象将成为垃圾，Python会回收这部分内存以供其他对象使用。\n      \n      - 引用计数的优点是在对象不再被引用时立即释放内存，因为没有等待垃圾回收器的运行。但是引用计数无法解决循环引用的问题（两个或更多的对象相互引用，导致它们的引用计数都不会降为0），为此，Python引入了垃圾回收机制。\n   3. 垃圾回收（Garbage Collection）： Python中的垃圾回收机制是为了解决循环引用以及其他无法通过引用计数检测的垃圾对象。Python采用了分代回收算法，将对象分为不同的代（generation）。新创建的对象位于第0代，每经过一次垃圾回收，存活的对象会晋升到下一代。随着对象存活时间的增加，回收的频率会降低，因为大部分对象很快就会变成垃圾，只有少数长时间存活的对象才需要耗费更多的垃圾回收时间。\n      - 标记-清除（Mark and Sweep）：垃圾回收器首先标记所有可以访问的对象，然后清除所有未标记的对象，释放其内存。\n      \n      - 分代回收（Generational Garbage Collection）：将对象按照存活时间分为不同的代，一般将新创建的对象放入第0代，存活时间更长的对象依次放入第1代、第2代，通过不同代之间的垃圾回收来提高效率。\n      \n      - 引用计数+标记-清除：综合利用引用计数和标记-清除算法，处理循环引用以及其他无法通过引用计数回收的对象。\n      \n      - **分代回收在处理循环引用的情况**时，通过为每个对象分配一个分代标记来解决这个问题。分代标记可以被划分为两种类型：线程局部分代标记（thread local allocation context）和全局局部分代标记（global allocation context）。\n      \n        当一个对象被创建时，Python内核会为其分配一个分代标记，并将该标记与对象一起存储。对于循环引用的对象，分代标记会被保持不变。当一个对象被销毁时，Python通过检查对象的分代标记来确定是否已经被回收。如果对象的分代标记未被其他地方引用，那么该对象已经不再被使用，并需要进行回收。\n      \n        为了避免不必要的循环回收，Python内核会记录每个对象是否已经被回收。一旦对象被回收，就不会再被释放，即使再次被检测到。这样可以确保只有一次地回收每个对象。\n\n3. tcp与udp区别\n   1. 连接：tcp是一种面向连接的协议，在数据传输前要先建立一个连接，UDP是无连接协议，不需建立连接\n   2. 可靠性：TCP提供可靠的数据传输，确保数据包在从发送端到接收端的传输过程中不会丢失、被改变或出现重复，UDP不保证数据传输可靠性，可能导致丢包、被改变或重复\n   3. 速度：由于TCP的可靠性和流量控制机制，传输速度相对UDP会慢很多\n   4. 设计目的：TCP适用于对数据传输可靠性和稳定性要求较高，如文件传输、电子邮件和网页浏览等，UDP更擅长对实时性要求较高的应用，如实时语音、视频通信，在线游戏等\n   5. 头部信息：TCP和UDP的头部信息分别为20字节和8字节。TCP的头部信息包括数据包的序号和个别流标记，用于确保数据包在传输过程的顺序和完整性。UDP的头部信息相对较少主要包括数据包的源端和目标端的IP地址和端口\n   \n4. https原理\n   1. SSL/TCS 密钥包括一个私钥和一个公钥\n   2. 当用户通过浏览器访问一个HTTPS页面，服务器首先向浏览器发送公钥，浏览器接收到公钥后，会使用它来加密数据（请求头和请求体），然后将加密数据发送回服务器\n   3. 服务器使用接收到的加密数据和自己的私钥来解密数据。\n   \n5. TCP3次握手4次挥手\n   1. 客户端向服务端发送一个SYN（初始化）包，表明希望建立一个连接\n   2. 服务端同意建立连接会回复SYN+ACK包，表示可以建立连接\n   3. 客户端回复ACK包，连接建立\n   4. 客户端向服务端发送一个FIN包，表明希望断开连接，进入终止等待1状态\n   5. 服务端向客户端回复一个ACK包，表示进入终止等待状态，此时可传数据\n   6. 服务端向客户端发送一个FIN包，客户端进入终止等待2状态\n   7. 客户端向服务端回复一个ACK包，客户等待超时时间后断开连接，服务端立刻断开连接\n   \n6. Flask路由原理\n\n   Flask 的路由原理主要基于装饰器和 Python 的函数式编程概念。具体来说，Flask 使用 @app.route() 装饰器将 URL 路径和视图函数绑定在一起。当接收到一个 HTTP 请求时，Flask 会根据请求的 URL 找到对应的视图函数，并执行该函数来处理请求。\n\n7. django处理csrf原理\n\n   Django处理CSRF的原理基本上是通过在每个页面加载时生成一个唯一的CSRF令牌，并将其存储在用户的会话中。当用户在表单中提交请求时，Django会验证请求中包含的CSRF令牌是否与用户会话中存储的令牌匹配，以确保请求来自于站点的合法来源。\n\n8. django cookie session原理\n\n   在Django中，会话（Session）是一种存储在服务器端的数据，用于在用户请求之间保持状态。Django通常使用基于cookie的会话来管理会话数据，其原理如下：\n\n   1. **会话数据存储：** 当用户首次访问Django应用时，Django会为该用户创建一个唯一的会话标识符（session ID），通常是一个随机生成的字符串。会话数据存储在服务器端的缓存中，默认情况下使用的是数据库缓存。会话数据可以包含任意类型的数据，例如用户的身份验证信息、用户偏好设置等。\n   2. **会话ID的传递：** 一旦会话数据存储在服务器端，Django会将会话ID发送给客户端浏览器，通常是通过一个名为`sessionid`的cookie。这个cookie包含了用户的会话ID，用于在后续的请求中标识用户的会话数据。\n   3. **请求中的会话ID提取：** 当用户在浏览器上发送新的请求时，浏览器会自动将之前设置的`sessionid` cookie包含在请求头中。\n   4. **会话数据的检索：** Django在处理请求时会检查请求头中是否包含`sessionid` cookie，如果包含，Django会使用该会话ID来检索对应的会话数据。\n   5. **会话数据的使用：** 一旦会话数据被检索到，Django会将其提供给视图函数，以便在视图中使用。开发人员可以在视图中读取和修改会话数据，从而实现跨请求的状态保持。\n   6. **响应中的会话ID更新：** 如果在处理请求时会话数据发生了变化，Django会在响应中将更新后的会话ID发送给客户端浏览器。这是为了确保会话ID的安全性，以及避免可能的会话固定攻击（Session Fixation Attack）。\n\n   通过这种方式，Django使用基于cookie的会话机制来管理用户会话数据，从而实现了用户状态的保持和跨请求的数据传递。这种机制是一种常见的Web应用程序开发中用于处理用户状态的方式。\n\n\n\n# TIPS\n\n字典无序性: 在Python 3.7及之前的版本中，字典元素的顺序是不确定的，即它们的存储顺序与插入顺序不一定一致。但是从Python 3.7开始，字典保留了元素插入的顺序。这意味着当你迭代字典时，它们的顺序将与你添加键-值对的顺序相同。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"python从入门到放弃","published":1,"updated":"2024-03-22T08:34:33.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcc000nisuha4d9h7bt","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ul>\n<li>编译型语言<ul>\n<li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li>\n<li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>解释型语言<ul>\n<li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li>\n<li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li>\n<li>示例：Python、JavaScript、Ruby</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-基中基\"><a href=\"#1-基中基\" class=\"headerlink\" title=\"1. 基中基\"></a>1. 基中基</h2><h3 id=\"1-1-关键字\"><a href=\"#1-1-关键字\" class=\"headerlink\" title=\"1.1. 关键字\"></a>1.1. 关键字</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>涉及功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>True, False, None</td>\n<td>真 假 空</td>\n</tr>\n<tr>\n<td>if, elif, else, and, not, assert, or, is, in</td>\n<td>逻辑判断</td>\n</tr>\n<tr>\n<td>try, except, finally, raise</td>\n<td>异常捕获</td>\n</tr>\n<tr>\n<td>for, while, continue, break, return</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>from, import</td>\n<td>导包</td>\n</tr>\n<tr>\n<td>def, class, lambda</td>\n<td>定义函数、类、匿名函数</td>\n</tr>\n<tr>\n<td>async, await, yield</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>global, nonlocal</td>\n<td>变量空间</td>\n</tr>\n<tr>\n<td>as, del, pass, with, type</td>\n<td>重命名、删除、PASS、上下文、类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-逻辑运算符\"><a href=\"#1-2-逻辑运算符\" class=\"headerlink\" title=\"1.2. 逻辑运算符\"></a>1.2. 逻辑运算符</h3><ul>\n<li>与 <code>and</code>: 一假即假</li>\n<li>或 <code>or</code>: 一真即真（注意短路逻辑： <code>1 or 1 / 0</code> 不会报错，程序只会走第一个1然后就会执行下一行）</li>\n<li>非 <code>not</code>: 真假取反</li>\n</ul>\n<h3 id=\"1-3-比较运算符\"><a href=\"#1-3-比较运算符\" class=\"headerlink\" title=\"1.3. 比较运算符\"></a>1.3. 比较运算符</h3><ul>\n<li><p><code>//</code> 取整除 9 &#x2F;&#x2F; 4 &#x3D; 2</p>\n</li>\n<li><p><code>%</code> 取余 9%4 &#x3D; 1</p>\n</li>\n<li><p><code>^</code>   取异或  把数字转化为二进制取  0 1 为 1 ，1 0 为 1， 1 1 为1， 0 0 为 0</p>\n</li>\n<li><p><code>**</code>  幂</p>\n</li>\n</ul>\n<h3 id=\"1-4-比较运算符\"><a href=\"#1-4-比较运算符\" class=\"headerlink\" title=\"1.4. 比较运算符\"></a>1.4. 比较运算符</h3><ul>\n<li><p><code>&gt; &lt; == != &gt;= &lt;=</code></p>\n</li>\n<li><p>返回的结果都是bool类型, True表示条件成立, False表示不成立.</p>\n</li>\n</ul>\n<h3 id=\"1-5-输入输出\"><a href=\"#1-5-输入输出\" class=\"headerlink\" title=\"1.5. 输入输出\"></a>1.5. 输入输出</h3><ul>\n<li><p><code>print()</code> 调用底层的<code>sys.stdout.write</code>方法，前往控制台打印输出</p>\n</li>\n<li><p><code>input()</code>  无论输入什么类型的数据，都会转化为字符串</p>\n</li>\n</ul>\n<h3 id=\"1-6-循环\"><a href=\"#1-6-循环\" class=\"headerlink\" title=\"1.6. 循环\"></a>1.6. 循环</h3><ul>\n<li><p>循环语句结合<code>else</code>语句使用，当循环语句执行了<code>break</code>表示非正常结束，<code>else</code>语句不会执行，否则会执行<code>else</code>语句</p>\n</li>\n<li><p>循环语句里有<code>break/return</code>时, <code>break/return</code>执行了, <code>else</code>语句就不会执行</p>\n</li>\n<li><p><code>break/continue</code> 只影响一层循环</p>\n</li>\n</ul>\n<h3 id=\"1-7-if三目运算\"><a href=\"#1-7-if三目运算\" class=\"headerlink\" title=\"1.7. if三目运算\"></a>1.7. if三目运算</h3><ul>\n<li><p><code>a if a &gt; b else b</code> 条件成立取a，不成立取b</p>\n</li>\n<li><p>if 除了判断bool类型, 还可以判断</p>\n<ul>\n<li>容器类型(字符串, 列表, 元组, 字典, 集合, <code>range()</code>, <code>bytes()</code>) 判断是否有数据</li>\n<li>非零即真(只要不是0, 条件都成立)</li>\n<li>None 条件不成立, not none, 表示非空, 条件成立</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-8-注释\"><a href=\"#1-8-注释\" class=\"headerlink\" title=\"1.8 注释\"></a>1.8 注释</h3><ul>\n<li>单行 <code># 这是注释</code></li>\n<li>多行 <code>&quot;&quot;&quot; 这是多行注释 &quot;&quot;&quot;</code></li>\n</ul>\n<h2 id=\"2-容器\"><a href=\"#2-容器\" class=\"headerlink\" title=\"2. 容器\"></a>2. 容器</h2><h3 id=\"2-1-字符串\"><a href=\"#2-1-字符串\" class=\"headerlink\" title=\"2.1. 字符串\"></a>2.1. 字符串</h3><blockquote>\n<p><strong>字符串用<code>join</code>比直接<code>+</code>高效原因</strong>：在 Python 中，字符串是不可变类型，这意味着一旦我们创建了一个字符串对象，它就不能被修改或更新。因此，每次使用 <code>+</code> 操作符拼接字符串时，都会创建一个新的字符串对象，并将之前字符串对象的内容复制到新的字符串对象中，这个复制的操作会带来额外的内存分配和内存拷贝的开销，特别是在需要拼接大量的字符串时，会消耗大量的系统资源，导致程序运行缓慢。 相对地，使用 <code>join()</code> 方法的拼接字符串操作则更加高效。<code>join()</code> 方法本质上是将多个字符串通过指定的分隔符拼接在一起，而与此相关的方法包括 <code>split()</code>，<code>replace()</code> 和 <code>format()</code> 等方法，它们均采用类似的算法。在 <code>join()</code> 方法的实现中，Python 的解释器会先在内存中分配一个足够大的单个字符串缓冲区，然后扫描要拼接的字符串，将其复制到单个缓冲区中，并在不同字符串之间插入指定的分隔符。这种方法可以有效地避免频繁创建或拷贝字符串对象，从而提高拼接字符串的效率。 此外，<code>join()</code> 方法还可以接受一个可迭代对象作为参数，如列表，元组，生成器等，它们会返回一个字符串，其中可迭代对象按照指定的分隔符进行拼接。这种方式具有更高的灵活性和实用性，因为它可以用于拼接任意数量的字符串，而且可以用于迭代较大的数据集合，而不会导致系统资源消耗过多。</p>\n</blockquote>\n<ul>\n<li>定义：用单引号、双引号、三引号均可，仅三引号可以换行</li>\n<li>切片：<code>[开始位置:结束位置:步长]</code> 左闭右开<ul>\n<li><code>[::-1]</code> 字符串快速逆置</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_str = <span class=\"string\">&quot;python&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_str, <span class=\"built_in\">str</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_age, <span class=\"built_in\">int</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_age = <span class=\"built_in\">str</span>(my_age)  <span class=\"comment\"># &quot;18&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_age, <span class=\"built_in\">str</span>)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用</strong></p>\n<ul>\n<li><code>.find(要查询的字符, 查询开始索引, 查询结束索引)</code> 左闭右开，查空返回 -1</li>\n<li><code>.replace(str1, str2, 替换次数)</code> 字符串替换，替换次数默认-1全部替换</li>\n<li><code>.split(str1, 切片次数)</code> 字符串以 str1 为分隔符进行切片，切片次数默认-1全部切，返回分隔后的列表</li>\n<li><code>.lower()</code> 英文转小写 <code>upper()</code>转大写</li>\n</ul>\n<h3 id=\"2-2-列表\"><a href=\"#2-2-列表\" class=\"headerlink\" title=\"2.2. 列表\"></a>2.2. 列表</h3><p><strong>定义</strong>：<code>[]</code> 或 <code>list()</code> </p>\n<p><strong>列表推导式</strong>： 列表中可以包含条件语句，表示筛选符合条件的元素。在这种情况下，底层逻辑还会涉及以下步骤：</p>\n<ol>\n<li>创建一个空列表。</li>\n<li>对于列表推导式中的每个元素表达式，按照迭代顺序依次执行以下步骤：<ol>\n<li>在当前作用域中计算元素表达式的值。</li>\n<li>如果条件表达式的值为真，则将计算得到的值添加到列表中。</li>\n</ol>\n</li>\n<li>返回最终生成的列表。</li>\n</ol>\n<p><strong>增</strong></p>\n<ul>\n<li><code>.append</code> 加整个对象，加字典也是整个字典</li>\n<li><code>.extend</code> 打散加进去，加字典默认加字典的<code>key</code></li>\n<li><code>.insert(index, obj)</code> 在指定位置前面加, 是整个加进去的</li>\n</ul>\n<p><strong>删</strong></p>\n<ul>\n<li><p><code>del list[::]</code> 可以和切片一起操作根据索引删除列表元素</p>\n</li>\n<li><p><code>.pop()</code> 只能根据单独索引删除对应元素, 默认删最后一个, 会返回删除的元素</p>\n</li>\n<li><p><code>.remove()</code> 指定元素删除</p>\n</li>\n</ul>\n<p><strong>改</strong></p>\n<p><code>list[index] = &quot;new&quot;</code>  可以用切片同时更改多个数据,注意下面示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list = [<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[<span class=\"number\">0</span>] = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[:<span class=\"number\">0</span>] = <span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[:<span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>查</strong></p>\n<ul>\n<li><code>in</code> 判断是否存在，只可判断最外层数据，内层还有容器要索引进去查</li>\n<li><code>.index(obj, start, end)</code> 左闭右开，找不到报<code>ValueError</code></li>\n<li><code>.count(obj)</code></li>\n</ul>\n<p><strong>排序</strong></p>\n<ul>\n<li><p><code>.sort(reverse=False)</code> 默认是从小到大, <code>reverse=True</code> 改为从大到小</p>\n</li>\n<li><p><code>.reverse()</code> 将列表逆置, 与上面的<code>reverse=True</code>不同</p>\n</li>\n</ul>\n<h3 id=\"2-3-元组\"><a href=\"#2-3-元组\" class=\"headerlink\" title=\"2.3. 元组\"></a>2.3. 元组</h3><p><strong>定义</strong>：<code>tuple()</code> 或 <code>(1, 2)</code>  如果只有一个元素, 逗号不能省略, 有序</p>\n<h3 id=\"2-4-字典\"><a href=\"#2-4-字典\" class=\"headerlink\" title=\"2.4. 字典\"></a>2.4. 字典</h3><p><strong>定义</strong></p>\n<ul>\n<li><code>dict()</code> 或 <code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></li>\n<li><code>zip</code>组合<code>key</code>和<code>value</code> 生成字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>keys = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_dict = <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>(keys, values))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_dict</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>增:</strong>   </p>\n<ul>\n<li><code>dict[key] = value</code></li>\n</ul>\n<p><strong>删:</strong>   </p>\n<ul>\n<li><p><code>del dict[key]</code>  必须要有<code>key</code>数据</p>\n</li>\n<li><p><code>.pop(key, default)</code>  必须要有<code>key</code>数据, 会返回所删项的<code>value</code>, 如果字典里没有这个<code>key</code>就会返回<code>default</code></p>\n</li>\n<li><p><code>.popitem()</code>  takes no arguments, return the last item as a tuple()</p>\n</li>\n<li><p><code>.clear()</code> 清空</p>\n</li>\n</ul>\n<p><strong>改:</strong>  </p>\n<ul>\n<li><code>dict[key] = value</code>  和增加元素相同, 所以当原本没有此<code>key</code>就变成增加元素了</li>\n</ul>\n<p><strong>查:</strong>   </p>\n<ul>\n<li><p><code>dict[key]</code>  如果不存在会报错</p>\n</li>\n<li><p><code>.get(key, default)</code>   如果不存在则返回<code>default</code>  不写<code>default</code>找不到会返回<code>None</code> 不会报错</p>\n</li>\n</ul>\n<p><strong>合并:</strong>  </p>\n<ul>\n<li><code>dict1.update(dict2)</code>  把字典2的每个键值对数据合并到字典1中, 如果有重复的则更新1的内容</li>\n</ul>\n<p><strong>遍历:</strong> </p>\n<ul>\n<li><code>for key in dict.keys()</code></li>\n<li><code>for values in dict.values()</code></li>\n<li><code>for item in dict.items()</code>           <strong>item是个tuple</strong></li>\n<li><code>for key, value in dict.items()</code>         遍历 + 拆包</li>\n</ul>\n<p><strong>排序：</strong></p>\n<ul>\n<li><code>sorted(d.items(), key=lambda x : x[0/1])</code></li>\n</ul>\n<h3 id=\"2-5-集合\"><a href=\"#2-5-集合\" class=\"headerlink\" title=\"2.5. 集合\"></a>2.5. 集合</h3><ul>\n<li>集合是一个容器类型, 可以存储多个数据, 但是多个数据不能重复</li>\n<li>集合只能存储不可变类型数据, 也就是: 数字, 字符串, 元组    同字典的key</li>\n<li>空集合不能使用**{}**来表示, {}是字典, 创建时用 <strong>set()</strong> 来创建空集合</li>\n<li>遍历集合不能用通过下标, 可以用for遍历, 可迭代对象</li>\n</ul>\n<p><strong>特点:</strong></p>\n<ol>\n<li>无序, so集合不能通过索引获取数据和通过索引修改数据</li>\n<li>数据不能重复,数据是唯一的</li>\n<li>可变类型</li>\n</ol>\n<p><strong>操作符：</strong></p>\n<p><strong>^</strong>  补  {1，2} ^ {2, 3}  &#x3D;&gt;  {1, 3}</p>\n<p><strong>&amp;</strong> 交  {1，2} &amp; {2, 3}  &#x3D;&gt;  {2, }</p>\n<p><strong>|</strong>   并   {1，2} | {2, 3}  &#x3D;&gt;  {1, 2, 3}</p>\n<p><strong>-</strong>   差   {1，2} - {2, 3}  &#x3D;&gt;  {1, }</p>\n<p><strong>增:</strong></p>\n<p>.<strong>add()</strong> 重复的数据只保留一个</p>\n<p><strong>删:</strong></p>\n<p><strong>.remove(value)</strong> 指定数据删除</p>\n<h3 id=\"2-6-公共方法\"><a href=\"#2-6-公共方法\" class=\"headerlink\" title=\"2.6. 公共方法\"></a>2.6. 公共方法</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>Python 表达式</th>\n<th>结果</th>\n<th>描述</th>\n<th>支持的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>[1, 2] + [3, 4]</td>\n<td>[1, 2, 3, 4]</td>\n<td>合并</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td>*</td>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>复制</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td>in</td>\n<td>3 in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>4 not in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否不存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n</tbody></table>\n<p><strong>python内置函数</strong></p>\n<ul>\n<li><p><code>len()</code>  获取容器的元素数量</p>\n</li>\n<li><p><code>max()</code>  返回容器中元素最大值  |  类似的 <code>min()</code>  最小</p>\n</li>\n<li><p><code>enumerate()</code> </p>\n<ul>\n<li>在使用for循环的时候可以遍历数据又可以遍历索引, 列表&#x2F;元组&#x2F;字典都可以使用</li>\n<li>当用于字典遍历所有items时返回的是一个索引数据和一个元组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-7-可变不可变类型\"><a href=\"#2-7-可变不可变类型\" class=\"headerlink\" title=\"2.7. 可变不可变类型\"></a>2.7. 可变不可变类型</h3><p>不可变类型</p>\n<ul>\n<li>定义：不允许在原本内存空间基础上修改数据, 修改数据后内存地址会发生变化</li>\n<li>示例：列表, 字典, 集合</li>\n</ul>\n<p>可变类型</p>\n<ul>\n<li>定义：允许在原本内存空间修改数据，修改后一是在原有内存空间基础上修改数据内存不变，二是重新赋值内存地址可能发生变化</li>\n<li>示例：数字, 字符串, 元组</li>\n</ul>\n<h2 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3. 函数\"></a>3. 函数</h2><blockquote>\n<p>程序中定义的变量都是保存在内存中的, 局部变量也是, 当函数执行结束后局部变量都会销毁,内存释放</p>\n</blockquote>\n<h3 id=\"3-1-文档说明\"><a href=\"#3-1-文档说明\" class=\"headerlink\" title=\"3.1. 文档说明\"></a>3.1. 文档说明</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; func docs &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;&#x27;&#x27; others &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;life is short i use python&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"><span class=\"built_in\">help</span>(show)</span><br><span class=\"line\"><span class=\"comment\"># life is short i use python</span></span><br><span class=\"line\"><span class=\"comment\"># Help on function show in module __main__:</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># show()</span></span><br><span class=\"line\"><span class=\"comment\">#     func docs</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-返回值\"><a href=\"#3-2-返回值\" class=\"headerlink\" title=\"3.2. 返回值\"></a>3.2. 返回值</h3><ul>\n<li>函数不写<code>return</code> 取函数返回值时会取到 <code>None</code></li>\n<li>在多层循环中 <code>return</code> 可把多层全部终止，<code>break</code> 只能终止一层</li>\n</ul>\n<h3 id=\"3-3-局部变量-amp-全局变量\"><a href=\"#3-3-局部变量-amp-全局变量\" class=\"headerlink\" title=\"3.3. 局部变量&amp;全局变量\"></a>3.3. 局部变量&amp;全局变量</h3><ul>\n<li><p>局部变量：作用域仅在函数体内部,  随着函数执行结束会销毁</p>\n</li>\n<li><p>全局变量：在函数体内外都生效，不会随着函数执行结束会销毁</p>\n</li>\n<li><p><code>global</code> 本质是表示:  要修改全局变量的内存地址, 所以只有不可变类型需要<code>global</code></p>\n</li>\n<li><p>在函数内部使用全局变量时, 要先声明 <code>global</code> 全局变量, 如果是可变类型就不需要了</p>\n</li>\n<li><p>对于操作全局变量的数据, 如果是通过重新赋值来完成的, 那么必须加上<code>global</code>关键字</p>\n</li>\n<li><p><code>nonlocal</code> 使用场景是函数嵌套时，内层函数要使用外层函数的变量或参数</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = [<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> a</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">t()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a, b)</span><br><span class=\"line\"><span class=\"comment\"># 2 [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\"># 2 [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-函数参数\"><a href=\"#3-4-函数参数\" class=\"headerlink\" title=\"3.4. 函数参数\"></a>3.4. 函数参数</h3><ul>\n<li><p>分类</p>\n<ul>\n<li><p>位置参数：按照位置顺序依次给函数的参数传值</p>\n</li>\n<li><p>关键字参数：按照关键字名给函数的参数传值</p>\n</li>\n</ul>\n<p>注：前面按位置, 后面按关键字, 如果前面用了关键字参数, 后面不能再使用位置参数, 只能使用关键字参数传参</p>\n</li>\n<li><p>不定长参数: 函数的参数个数不确定, 可能0个, 可能多个</p>\n<ul>\n<li>不定长位置参数, <code>*args</code>, 调用函数时所有位置参数都封装成元组, 赋值给<code>args</code></li>\n<li>不定长关键字参数, <code>**kwargs</code>, 调用函数时所有关键字参数都封装成字典, 赋值给<code>kwargs</code></li>\n</ul>\n<p>注: <code>*args</code> 和 <code>**kwargs</code> 这两个参数名可以修改, 但一般不改, 大家习惯了</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">name, *args, age=<span class=\"number\">18</span>, **kwargs</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;name:&quot;</span>, name, <span class=\"string\">&quot;age:&quot;</span>, age, <span class=\"string\">&quot;args:&quot;</span>, args, <span class=\"string\">&quot;kwargs:&quot;</span>, kwargs)</span><br><span class=\"line\">show(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;a&quot;</span>, a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, age=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># name: 李四 age: 20 args: (1, 2, &#x27;a&#x27;) kwargs: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>拆包</strong>：使用不同变量保存容器类型中的每个数据，对应的变量和数据数量要保持一致致</p>\n<ul>\n<li><p>容器类型如:字符串, 列表, 元组, 字典, range, 集合(set) 都可以利用拆包, 容器类型可以使用变量保存不同的数据</p>\n</li>\n<li><p><code>*my_tuple</code>: 对元组&#x2F;列表进行拆包, 也就是把元组&#x2F;列表里每个数据按位置参数进行传参</p>\n</li>\n<li><p><code>**my_dict</code>: 对字典进行拆包, 也就是把字典里面的每一个键值对按关键字的方式进行传参</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-匿名函数\"><a href=\"#3-5-匿名函数\" class=\"headerlink\" title=\"3.5. 匿名函数\"></a>3.5. 匿名函数</h3><p>定义：没有名字的函数, 就是匿名函数, 匿名函数返回值不需要 <code>return</code>，用<code> lambda</code> 定义</p>\n<p>格式:  <code>lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_func = <span class=\"keyword\">lambda</span> a: <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_func(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-常见函数定义\"><a href=\"#3-6-常见函数定义\" class=\"headerlink\" title=\"3.6. 常见函数定义\"></a>3.6. 常见函数定义</h3><ul>\n<li>递归函数: 在一个函数内调用的是函数本身, 这样的函数称为递归函数</li>\n<li>函数嵌套：python中, 可以在函数内部再定义一个函数, 称为函数的嵌套（例：装饰器）</li>\n<li>高阶函数：函数的参数或者返回值是一个函数类型, 那么这样的函数就叫高阶函数（例：装饰器）</li>\n</ul>\n<h2 id=\"4-文件\"><a href=\"#4-文件\" class=\"headerlink\" title=\"4. 文件\"></a>4. 文件</h2><h3 id=\"4-1-常识\"><a href=\"#4-1-常识\" class=\"headerlink\" title=\"4.1. 常识\"></a>4.1. 常识</h3><ul>\n<li><p>在windows的python解释器里面, 打开文件默认的编码格式是 <code>gbk</code> 的</p>\n</li>\n<li><p>在mac和linux的解释器里面, 打开文件默认的编码格式是 <code>utf-8</code> 的</p>\n</li>\n<li><p><code>utf-8</code> 一个汉字占用三个字节, 一个字母占1个字节</p>\n</li>\n<li><p>编码:  <code>.encode(&quot;utf-8&quot;)</code></p>\n</li>\n<li><p>解码:  <code>.decode(&quot;utf-8&quot;)</code></p>\n</li>\n</ul>\n<h2 id=\"5-面向对象\"><a href=\"#5-面向对象\" class=\"headerlink\" title=\"5. 面向对象\"></a>5. 面向对象</h2><blockquote>\n<p>面向对象就是对面向过程的封装</p>\n<p><strong>面向对象的三大特性</strong></p>\n<p><strong>封装:</strong> 把属性和方法放到类里面的操作就是封装, 封装可以控制属性和方法的访问权限</p>\n<p><strong>继承:</strong> 子类可以使用父类的方法或者属性, 提高了代码的复用性, 注意点: 父类的功能满足不了子类的需要, 重写父类的方法</p>\n<p><strong>多态:</strong> </p>\n<ul>\n<li>对象调用同一个方法会出现不同的表现形式(表现结果)</li>\n<li>多态的好处, 代码的可扩展性强, 代码兼容性强, 不关系类型, 只关系对象是否具有指定功能方法</li>\n</ul>\n</blockquote>\n<h3 id=\"5-0-类的实例化过程\"><a href=\"#5-0-类的实例化过程\" class=\"headerlink\" title=\"5.0. 类的实例化过程\"></a>5.0. 类的实例化过程</h3><ol>\n<li><p>内存分配：Python为对象分配所需的内存空间。</p>\n</li>\n<li><p>初始化实例：调用类的__init__方法来初始化实例。__init__方法是类中一个特殊的方法，它在实例化对象时被自动调用。</p>\n</li>\n<li><p>创建对象引用：创建一个指向该实例的引用，允许你通过变量来访问该实例。</p>\n</li>\n<li><p>执行__new__方法（可选）：如果定义了__new__方法，它将在__init__之前被调用。__new__方法负责创建实例。</p>\n</li>\n<li><p>返回实例：返回一个指向新实例的引用，使你可以使用该引用来操作该实例。</p>\n</li>\n</ol>\n<p>总结起来，实例化一个类时，Python会为对象分配内存空间，然后调用__init__方法初始化实例，最后返回新实例的引用。这样，就可以通过该引用来操作和访问该实例的属性和方法。</p>\n<h3 id=\"5-1-魔法方法\"><a href=\"#5-1-魔法方法\" class=\"headerlink\" title=\"5.1. 魔法方法\"></a>5.1. 魔法方法</h3><p><strong>定义</strong>：方法名前后都有两个下划线, 这样的方法称为魔法方法, 魔法方法具有一定的特殊功能</p>\n<p><strong>常见魔法方法</strong>：</p>\n<ul>\n<li><p><code>__new__</code> 分配内存的方法, 在<code>__init__</code>之前调用</p>\n</li>\n<li><p><code>__init__</code>, 在创建一个对象时默认被调用,不需要手动调用, 可以在此方法内添加对象属性</p>\n</li>\n<li><p><code>__del__</code>, 创建对象后, python解释器默认调用<code>__init__</code>方法, 当删除对象时, python解释器也会默认调用<code>__del__</code>方法</p>\n</li>\n<li><p><code>__str__</code>, 当使用<code>print</code>输出对象的时候, 默认打印对象的内存地址, 如果类定义了此方法,那么就会打印从在这个方法中<code>return</code>的数据, 此方法返回必须是字符串类型, 作为这个对象的描述信息. </p>\n</li>\n<li><p><code>__slots__</code>方法, 限定自定义类型的的对象只能绑定某些属性, 只对当前类对象生效, 对子类并不起任何作用</p>\n</li>\n<li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p>\n</li>\n<li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p>\n</li>\n</ul>\n<p><strong>对象销毁的方式</strong>:</p>\n<ul>\n<li><p>程序运行结束, 程序中所使用对象都要在内存中销毁</p>\n</li>\n<li><p>当对象没有变量使用的时候, 该对象就会被销毁, 引用计数为0时会销毁</p>\n</li>\n</ul>\n<h3 id=\"5-2-继承\"><a href=\"#5-2-继承\" class=\"headerlink\" title=\"5.2. 继承\"></a>5.2. 继承</h3><p><strong>语法</strong>：<code>class 子类名(父类名):</code>  &#x2F; <code>class 子类名(父类1, 父类2):</code></p>\n<p><strong>说明</strong>：子类复用父类里面的属性或方法,  提高代码的复用性,  能够使用父类里面的方法或者属性, 包括<code>__init__</code>方法</p>\n<p><strong>常识：</strong></p>\n<ul>\n<li><p>父类也称为基类,  子类也称为派生类</p>\n</li>\n<li><p>单继承：子类只继承一个父类</p>\n</li>\n<li><p>多继承：子类继承多个父类, 可以使用多个父类里的方法</p>\n<ul>\n<li><code>.mro()</code>  方法可查看类的继承顺序</li>\n</ul>\n</li>\n<li><p>多层继承：只要有类继承关系, 子类对父类及所有上层父类的方法都可以使用</p>\n</li>\n<li><p>继承后方法的调用：先从本类查找, 依次往后查找, 找到就停, 如果没找到对应方法, 程序崩溃</p>\n</li>\n<li><p>重写：子类继承父类, 对父类的功能方法进行重新改造（子类方法名要和父类方法名相同）</p>\n</li>\n</ul>\n<p><strong>子类调用父类方法：</strong></p>\n<ul>\n<li><p><code>self.方法()</code> : 当子类没有这个方法时候才可以用, 子类有相同方法时用<code>父类的类名.方法(self)</code></p>\n</li>\n<li><p><code>父类的类名.方法(self)</code> :  类名调用对象方法, 需要自己手动传入self参数, 对象调用对象方法, 不需要传self参数</p>\n</li>\n<li><p><code>super().方法()</code> :  <code>super</code>是一个类, <code>super()</code>表示创建了一个父类对象, 通过<code>__init__</code>方法给对象添加属性 </p>\n<ul>\n<li><p>完整写法 <code>super(子类名称, self).父类方法()</code>  : 指定类名, 根据子类获取对应父类</p>\n</li>\n<li><p>super本质: 根据指定类 在类的继承顺序**类名.mro()**中获取下一个类, 然后调用下一个类的方法, 如果是单继承, super的调用可以认为是调用的是父类的方法</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-私有权限\"><a href=\"#5-3-私有权限\" class=\"headerlink\" title=\"5.3. 私有权限\"></a>5.3. 私有权限</h3><ol>\n<li>在属性名和方法名前加两个下划线</li>\n<li>私有属性和私有方法只能在本类中使用, 不能在类外部使用</li>\n<li>其实私有属性及方法只是对属性名和方法名进行了包装, 把名字进行了修改</li>\n<li>总结: 私有属性和方法 的包装格式: 在属性名和方法名前面加 <code>_本类类名__</code></li>\n<li>子类无法使用父类的私有属性和私有方法, 也是把名字做了包装, 同上</li>\n<li>给对象添加私有属性只能在<code>__init__</code>方法里面完成</li>\n</ol>\n<h3 id=\"5-4-类属性和实例属性\"><a href=\"#5-4-类属性和实例属性\" class=\"headerlink\" title=\"5.4. 类属性和实例属性\"></a>5.4. 类属性和实例属性</h3><ul>\n<li><p><strong>类属性</strong>: 在类的内部init方法外部定义的属性, 类属性属于类</p>\n</li>\n<li><ul>\n<li><strong>私有类属性</strong>: 类名前加两个下划线, 也是把名字做了包装, 实际同对象的私有</li>\n</ul>\n</li>\n<li><p><strong>实例属性</strong>: 在init方法内部定义的属性称为实例属性, 实例属性属于实例  (实例 &#x3D;&#x3D; 对象)</p>\n</li>\n<li><p><strong>类不能访问对象属性, 但是对象可以访问类属性(对象不能修改类属性, 只能类去修改)</strong></p>\n</li>\n<li><p><strong>总结</strong>: 对象属性的操作是由对象完成, 类属性操作由类来完成, 只不过对象可以访问类属性(也可以用 <strong>self.<strong>class</strong>.类属性</strong> 修改类属性, 用class找到类然后是类去修改类属性), 类不能访问对象属性</p>\n</li>\n</ul>\n<h3 id=\"5-5-类中方法的种类\"><a href=\"#5-5-类中方法的种类\" class=\"headerlink\" title=\"5.5. 类中方法的种类\"></a>5.5. 类中方法的种类</h3><ul>\n<li><p><strong>实例方法</strong>: 方法的第一个参数是self, 那么这样的方法就是对象方法, self表示当前对象, 实例方法, 类不能调用</p>\n</li>\n<li><p><strong>类方法</strong>(修改和获取类的私有属性时使用): 方法第一参数cls并且还需要使用<code>@classmethod</code>的关键字进行修饰, cls表示当前类, 类方法可以获取和修改类的私有属性, 类方法类和对象都可以调用</p>\n</li>\n<li><p><strong>静态方法</strong>: 方法里没有self和cls参数并且还需要使用<code>@staticmethod</code>的关键字进行修饰</p>\n</li>\n</ul>\n<h2 id=\"6-异常-amp-模块\"><a href=\"#6-异常-amp-模块\" class=\"headerlink\" title=\"6. 异常&amp;模块\"></a>6. 异常&amp;模块</h2><h3 id=\"6-1-异常\"><a href=\"#6-1-异常\" class=\"headerlink\" title=\"6.1. 异常\"></a>6.1. 异常</h3><p><strong>异常捕获<code> try...except...</code></strong></p>\n<ul>\n<li><code>try</code> 表示尝试执行可能出问题的代码, <code>except</code> 表示如果代码出现异常, 进行捕获 <code>as e:</code></li>\n<li>捕获异常类型的通用写法就是用<code>Exception</code>,  因为大多数异常类型都是最终继承<code>Exception</code>的</li>\n<li><code>BaseException</code> 可以捕获任何异常</li>\n</ul>\n<p><strong><code>try...except...else...finally</code></strong></p>\n<ul>\n<li><code>except</code> 与 <code>else</code> 互斥,  <code>finally</code>不管有没有异常都执行</li>\n</ul>\n<p><strong>异常的传递</strong></p>\n<ul>\n<li>当执行代码的时候遇到错误, 首先判断当前代码块对异常进行捕获, 如果没有, 那么再把异常一层一层往外传递, 如果外界的都没对异常的捕获, 程序就会崩溃, 如果有异常捕获, 就不会崩溃了</li>\n</ul>\n<p><strong>自定义异常</strong></p>\n<ul>\n<li>class定义自定义异常类, 必须继承<code>Exception</code>或者<code>BaseException</code>才可以</li>\n<li>抛出自定义异常使用关键字<code>raise</code></li>\n<li>注意:raise只能抛出异常类的对象</li>\n</ul>\n<h3 id=\"6-2-模块\"><a href=\"#6-2-模块\" class=\"headerlink\" title=\"6.2. 模块\"></a>6.2. 模块</h3><p> <strong>通俗理解模块就是一个 .py 文件, 模块里面可以定义具体的功能代码(类, 函数, 全局变量, 匿名函数等等)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看导入模块的搜索路径 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)       </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>模块好比一个工具箱, 模块里的每一个具体代码好比一个工具</li>\n<li>模块的命名规则和变量名的命名规则一样 使用下划线命名</li>\n<li>模块名的组成和变量名组成一样, 字母, 数字, 下划线开头, 如果以数字开头, 这个模块就不能使用了</li>\n</ul>\n<p><strong>导入模块的两种方式</strong></p>\n<ul>\n<li>import 模块名  as 别名</li>\n<li>from 模块名 import 功能代码(函数, 类, 全局变量)   as 别名</li>\n<li>from 模块名 import *  导入模块里所有功能代码 一般不这样使用</li>\n</ul>\n<p><strong>导入模块注意点</strong></p>\n<ul>\n<li>自制的模块名不要和系统的模块重名</li>\n<li>使用from 模块名 import 功能, 在当前模块不要再定义导入功能的代码, 否则会覆盖之前导入功能代码</li>\n</ul>\n<p><strong>自制模块</strong></p>\n<ul>\n<li><strong>all</strong> 指定导入对应的功能代码  <strong>all</strong> &#x3D; [类名, 类名…..]  all定义针对外界使用from 模块名 import * 导入,  只能导入all里面指定的功能代码</li>\n</ul>\n<p><strong>主模块名字</strong>: <strong>main</strong>  </p>\n<p><strong>导入的模块名字</strong>:  就是模块原本的名字</p>\n<p><strong>包:</strong> <strong>通俗理解只要文件夹里包含一个__init__.py文件, 那么这个文件夹就是包</strong></p>\n<ul>\n<li><p>包的作用: 包是用来管理不同模块的 </p>\n</li>\n<li><p>模块的作用: 模块是用来管理不同功能代码的</p>\n</li>\n<li><p>包名的命名规则和变量名一样, 使用下划线命名法</p>\n</li>\n<li><p>包名的组成和变量名的组成一样, 数字, 字母, 下划线 不能数字开头</p>\n</li>\n<li><p><strong>包的特点</strong>:</p>\n</li>\n<li><ul>\n<li>包里面有一个__init__.py文件,这是包的初始化文件, 当且仅当第一次导入包的时候会执行这个文件</li>\n<li><strong>init</strong>.py 其实就是包的象征文件</li>\n<li><strong>init</strong>.py 可以控制模块的导入行为</li>\n<li><strong>init</strong>.py 可以定义类, 函数, 全局变量等代码</li>\n</ul>\n</li>\n</ul>\n<p><strong>包的导入目的使用包里面的模块</strong></p>\n<p><strong>格式</strong>: </p>\n<ul>\n<li>import 包名  指定导入包, 用包调用模块, 使用模块中的功能代码 第一次导入包的时候会默认调用__init__.py  </li>\n<li>import 包名.模块名</li>\n<li>from 包名 import 模块名</li>\n<li>from 包名 import 模块名 as 模块别名</li>\n<li>from 包名 import *      默认不是导入包里所有模块, 需要在__init__.py中使用__all__去指定</li>\n</ul>\n<h1 id=\"二-高级\"><a href=\"#二-高级\" class=\"headerlink\" title=\"二. 高级\"></a>二. 高级</h1><h2 id=\"1-多任务\"><a href=\"#1-多任务\" class=\"headerlink\" title=\"1. 多任务\"></a>1. 多任务</h2><h3 id=\"1-1-常识\"><a href=\"#1-1-常识\" class=\"headerlink\" title=\"1.1. 常识\"></a>1.1. 常识</h3><ul>\n<li><p>多任务的目的：充分利用CPU资源，提高执行效率</p>\n</li>\n<li><p>时间片：内核分配给程序执行的一小段时间，这个时间内进程拥有cpu资源</p>\n</li>\n<li><p>同步：协同步调，按预定的先后次序进行运行。如：你说完，我再说</p>\n</li>\n<li><p>进程、线程同步：可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行; B执行，再将结果给A; A再继续操作</p>\n</li>\n<li><p>进程状态: 等待状态不占用时间片, 即使时间片有剩余也会退出不占用CPU资源, 只有运行状态才占用CPU资源</p>\n<p><img src=\"/..%5Cimages%5Cimage-20230704132442670.png\" alt=\"image-20230704132442670\"></p>\n</li>\n</ul>\n<h3 id=\"1-2-执行形式\"><a href=\"#1-2-执行形式\" class=\"headerlink\" title=\"1.2. 执行形式\"></a>1.2. 执行形式</h3><ul>\n<li>并发：在一个时间段内，交替的执行多个任务，任务数 &gt; CPU核心数，时间片轮转</li>\n<li>并行：在一个时间点，多核CPU同时执行多个任务，任务数 &lt; CPU核心数</li>\n<li>一般情况下，并发和并行同时存在</li>\n</ul>\n<h3 id=\"1-3-实现方式：进程\"><a href=\"#1-3-实现方式：进程\" class=\"headerlink\" title=\"1.3. 实现方式：进程\"></a>1.3. 实现方式：进程</h3><ul>\n<li><strong>进程是操作系统进行资源(CPU、内存)分配的基本单位</strong></li>\n<li>程序中至少有一个进程，这个进程称为主进程</li>\n<li>主进程会等待所有子进程执行结束再结束<ul>\n<li>如果子进程没执行完，主进程会一直等待，此时如果子进程进入死循环会导致主进程无法退出解决办法：<ul>\n<li>设置子进程为守护主进程，主进程退出时子进程直接销毁: <code>sub_process.daemon = True</code></li>\n<li>主进程退出前先销毁子进程: <code>sub_process.terminate()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>每个进程中至少有一个线程，这个线程称为主线程</li>\n<li>进程间不共享全局变量</li>\n<li>进程之间执行也是无序的，由操作系统调度决定</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进程创建子进程时程序会复制一份代码去跑(也就是说操作系统会再次进行资源分配，所以创建出来的子进程所拥有的内存是和创建它的进程的内存是不同的，所以不可能共享全局变量)</span></span><br><span class=\"line\"><span class=\"comment\"># 打印全局变量id可发现变量的内存地址是不同的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_list = []  <span class=\"comment\"># 列表可变类型，为全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_val</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;reading list: <span class=\"subst\">&#123;my_list&#125;</span>, id: <span class=\"subst\">&#123;<span class=\"built_in\">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_val</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        my_list.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;writed.....<span class=\"subst\">&#123;my_list&#125;</span>, id: <span class=\"subst\">&#123;<span class=\"built_in\">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建子进程时：linux和mac不会拷贝主进程执行的代码，但windows会拷贝主进程代码并执行，所以对windows来说创建子进程的代码会发生递归执行而报错，需要把此部分代码放在__name__ == &quot;__main__&quot;判断下（判断主模块的代码只会执行一次），linux和mac就不需要</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    read_task = multiprocessing.Process(target=read_val)</span><br><span class=\"line\">    write_task = multiprocessing.Process(target=write_val)</span><br><span class=\"line\"></span><br><span class=\"line\">    write_task.start()</span><br><span class=\"line\">    read_task.start()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-实现方式：线程\"><a href=\"#1-4-实现方式：线程\" class=\"headerlink\" title=\"1.4. 实现方式：线程\"></a>1.4. 实现方式：线程</h3><ul>\n<li>线程是进程中执行代码的一个分支，每个线程想到执行代码需要CPU进行调度</li>\n<li><strong>线程是CPU调度的基本单位</strong>，每个进程至少有一个线程，称为主线程</li>\n<li>主线程会等待所有子线程结束再结束<ul>\n<li><code>sub_thread.setDaemon(True)</code></li>\n<li><code>threading.Thread(target=task, daemon=True)</code></li>\n</ul>\n</li>\n<li>线程执行时无序的, 谁抢到CPU, 谁就执行</li>\n<li>线程之间共享全局变量，因为在同一进程里面，所以使用的内存资源是相同的，这会导致数据错乱问题，解决方案<ul>\n<li>线程等待 <code>sub_thread.join()</code></li>\n<li>互斥锁：对共享数据进行锁定，保证同一时刻只有一个线程操作共享数据</li>\n<li>以上两种方法都是把多任务改成单任务去执行，保证了数据的准确性，但执行效率会下降</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    cur_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;sing: <span class=\"subst\">&#123;cur_thread&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;singing <span class=\"subst\">&#123;name&#125;</span>... \\n&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    cur_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;dance: <span class=\"subst\">&#123;cur_thread&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dancing... \\n&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial0</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线程无序&quot;&quot;&quot;</span></span><br><span class=\"line\">    main_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;main thread: <span class=\"subst\">&#123;main_thread&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sing_thread = threading.Thread(target=sing, args=(<span class=\"string\">&quot;正月十八&quot;</span>, ))</span><br><span class=\"line\">    dance_thread = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    sing_thread.start()</span><br><span class=\"line\">    dance_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程之间共享全局变量</span></span><br><span class=\"line\">g_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_data</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        g_list.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;added, <span class=\"subst\">&#123;g_list&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_data</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;read data <span class=\"subst\">&#123;g_list&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial1</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线程共享全局变量&quot;&quot;&quot;</span></span><br><span class=\"line\">    add_thread = threading.Thread(target=add_data)</span><br><span class=\"line\">    read_thread = threading.Thread(target=read_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    add_thread.start()</span><br><span class=\"line\">    read_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">g_num = <span class=\"number\">0</span></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_num0</span>():</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100_0000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">global</span> g_num  <span class=\"comment\"># int不可变要用全局需要声名</span></span><br><span class=\"line\">        g_num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;add0: <span class=\"subst\">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_num1</span>():</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100_0000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">global</span> g_num  <span class=\"comment\"># int不可变要用全局需要声名</span></span><br><span class=\"line\">        g_num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;add1: <span class=\"subst\">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial2</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;数据保护&quot;&quot;&quot;</span></span><br><span class=\"line\">    thread0 = threading.Thread(target=add_num0)</span><br><span class=\"line\">    thread1 = threading.Thread(target=add_num1)</span><br><span class=\"line\"></span><br><span class=\"line\">    thread0.start()</span><br><span class=\"line\">    <span class=\"comment\"># thread0.join()  # 线程等待 在0执行完再向下执行</span></span><br><span class=\"line\">    thread1.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    tutorial2()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-实现方式：协程\"><a href=\"#1-5-实现方式：协程\" class=\"headerlink\" title=\"1.5. 实现方式：协程\"></a>1.5. 实现方式：协程</h3><p><strong>迭代器 Iterator</strong></p>\n<ul>\n<li>可迭代对象(Iterable)定义：包含 <code>__iter__</code> 方法<ul>\n<li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断一个对象是否可迭代</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(A, Iterable)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>迭代器定义：包含 <code>__iter__</code> 和 <code>__next__</code> 方法<ul>\n<li>迭代是访问集合元素的一种方式</li>\n<li>迭代器是一个可以记住遍历位置的对象</li>\n<li>迭代器对象从集合第一个元素开始访问，直到所有元素被访问结束</li>\n<li>迭代器只能往前不能后退</li>\n<li>迭代器可以节省内存空间，实现循环</li>\n</ul>\n</li>\n<li>迭代器优点：存放生成数据的实现方式而不是具体数据，占用很少的内存空间</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Iterable, Iterator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassIterator</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, obj</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.obj = obj</span><br><span class=\"line\">        self.cur_num = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cur_num &gt;= <span class=\"built_in\">len</span>(self.obj.names):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        res = self.obj.names[self.cur_num]</span><br><span class=\"line\">        self.cur_num += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Classmate</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.names = <span class=\"built_in\">list</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.names.append(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;想要一个对象称为一个 可迭代对象, 即可以用for遍历</span></span><br><span class=\"line\"><span class=\"string\">        必须要有此方法</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassIterator(self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iter返回self</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fibonacci</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.nums = nums</span><br><span class=\"line\">        self.cur_num = <span class=\"number\">0</span></span><br><span class=\"line\">        self.a = <span class=\"number\">0</span></span><br><span class=\"line\">        self.b = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cur_num &gt;= <span class=\"built_in\">len</span>(self.nums):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = self.a</span><br><span class=\"line\">        self.a, self.b = self.b, self.a + self.b</span><br><span class=\"line\">        self.cur_num += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    classmate = Classmate()</span><br><span class=\"line\"></span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;zoo&quot;</span>)</span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;yoo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># iter方法会自动调用__iter__方法接收返回值, 其返回值就是迭代器也就是ClassIterator类创建的对象就是迭代器</span></span><br><span class=\"line\">    classmate_iterator = <span class=\"built_in\">iter</span>(classmate)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(classmate_iterator, Iterator))  <span class=\"comment\"># 判断是否是迭代器 True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> classmate:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)  <span class=\"comment\"># foo zoo yoo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(classmate, Iterable))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成器 Generator</strong></p>\n<ul>\n<li>生成器是一种特殊的迭代器</li>\n<li>如果一个函数中有<code>yield</code>语句，那么这个函数就不再是函数，而是一个生成器模板</li>\n<li>定义：生成器推导式<ul>\n<li>列表推导式：<code>[i for i in range(3)]</code><ul>\n<li>把列表推导式的<code>[]</code> 改为 <code>()</code> 返回的就是一个生成器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>生成器的启动：让生成器从断点处继续执行，即唤醒生成器<ul>\n<li><code>next()</code>第几次启动都可以，但不能传参</li>\n<li><code>obj.send(param)</code> 需要传参时使用，不能第一次启动时使用</li>\n</ul>\n</li>\n<li>获取生成器数据用 <code>next(generator)</code>方法</li>\n<li>生成器数据全部取出后再次使用<code>next()</code>方法会报<code>StopIteration</code>错误</li>\n<li><code>yield</code>关键字有两个作用<ul>\n<li>保存当前运行状态，暂停执行，将生成器挂起</li>\n<li>将<code>yield</code>关键字后面表达式的值作为返回值返回，此时类似<code>return</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_num</span>(<span class=\"params\">cnt</span>):</span><br><span class=\"line\">    a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    cur_num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur_num &lt; cnt:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        cur_num += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">gen_obj = create_num(<span class=\"number\">10</span>)  <span class=\"comment\"># 此时创建了一个生成器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gen_obj)  <span class=\"comment\"># &lt;generator object create_num at 0x0000022C5899D510&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_obj])  <span class=\"comment\"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>协程 Coroutine</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用greenlet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> greenlet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t1</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------A----------&quot;</span>)</span><br><span class=\"line\">        gr2.switch()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t2</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------B----------&quot;</span>)</span><br><span class=\"line\">        gr1.switch()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gr1 = greenlet(t1)</span><br><span class=\"line\">gr2 = greenlet(t2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gr1, gr2)</span><br><span class=\"line\">gr2.switch()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;greenlet.greenlet object at 0x00000276263C30F0 (otid=0x00000276263A9EE0) pending&gt; &lt;greenlet.greenlet object at 0x00000276263C31A0 (otid=0x00000276263C7040) pending&gt;</span></span><br><span class=\"line\"><span class=\"string\">----------B----------</span></span><br><span class=\"line\"><span class=\"string\">----------A----------</span></span><br><span class=\"line\"><span class=\"string\">----------B----------</span></span><br><span class=\"line\"><span class=\"string\">----------A----------</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用gevent碰到延时就切换到其他的greenlet去运行</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gevent <span class=\"keyword\">import</span> monkey</span><br><span class=\"line\">monkey.patch_all()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-不同实现方式对比\"><a href=\"#1-6-不同实现方式对比\" class=\"headerlink\" title=\"1.6. 不同实现方式对比\"></a>1.6. 不同实现方式对比</h3><ul>\n<li>进程是资源分配的基本单位，切换需要资源最大，效率很低</li>\n<li>线程是操作系统调度的基本单位，切换需要的资源一般，效率一般(不考虑GIL的情况下)</li>\n<li>协程切换任务需要的资源很小，效率高</li>\n<li>多进程、多线程根据CPU核数不同可能是并行的，协程在一个线程中所以一定是并发的</li>\n</ul>\n<h3 id=\"1-7-GIL锁\"><a href=\"#1-7-GIL锁\" class=\"headerlink\" title=\"1.7. GIL锁\"></a>1.7. GIL锁</h3><blockquote>\n<p>GIL（全局解释器锁）是一个在CPython解释器中的锁，用于确保同一时刻只有一个线程执行Python字节码。这是由于CPython的内存管理机制并不是线程安全的，因此GIL可以防止多个线程同时访问、修改同一块内存，从而避免了可能出现的数据竞争和内存错误。但同时，GIL也限制了Python多线程并行性能，在一些密集计算和多线程CPU密集型任务场景中表现不及其他语言和并发框架。</p>\n</blockquote>\n<blockquote>\n<p>CPython解释器的内存管理机制是基于引用计数的垃圾回收，即对象被引用一次计数器加一，对象引用被释放计数器减一，当计数器变为0时，对象被回收。这种内存管理机制并不是线程安全的，因为多个线程可能同时访问和修改同一块内存，从而导致计数器不一致，或者对象被销毁多次，或者内存泄漏等问题。因此，为了避免这些问题，CPython引入了GIL锁来确保同一时刻只有一个线程执行Python字节码，从而保证内存管理的线程安全性。</p>\n</blockquote>\n<ul>\n<li>全局解释器锁</li>\n<li>保证同一时间, 只有一个线程使用CPU, 不管主子线程</li>\n<li>GIL的存在导致, python中只有进程是可以并行的, 多线程实际也是并发的</li>\n<li>一个进程有一个GIL锁</li>\n<li>GIL不是python的特性, 只是CPython解释器的概念, 历史遗留问题</li>\n<li>所以cpu超线程对python是没用的！比如2核4线程，一个python死循环会让cpu两个线程跑满(这里说的线程是硬件层面的技术，模拟多个逻辑CPU提高处理并发性能)</li>\n</ul>\n<p>  <strong>GIL锁什么时候释放</strong></p>\n<ul>\n<li>当前线程执行超时后会释放</li>\n<li>当前线程阻塞操作时会自动释放(input, io&#x2F;输入输出)</li>\n<li>当前执行完成时</li>\n</ul>\n<p>  <strong>GIL的弊端</strong></p>\n<ul>\n<li>GIL对计算密集型的程序会产生影响。因为计算密集型的程序，需要占用系统资源。</li>\n<li>GIL的存在，相当于始终在进行单线程运算，这样自然就慢了。</li>\n<li>IO密集型影响不大的原因在于，IO，input&#x2F;output，这两个词就表明程序的瓶颈在于输入所耗费的时间，线程大部分时间在等待，所以它们是多个一起等（多线程）还是单个等（单线程）无所谓的。</li>\n</ul>\n<p>  <strong>解决方案：</strong></p>\n<p>  要提升多线程执行效率，解决方案：</p>\n<ul>\n<li>更换解释器</li>\n<li>改为进程替换多线程</li>\n<li>子线程使用C语言实现（绕过GIL锁）</li>\n</ul>\n<p>  <strong>必须要知道的是：</strong></p>\n<ul>\n<li>CPU 密集(计算密集)型不太适合多线程</li>\n<li>I&#x2F;O 密集型适合多线程&#x2F;协程（Gil锁会释放）</li>\n</ul>\n<h2 id=\"2-高级语法\"><a href=\"#2-高级语法\" class=\"headerlink\" title=\"2. 高级语法\"></a>2. 高级语法</h2><h3 id=\"2-1-闭包-amp-装饰器\"><a href=\"#2-1-闭包-amp-装饰器\" class=\"headerlink\" title=\"2.1. 闭包&amp;装饰器\"></a>2.1. 闭包&amp;装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;闭包</span></span><br><span class=\"line\"><span class=\"string\">定义：函数嵌套的前提下，内部函数使用了外部函数的变量或参数，外部函数返回内部函数</span></span><br><span class=\"line\"><span class=\"string\">作用：保存外部函数内的变量, 不会随着外部函数调用结束而销毁，但消耗内存!</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter0</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    local_a = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">b</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;a&#125;</span>, <span class=\"subst\">&#123;b&#125;</span> <span class=\"subst\">&#123;local_a&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t0</span>():</span><br><span class=\"line\">    foo = outter0(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    goo = outter0(<span class=\"string\">&quot;goo&quot;</span>)</span><br><span class=\"line\">    goo(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># inner: foo, hello world</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: goo, hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter1</span>(<span class=\"params\">a=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;outter: <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">b=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> a</span><br><span class=\"line\">        a = a + b  <span class=\"comment\"># 此时默认是是取local vars不声名nonlocal会报UnboundLocalError</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner a: <span class=\"subst\">&#123;a&#125;</span>, b: <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t1</span>():</span><br><span class=\"line\">    f = outter1()</span><br><span class=\"line\">    f()</span><br><span class=\"line\">    <span class=\"comment\"># outter: 10</span></span><br><span class=\"line\">    <span class=\"comment\"># inner a: 20, b: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">装饰器：本质就是一个闭包函数（但要求闭包函数有且只有一个参数, 参数必须是函数类型）</span></span><br><span class=\"line\"><span class=\"string\">装饰器的执行事件是加载模块事立即执行 (在函数定义时候执行了), 所以一般外部函数内不写其他东西, 只有内部函数</span></span><br><span class=\"line\"><span class=\"string\">特点：</span></span><br><span class=\"line\"><span class=\"string\">    - 不修改已有函数的源代码</span></span><br><span class=\"line\"><span class=\"string\">    - 不修改已有函数的调用方式</span></span><br><span class=\"line\"><span class=\"string\">    - 给已有函数增加额外的功能</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用装饰器(inner的参数为 *args, **kwargs也就是接收任意参数)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter2</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args, kwargs&#125;</span>&quot;</span>)</span><br><span class=\"line\">        res = f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;res&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@outter2  </span><span class=\"comment\"># 相当于执行了这句代码：func = outter2(func)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func2</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t2</span>():</span><br><span class=\"line\">    func2(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: ((1, 2), &#123;&#x27;d&#x27;: 5&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 5)</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带有参数的装饰器：装饰器外再加一层闭包</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter3</span>(<span class=\"params\">flag=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">outter2</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 此时只是打印flag, 没修改不可变类型，不需要声名nonlocal</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args, kwargs&#125;</span>, <span class=\"subst\">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class=\"line\">            res = f(*args, **kwargs)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;res&#125;</span>, <span class=\"subst\">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outter2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@outter3(<span class=\"params\"><span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func3</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t3</span>():</span><br><span class=\"line\">    func3(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: ((1, 2), &#123;&#x27;d&#x27;: 4&#125;), flag=True</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 4)</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: hello world, flag=True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outter4</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">        self.f = f</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args=&#125;</span>, <span class=\"subst\">&#123;kwargs=&#125;</span>&quot;</span>)</span><br><span class=\"line\">        res = self.f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Outter4</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func4</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t4</span>():</span><br><span class=\"line\">    func4(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: args=(1, 2), kwargs=&#123;&#x27;d&#x27;: 4&#125;</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 4)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    t4()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-property\"><a href=\"#2-2-property\" class=\"headerlink\" title=\"2.2. property\"></a>2.2. property</h3><p><strong>3. property属性</strong></p>\n<ul>\n<li>property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用</li>\n<li>定义方式<ul>\n<li>装饰器方式</li>\n<li>类属性方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类属性方式 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):     </span><br><span class=\"line\">        self.__age = <span class=\"number\">0</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_age</span>(<span class=\"params\">self</span>):     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__age   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">set_age</span>(<span class=\"params\">self, value</span>):    </span><br><span class=\"line\">        self.__age = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是获取值的方法， 第二个是设置值的方法   </span></span><br><span class=\"line\">    age = <span class=\"built_in\">property</span>(get_age, set_age)      </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器方式</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取年龄</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__age   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置年龄</span></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, value</span>):     </span><br><span class=\"line\">        self.__age = value  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-with语句-amp-上下文管理器\"><a href=\"#2-3-with语句-amp-上下文管理器\" class=\"headerlink\" title=\"2.3. with语句&amp;上下文管理器\"></a>2.3. with语句&amp;上下文管理器</h3><ul>\n<li>with 语句执行完成以后自动调用关闭文件操作, 即使出现异常</li>\n<li>一个类只要实现了<code>__enter__()</code>和<code>__exit__()</code>这个两个方法，通过该类创建的对象我们就称之为上下文管理器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要实现上下文管理器， 要实现__enter__ 和 __exit__  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">File</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, file_name, file_mode</span>):</span><br><span class=\"line\">        self.file_name = file_name</span><br><span class=\"line\">        self.file_mode = file_mode</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实现上文的方法，主要用来提供资源，需要返回一个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__enter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;entered up&#x27;</span>)</span><br><span class=\"line\">            self.fp = <span class=\"built_in\">open</span>(self.file_name, self.file_mode)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.fp</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 实现下文的方法，主要用来释放资源</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__exit__</span>(<span class=\"params\">self, exc_type, exc_val, exc_tb</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;exited down&#x27;</span>)</span><br><span class=\"line\">            self.fp.close()</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"keyword\">with</span> File(<span class=\"string\">&quot;a.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># entered up</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># exited down</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的，也就是说刚才使用 open 函数创建的文件对象就是就是一个上下文管理器对象</p>\n</li>\n<li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p>\n</li>\n<li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p>\n</li>\n</ul>\n<h3 id=\"2-4-深拷贝和浅拷贝\"><a href=\"#2-4-深拷贝和浅拷贝\" class=\"headerlink\" title=\"2.4. 深拷贝和浅拷贝\"></a>2.4. 深拷贝和浅拷贝</h3><ul>\n<li><code>import copy</code>拷贝的目的: 保证原数据和拷贝的数据之间不影响</li>\n<li><strong><code>copy.copy()</code> 浅拷贝</strong>，只对可变类型的第一层对象进行拷贝，对拷贝的对象开辟新的内存空间进行存储，不会拷贝对象内部的子对象<ul>\n<li>不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用</li>\n<li>可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝</li>\n</ul>\n</li>\n<li><strong><code>copy.deepcopy()</code> 深拷贝</strong>, 只要发现对象有可变类型就会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储<ul>\n<li>不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li>\n<li>可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li>\n</ul>\n</li>\n<li><strong>浅拷贝最多拷贝对象的一层 (即使可变类型, 也只拷贝第一层) 其它情况都是拷贝引用</strong></li>\n<li><strong>深拷贝可能拷贝对象的多层 (只要是有可变类型, 就全部拷贝) 其它情况都是拷贝引用</strong></li>\n</ul>\n<h3 id=\"2-5-单例\"><a href=\"#2-5-单例\" class=\"headerlink\" title=\"2.5. 单例\"></a>2.5. 单例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只有一份内存空间</span></span><br><span class=\"line\"><span class=\"comment\"># __new__ 开辟内存空间, 会在__init__之前执行 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\">    is_instance = <span class=\"literal\">None</span>   </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls.is_instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 保证下边代码执行一次</span></span><br><span class=\"line\">            cls.is_instance = <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls.is_instance</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls.is_instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Singleton()</span><br><span class=\"line\">b = Singleton()</span><br><span class=\"line\">c = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a) == <span class=\"built_in\">id</span>(b) == <span class=\"built_in\">id</span>(c)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"面试造飞机\"><a href=\"#面试造飞机\" class=\"headerlink\" title=\"面试造飞机\"></a>面试造飞机</h1><ol>\n<li><p>生成器和迭代器的区别</p>\n<ol>\n<li><strong>定义方式：</strong><ul>\n<li>生成器是一种特殊的函数，它使用 <code>yield</code> 关键字来定义，并在函数体内使用 <code>yield</code> 来产生值。生成器函数可以暂停执行，并在需要时恢复执行，每次恢复执行时会从上次暂停的位置继续执行。</li>\n<li>迭代器是一个实现了迭代协议的对象，它包含 <code>__iter__()</code> 方法和 <code>__next__()</code> 方法。<code>__iter__()</code> 方法返回迭代器自身，而 <code>__next__()</code> 方法用于返回迭代器的下一个值，如果没有下一个值则抛出 <code>StopIteration</code> 异常。</li>\n</ul>\n</li>\n<li><strong>使用方式：</strong><ul>\n<li>生成器通常用于生成一个序列的值，它们可以通过 <code>for</code> 循环来迭代产生的值，也可以通过调用 <code>next()</code> 函数手动迭代。</li>\n<li>迭代器则是一种更通用的迭代工具，它可以迭代任何实现了迭代协议的对象，包括列表、元组、集合等。迭代器可以通过 <code>iter()</code> 函数获取，也可以直接用于 <code>for</code> 循环中。</li>\n</ul>\n</li>\n<li><strong>内存占用：</strong><ul>\n<li>生成器是一种惰性求值（Lazy Evaluation）的机制，它只在需要时生成值，并且不会一次性将所有值存储在内存中，因此生成器在处理大量数据时具有较低的内存消耗。</li>\n<li>迭代器通常需要将所有的值存储在内存中，因此在处理大量数据时可能会消耗较多的内存。</li>\n</ul>\n</li>\n<li><strong>可变性：</strong><ul>\n<li>生成器是不可变的，一旦定义完成后，生成器的值无法修改。</li>\n<li>迭代器通常是可变的，可以在迭代过程中修改迭代器的状态，例如添加、删除元素等。</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，生成器和迭代器在 Python 中都是用于处理可迭代对象的工具，但它们的定义方式、使用方式、内存占用和可变性等方面有一些区别。生成器通常用于惰性生成值，而迭代器则是一种通用的迭代工具，用于迭代任意可迭代对象。</p>\n</li>\n<li><p>python内存管理(同GIL锁是cpython解释器的特性)</p>\n<ol>\n<li><p>Python的内存管理机制主要依赖于引用计数来迅速释放不再使用的对象，同时通过垃圾回收来处理循环引用等特殊情况，保证内存的高效利用。这种自动内存管理的方式让开发者从手动管理内存的负担中解放出来，提高了开发效率。</p>\n</li>\n<li><p>引用计数：Python使用引用计数来跟踪每个对象被引用的次数。当一个对象被创建或者另一个对象引用它时，引用计数就会增加。当一个对象的引用计数降为0时，表示没有任何变量指向该对象，那么该对象将成为垃圾，Python会回收这部分内存以供其他对象使用。</p>\n<ul>\n<li>引用计数的优点是在对象不再被引用时立即释放内存，因为没有等待垃圾回收器的运行。但是引用计数无法解决循环引用的问题（两个或更多的对象相互引用，导致它们的引用计数都不会降为0），为此，Python引入了垃圾回收机制。</li>\n</ul>\n</li>\n<li><p>垃圾回收（Garbage Collection）： Python中的垃圾回收机制是为了解决循环引用以及其他无法通过引用计数检测的垃圾对象。Python采用了分代回收算法，将对象分为不同的代（generation）。新创建的对象位于第0代，每经过一次垃圾回收，存活的对象会晋升到下一代。随着对象存活时间的增加，回收的频率会降低，因为大部分对象很快就会变成垃圾，只有少数长时间存活的对象才需要耗费更多的垃圾回收时间。</p>\n<ul>\n<li><p>标记-清除（Mark and Sweep）：垃圾回收器首先标记所有可以访问的对象，然后清除所有未标记的对象，释放其内存。</p>\n</li>\n<li><p>分代回收（Generational Garbage Collection）：将对象按照存活时间分为不同的代，一般将新创建的对象放入第0代，存活时间更长的对象依次放入第1代、第2代，通过不同代之间的垃圾回收来提高效率。</p>\n</li>\n<li><p>引用计数+标记-清除：综合利用引用计数和标记-清除算法，处理循环引用以及其他无法通过引用计数回收的对象。</p>\n</li>\n<li><p><strong>分代回收在处理循环引用的情况</strong>时，通过为每个对象分配一个分代标记来解决这个问题。分代标记可以被划分为两种类型：线程局部分代标记（thread local allocation context）和全局局部分代标记（global allocation context）。</p>\n<p>当一个对象被创建时，Python内核会为其分配一个分代标记，并将该标记与对象一起存储。对于循环引用的对象，分代标记会被保持不变。当一个对象被销毁时，Python通过检查对象的分代标记来确定是否已经被回收。如果对象的分代标记未被其他地方引用，那么该对象已经不再被使用，并需要进行回收。</p>\n<p>为了避免不必要的循环回收，Python内核会记录每个对象是否已经被回收。一旦对象被回收，就不会再被释放，即使再次被检测到。这样可以确保只有一次地回收每个对象。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>tcp与udp区别</p>\n<ol>\n<li>连接：tcp是一种面向连接的协议，在数据传输前要先建立一个连接，UDP是无连接协议，不需建立连接</li>\n<li>可靠性：TCP提供可靠的数据传输，确保数据包在从发送端到接收端的传输过程中不会丢失、被改变或出现重复，UDP不保证数据传输可靠性，可能导致丢包、被改变或重复</li>\n<li>速度：由于TCP的可靠性和流量控制机制，传输速度相对UDP会慢很多</li>\n<li>设计目的：TCP适用于对数据传输可靠性和稳定性要求较高，如文件传输、电子邮件和网页浏览等，UDP更擅长对实时性要求较高的应用，如实时语音、视频通信，在线游戏等</li>\n<li>头部信息：TCP和UDP的头部信息分别为20字节和8字节。TCP的头部信息包括数据包的序号和个别流标记，用于确保数据包在传输过程的顺序和完整性。UDP的头部信息相对较少主要包括数据包的源端和目标端的IP地址和端口</li>\n</ol>\n</li>\n<li><p>https原理</p>\n<ol>\n<li>SSL&#x2F;TCS 密钥包括一个私钥和一个公钥</li>\n<li>当用户通过浏览器访问一个HTTPS页面，服务器首先向浏览器发送公钥，浏览器接收到公钥后，会使用它来加密数据（请求头和请求体），然后将加密数据发送回服务器</li>\n<li>服务器使用接收到的加密数据和自己的私钥来解密数据。</li>\n</ol>\n</li>\n<li><p>TCP3次握手4次挥手</p>\n<ol>\n<li>客户端向服务端发送一个SYN（初始化）包，表明希望建立一个连接</li>\n<li>服务端同意建立连接会回复SYN+ACK包，表示可以建立连接</li>\n<li>客户端回复ACK包，连接建立</li>\n<li>客户端向服务端发送一个FIN包，表明希望断开连接，进入终止等待1状态</li>\n<li>服务端向客户端回复一个ACK包，表示进入终止等待状态，此时可传数据</li>\n<li>服务端向客户端发送一个FIN包，客户端进入终止等待2状态</li>\n<li>客户端向服务端回复一个ACK包，客户等待超时时间后断开连接，服务端立刻断开连接</li>\n</ol>\n</li>\n<li><p>Flask路由原理</p>\n<p>Flask 的路由原理主要基于装饰器和 Python 的函数式编程概念。具体来说，Flask 使用 @app.route() 装饰器将 URL 路径和视图函数绑定在一起。当接收到一个 HTTP 请求时，Flask 会根据请求的 URL 找到对应的视图函数，并执行该函数来处理请求。</p>\n</li>\n<li><p>django处理csrf原理</p>\n<p>Django处理CSRF的原理基本上是通过在每个页面加载时生成一个唯一的CSRF令牌，并将其存储在用户的会话中。当用户在表单中提交请求时，Django会验证请求中包含的CSRF令牌是否与用户会话中存储的令牌匹配，以确保请求来自于站点的合法来源。</p>\n</li>\n<li><p>django cookie session原理</p>\n<p>在Django中，会话（Session）是一种存储在服务器端的数据，用于在用户请求之间保持状态。Django通常使用基于cookie的会话来管理会话数据，其原理如下：</p>\n<ol>\n<li><strong>会话数据存储：</strong> 当用户首次访问Django应用时，Django会为该用户创建一个唯一的会话标识符（session ID），通常是一个随机生成的字符串。会话数据存储在服务器端的缓存中，默认情况下使用的是数据库缓存。会话数据可以包含任意类型的数据，例如用户的身份验证信息、用户偏好设置等。</li>\n<li><strong>会话ID的传递：</strong> 一旦会话数据存储在服务器端，Django会将会话ID发送给客户端浏览器，通常是通过一个名为<code>sessionid</code>的cookie。这个cookie包含了用户的会话ID，用于在后续的请求中标识用户的会话数据。</li>\n<li><strong>请求中的会话ID提取：</strong> 当用户在浏览器上发送新的请求时，浏览器会自动将之前设置的<code>sessionid</code> cookie包含在请求头中。</li>\n<li><strong>会话数据的检索：</strong> Django在处理请求时会检查请求头中是否包含<code>sessionid</code> cookie，如果包含，Django会使用该会话ID来检索对应的会话数据。</li>\n<li><strong>会话数据的使用：</strong> 一旦会话数据被检索到，Django会将其提供给视图函数，以便在视图中使用。开发人员可以在视图中读取和修改会话数据，从而实现跨请求的状态保持。</li>\n<li><strong>响应中的会话ID更新：</strong> 如果在处理请求时会话数据发生了变化，Django会在响应中将更新后的会话ID发送给客户端浏览器。这是为了确保会话ID的安全性，以及避免可能的会话固定攻击（Session Fixation Attack）。</li>\n</ol>\n<p>通过这种方式，Django使用基于cookie的会话机制来管理用户会话数据，从而实现了用户状态的保持和跨请求的数据传递。这种机制是一种常见的Web应用程序开发中用于处理用户状态的方式。</p>\n</li>\n</ol>\n<h1 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS\"></a>TIPS</h1><p>字典无序性: 在Python 3.7及之前的版本中，字典元素的顺序是不确定的，即它们的存储顺序与插入顺序不一定一致。但是从Python 3.7开始，字典保留了元素插入的顺序。这意味着当你迭代字典时，它们的顺序将与你添加键-值对的顺序相同。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ul>\n<li>编译型语言<ul>\n<li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li>\n<li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li>\n<li>示例：C++、Go、Java</li>\n</ul>\n</li>\n<li>解释型语言<ul>\n<li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li>\n<li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li>\n<li>示例：Python、JavaScript、Ruby</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-基中基\"><a href=\"#1-基中基\" class=\"headerlink\" title=\"1. 基中基\"></a>1. 基中基</h2><h3 id=\"1-1-关键字\"><a href=\"#1-1-关键字\" class=\"headerlink\" title=\"1.1. 关键字\"></a>1.1. 关键字</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>涉及功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>True, False, None</td>\n<td>真 假 空</td>\n</tr>\n<tr>\n<td>if, elif, else, and, not, assert, or, is, in</td>\n<td>逻辑判断</td>\n</tr>\n<tr>\n<td>try, except, finally, raise</td>\n<td>异常捕获</td>\n</tr>\n<tr>\n<td>for, while, continue, break, return</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>from, import</td>\n<td>导包</td>\n</tr>\n<tr>\n<td>def, class, lambda</td>\n<td>定义函数、类、匿名函数</td>\n</tr>\n<tr>\n<td>async, await, yield</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>global, nonlocal</td>\n<td>变量空间</td>\n</tr>\n<tr>\n<td>as, del, pass, with, type</td>\n<td>重命名、删除、PASS、上下文、类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-逻辑运算符\"><a href=\"#1-2-逻辑运算符\" class=\"headerlink\" title=\"1.2. 逻辑运算符\"></a>1.2. 逻辑运算符</h3><ul>\n<li>与 <code>and</code>: 一假即假</li>\n<li>或 <code>or</code>: 一真即真（注意短路逻辑： <code>1 or 1 / 0</code> 不会报错，程序只会走第一个1然后就会执行下一行）</li>\n<li>非 <code>not</code>: 真假取反</li>\n</ul>\n<h3 id=\"1-3-比较运算符\"><a href=\"#1-3-比较运算符\" class=\"headerlink\" title=\"1.3. 比较运算符\"></a>1.3. 比较运算符</h3><ul>\n<li><p><code>//</code> 取整除 9 &#x2F;&#x2F; 4 &#x3D; 2</p>\n</li>\n<li><p><code>%</code> 取余 9%4 &#x3D; 1</p>\n</li>\n<li><p><code>^</code>   取异或  把数字转化为二进制取  0 1 为 1 ，1 0 为 1， 1 1 为1， 0 0 为 0</p>\n</li>\n<li><p><code>**</code>  幂</p>\n</li>\n</ul>\n<h3 id=\"1-4-比较运算符\"><a href=\"#1-4-比较运算符\" class=\"headerlink\" title=\"1.4. 比较运算符\"></a>1.4. 比较运算符</h3><ul>\n<li><p><code>&gt; &lt; == != &gt;= &lt;=</code></p>\n</li>\n<li><p>返回的结果都是bool类型, True表示条件成立, False表示不成立.</p>\n</li>\n</ul>\n<h3 id=\"1-5-输入输出\"><a href=\"#1-5-输入输出\" class=\"headerlink\" title=\"1.5. 输入输出\"></a>1.5. 输入输出</h3><ul>\n<li><p><code>print()</code> 调用底层的<code>sys.stdout.write</code>方法，前往控制台打印输出</p>\n</li>\n<li><p><code>input()</code>  无论输入什么类型的数据，都会转化为字符串</p>\n</li>\n</ul>\n<h3 id=\"1-6-循环\"><a href=\"#1-6-循环\" class=\"headerlink\" title=\"1.6. 循环\"></a>1.6. 循环</h3><ul>\n<li><p>循环语句结合<code>else</code>语句使用，当循环语句执行了<code>break</code>表示非正常结束，<code>else</code>语句不会执行，否则会执行<code>else</code>语句</p>\n</li>\n<li><p>循环语句里有<code>break/return</code>时, <code>break/return</code>执行了, <code>else</code>语句就不会执行</p>\n</li>\n<li><p><code>break/continue</code> 只影响一层循环</p>\n</li>\n</ul>\n<h3 id=\"1-7-if三目运算\"><a href=\"#1-7-if三目运算\" class=\"headerlink\" title=\"1.7. if三目运算\"></a>1.7. if三目运算</h3><ul>\n<li><p><code>a if a &gt; b else b</code> 条件成立取a，不成立取b</p>\n</li>\n<li><p>if 除了判断bool类型, 还可以判断</p>\n<ul>\n<li>容器类型(字符串, 列表, 元组, 字典, 集合, <code>range()</code>, <code>bytes()</code>) 判断是否有数据</li>\n<li>非零即真(只要不是0, 条件都成立)</li>\n<li>None 条件不成立, not none, 表示非空, 条件成立</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-8-注释\"><a href=\"#1-8-注释\" class=\"headerlink\" title=\"1.8 注释\"></a>1.8 注释</h3><ul>\n<li>单行 <code># 这是注释</code></li>\n<li>多行 <code>&quot;&quot;&quot; 这是多行注释 &quot;&quot;&quot;</code></li>\n</ul>\n<h2 id=\"2-容器\"><a href=\"#2-容器\" class=\"headerlink\" title=\"2. 容器\"></a>2. 容器</h2><h3 id=\"2-1-字符串\"><a href=\"#2-1-字符串\" class=\"headerlink\" title=\"2.1. 字符串\"></a>2.1. 字符串</h3><blockquote>\n<p><strong>字符串用<code>join</code>比直接<code>+</code>高效原因</strong>：在 Python 中，字符串是不可变类型，这意味着一旦我们创建了一个字符串对象，它就不能被修改或更新。因此，每次使用 <code>+</code> 操作符拼接字符串时，都会创建一个新的字符串对象，并将之前字符串对象的内容复制到新的字符串对象中，这个复制的操作会带来额外的内存分配和内存拷贝的开销，特别是在需要拼接大量的字符串时，会消耗大量的系统资源，导致程序运行缓慢。 相对地，使用 <code>join()</code> 方法的拼接字符串操作则更加高效。<code>join()</code> 方法本质上是将多个字符串通过指定的分隔符拼接在一起，而与此相关的方法包括 <code>split()</code>，<code>replace()</code> 和 <code>format()</code> 等方法，它们均采用类似的算法。在 <code>join()</code> 方法的实现中，Python 的解释器会先在内存中分配一个足够大的单个字符串缓冲区，然后扫描要拼接的字符串，将其复制到单个缓冲区中，并在不同字符串之间插入指定的分隔符。这种方法可以有效地避免频繁创建或拷贝字符串对象，从而提高拼接字符串的效率。 此外，<code>join()</code> 方法还可以接受一个可迭代对象作为参数，如列表，元组，生成器等，它们会返回一个字符串，其中可迭代对象按照指定的分隔符进行拼接。这种方式具有更高的灵活性和实用性，因为它可以用于拼接任意数量的字符串，而且可以用于迭代较大的数据集合，而不会导致系统资源消耗过多。</p>\n</blockquote>\n<ul>\n<li>定义：用单引号、双引号、三引号均可，仅三引号可以换行</li>\n<li>切片：<code>[开始位置:结束位置:步长]</code> 左闭右开<ul>\n<li><code>[::-1]</code> 字符串快速逆置</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_str = <span class=\"string\">&quot;python&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_str, <span class=\"built_in\">str</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_age, <span class=\"built_in\">int</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_age = <span class=\"built_in\">str</span>(my_age)  <span class=\"comment\"># &quot;18&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(my_age, <span class=\"built_in\">str</span>)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用</strong></p>\n<ul>\n<li><code>.find(要查询的字符, 查询开始索引, 查询结束索引)</code> 左闭右开，查空返回 -1</li>\n<li><code>.replace(str1, str2, 替换次数)</code> 字符串替换，替换次数默认-1全部替换</li>\n<li><code>.split(str1, 切片次数)</code> 字符串以 str1 为分隔符进行切片，切片次数默认-1全部切，返回分隔后的列表</li>\n<li><code>.lower()</code> 英文转小写 <code>upper()</code>转大写</li>\n</ul>\n<h3 id=\"2-2-列表\"><a href=\"#2-2-列表\" class=\"headerlink\" title=\"2.2. 列表\"></a>2.2. 列表</h3><p><strong>定义</strong>：<code>[]</code> 或 <code>list()</code> </p>\n<p><strong>列表推导式</strong>： 列表中可以包含条件语句，表示筛选符合条件的元素。在这种情况下，底层逻辑还会涉及以下步骤：</p>\n<ol>\n<li>创建一个空列表。</li>\n<li>对于列表推导式中的每个元素表达式，按照迭代顺序依次执行以下步骤：<ol>\n<li>在当前作用域中计算元素表达式的值。</li>\n<li>如果条件表达式的值为真，则将计算得到的值添加到列表中。</li>\n</ol>\n</li>\n<li>返回最终生成的列表。</li>\n</ol>\n<p><strong>增</strong></p>\n<ul>\n<li><code>.append</code> 加整个对象，加字典也是整个字典</li>\n<li><code>.extend</code> 打散加进去，加字典默认加字典的<code>key</code></li>\n<li><code>.insert(index, obj)</code> 在指定位置前面加, 是整个加进去的</li>\n</ul>\n<p><strong>删</strong></p>\n<ul>\n<li><p><code>del list[::]</code> 可以和切片一起操作根据索引删除列表元素</p>\n</li>\n<li><p><code>.pop()</code> 只能根据单独索引删除对应元素, 默认删最后一个, 会返回删除的元素</p>\n</li>\n<li><p><code>.remove()</code> 指定元素删除</p>\n</li>\n</ul>\n<p><strong>改</strong></p>\n<p><code>list[index] = &quot;new&quot;</code>  可以用切片同时更改多个数据,注意下面示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list = [<span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[<span class=\"number\">0</span>] = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[:<span class=\"number\">0</span>] = <span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list[:<span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>查</strong></p>\n<ul>\n<li><code>in</code> 判断是否存在，只可判断最外层数据，内层还有容器要索引进去查</li>\n<li><code>.index(obj, start, end)</code> 左闭右开，找不到报<code>ValueError</code></li>\n<li><code>.count(obj)</code></li>\n</ul>\n<p><strong>排序</strong></p>\n<ul>\n<li><p><code>.sort(reverse=False)</code> 默认是从小到大, <code>reverse=True</code> 改为从大到小</p>\n</li>\n<li><p><code>.reverse()</code> 将列表逆置, 与上面的<code>reverse=True</code>不同</p>\n</li>\n</ul>\n<h3 id=\"2-3-元组\"><a href=\"#2-3-元组\" class=\"headerlink\" title=\"2.3. 元组\"></a>2.3. 元组</h3><p><strong>定义</strong>：<code>tuple()</code> 或 <code>(1, 2)</code>  如果只有一个元素, 逗号不能省略, 有序</p>\n<h3 id=\"2-4-字典\"><a href=\"#2-4-字典\" class=\"headerlink\" title=\"2.4. 字典\"></a>2.4. 字典</h3><p><strong>定义</strong></p>\n<ul>\n<li><code>dict()</code> 或 <code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></li>\n<li><code>zip</code>组合<code>key</code>和<code>value</code> 生成字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>keys = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_dict = <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>(keys, values))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_dict</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>增:</strong>   </p>\n<ul>\n<li><code>dict[key] = value</code></li>\n</ul>\n<p><strong>删:</strong>   </p>\n<ul>\n<li><p><code>del dict[key]</code>  必须要有<code>key</code>数据</p>\n</li>\n<li><p><code>.pop(key, default)</code>  必须要有<code>key</code>数据, 会返回所删项的<code>value</code>, 如果字典里没有这个<code>key</code>就会返回<code>default</code></p>\n</li>\n<li><p><code>.popitem()</code>  takes no arguments, return the last item as a tuple()</p>\n</li>\n<li><p><code>.clear()</code> 清空</p>\n</li>\n</ul>\n<p><strong>改:</strong>  </p>\n<ul>\n<li><code>dict[key] = value</code>  和增加元素相同, 所以当原本没有此<code>key</code>就变成增加元素了</li>\n</ul>\n<p><strong>查:</strong>   </p>\n<ul>\n<li><p><code>dict[key]</code>  如果不存在会报错</p>\n</li>\n<li><p><code>.get(key, default)</code>   如果不存在则返回<code>default</code>  不写<code>default</code>找不到会返回<code>None</code> 不会报错</p>\n</li>\n</ul>\n<p><strong>合并:</strong>  </p>\n<ul>\n<li><code>dict1.update(dict2)</code>  把字典2的每个键值对数据合并到字典1中, 如果有重复的则更新1的内容</li>\n</ul>\n<p><strong>遍历:</strong> </p>\n<ul>\n<li><code>for key in dict.keys()</code></li>\n<li><code>for values in dict.values()</code></li>\n<li><code>for item in dict.items()</code>           <strong>item是个tuple</strong></li>\n<li><code>for key, value in dict.items()</code>         遍历 + 拆包</li>\n</ul>\n<p><strong>排序：</strong></p>\n<ul>\n<li><code>sorted(d.items(), key=lambda x : x[0/1])</code></li>\n</ul>\n<h3 id=\"2-5-集合\"><a href=\"#2-5-集合\" class=\"headerlink\" title=\"2.5. 集合\"></a>2.5. 集合</h3><ul>\n<li>集合是一个容器类型, 可以存储多个数据, 但是多个数据不能重复</li>\n<li>集合只能存储不可变类型数据, 也就是: 数字, 字符串, 元组    同字典的key</li>\n<li>空集合不能使用**{}**来表示, {}是字典, 创建时用 <strong>set()</strong> 来创建空集合</li>\n<li>遍历集合不能用通过下标, 可以用for遍历, 可迭代对象</li>\n</ul>\n<p><strong>特点:</strong></p>\n<ol>\n<li>无序, so集合不能通过索引获取数据和通过索引修改数据</li>\n<li>数据不能重复,数据是唯一的</li>\n<li>可变类型</li>\n</ol>\n<p><strong>操作符：</strong></p>\n<p><strong>^</strong>  补  {1，2} ^ {2, 3}  &#x3D;&gt;  {1, 3}</p>\n<p><strong>&amp;</strong> 交  {1，2} &amp; {2, 3}  &#x3D;&gt;  {2, }</p>\n<p><strong>|</strong>   并   {1，2} | {2, 3}  &#x3D;&gt;  {1, 2, 3}</p>\n<p><strong>-</strong>   差   {1，2} - {2, 3}  &#x3D;&gt;  {1, }</p>\n<p><strong>增:</strong></p>\n<p>.<strong>add()</strong> 重复的数据只保留一个</p>\n<p><strong>删:</strong></p>\n<p><strong>.remove(value)</strong> 指定数据删除</p>\n<h3 id=\"2-6-公共方法\"><a href=\"#2-6-公共方法\" class=\"headerlink\" title=\"2.6. 公共方法\"></a>2.6. 公共方法</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>Python 表达式</th>\n<th>结果</th>\n<th>描述</th>\n<th>支持的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>[1, 2] + [3, 4]</td>\n<td>[1, 2, 3, 4]</td>\n<td>合并</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td>*</td>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>复制</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td>in</td>\n<td>3 in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>4 not in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否不存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n</tbody></table>\n<p><strong>python内置函数</strong></p>\n<ul>\n<li><p><code>len()</code>  获取容器的元素数量</p>\n</li>\n<li><p><code>max()</code>  返回容器中元素最大值  |  类似的 <code>min()</code>  最小</p>\n</li>\n<li><p><code>enumerate()</code> </p>\n<ul>\n<li>在使用for循环的时候可以遍历数据又可以遍历索引, 列表&#x2F;元组&#x2F;字典都可以使用</li>\n<li>当用于字典遍历所有items时返回的是一个索引数据和一个元组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-7-可变不可变类型\"><a href=\"#2-7-可变不可变类型\" class=\"headerlink\" title=\"2.7. 可变不可变类型\"></a>2.7. 可变不可变类型</h3><p>不可变类型</p>\n<ul>\n<li>定义：不允许在原本内存空间基础上修改数据, 修改数据后内存地址会发生变化</li>\n<li>示例：列表, 字典, 集合</li>\n</ul>\n<p>可变类型</p>\n<ul>\n<li>定义：允许在原本内存空间修改数据，修改后一是在原有内存空间基础上修改数据内存不变，二是重新赋值内存地址可能发生变化</li>\n<li>示例：数字, 字符串, 元组</li>\n</ul>\n<h2 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3. 函数\"></a>3. 函数</h2><blockquote>\n<p>程序中定义的变量都是保存在内存中的, 局部变量也是, 当函数执行结束后局部变量都会销毁,内存释放</p>\n</blockquote>\n<h3 id=\"3-1-文档说明\"><a href=\"#3-1-文档说明\" class=\"headerlink\" title=\"3.1. 文档说明\"></a>3.1. 文档说明</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; func docs &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;&#x27;&#x27; others &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;life is short i use python&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"><span class=\"built_in\">help</span>(show)</span><br><span class=\"line\"><span class=\"comment\"># life is short i use python</span></span><br><span class=\"line\"><span class=\"comment\"># Help on function show in module __main__:</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># show()</span></span><br><span class=\"line\"><span class=\"comment\">#     func docs</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-返回值\"><a href=\"#3-2-返回值\" class=\"headerlink\" title=\"3.2. 返回值\"></a>3.2. 返回值</h3><ul>\n<li>函数不写<code>return</code> 取函数返回值时会取到 <code>None</code></li>\n<li>在多层循环中 <code>return</code> 可把多层全部终止，<code>break</code> 只能终止一层</li>\n</ul>\n<h3 id=\"3-3-局部变量-amp-全局变量\"><a href=\"#3-3-局部变量-amp-全局变量\" class=\"headerlink\" title=\"3.3. 局部变量&amp;全局变量\"></a>3.3. 局部变量&amp;全局变量</h3><ul>\n<li><p>局部变量：作用域仅在函数体内部,  随着函数执行结束会销毁</p>\n</li>\n<li><p>全局变量：在函数体内外都生效，不会随着函数执行结束会销毁</p>\n</li>\n<li><p><code>global</code> 本质是表示:  要修改全局变量的内存地址, 所以只有不可变类型需要<code>global</code></p>\n</li>\n<li><p>在函数内部使用全局变量时, 要先声明 <code>global</code> 全局变量, 如果是可变类型就不需要了</p>\n</li>\n<li><p>对于操作全局变量的数据, 如果是通过重新赋值来完成的, 那么必须加上<code>global</code>关键字</p>\n</li>\n<li><p><code>nonlocal</code> 使用场景是函数嵌套时，内层函数要使用外层函数的变量或参数</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = [<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> a</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    b.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">t()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a, b)</span><br><span class=\"line\"><span class=\"comment\"># 2 [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\"># 2 [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-函数参数\"><a href=\"#3-4-函数参数\" class=\"headerlink\" title=\"3.4. 函数参数\"></a>3.4. 函数参数</h3><ul>\n<li><p>分类</p>\n<ul>\n<li><p>位置参数：按照位置顺序依次给函数的参数传值</p>\n</li>\n<li><p>关键字参数：按照关键字名给函数的参数传值</p>\n</li>\n</ul>\n<p>注：前面按位置, 后面按关键字, 如果前面用了关键字参数, 后面不能再使用位置参数, 只能使用关键字参数传参</p>\n</li>\n<li><p>不定长参数: 函数的参数个数不确定, 可能0个, 可能多个</p>\n<ul>\n<li>不定长位置参数, <code>*args</code>, 调用函数时所有位置参数都封装成元组, 赋值给<code>args</code></li>\n<li>不定长关键字参数, <code>**kwargs</code>, 调用函数时所有关键字参数都封装成字典, 赋值给<code>kwargs</code></li>\n</ul>\n<p>注: <code>*args</code> 和 <code>**kwargs</code> 这两个参数名可以修改, 但一般不改, 大家习惯了</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">name, *args, age=<span class=\"number\">18</span>, **kwargs</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;name:&quot;</span>, name, <span class=\"string\">&quot;age:&quot;</span>, age, <span class=\"string\">&quot;args:&quot;</span>, args, <span class=\"string\">&quot;kwargs:&quot;</span>, kwargs)</span><br><span class=\"line\">show(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;a&quot;</span>, a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, age=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># name: 李四 age: 20 args: (1, 2, &#x27;a&#x27;) kwargs: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>拆包</strong>：使用不同变量保存容器类型中的每个数据，对应的变量和数据数量要保持一致致</p>\n<ul>\n<li><p>容器类型如:字符串, 列表, 元组, 字典, range, 集合(set) 都可以利用拆包, 容器类型可以使用变量保存不同的数据</p>\n</li>\n<li><p><code>*my_tuple</code>: 对元组&#x2F;列表进行拆包, 也就是把元组&#x2F;列表里每个数据按位置参数进行传参</p>\n</li>\n<li><p><code>**my_dict</code>: 对字典进行拆包, 也就是把字典里面的每一个键值对按关键字的方式进行传参</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-匿名函数\"><a href=\"#3-5-匿名函数\" class=\"headerlink\" title=\"3.5. 匿名函数\"></a>3.5. 匿名函数</h3><p>定义：没有名字的函数, 就是匿名函数, 匿名函数返回值不需要 <code>return</code>，用<code> lambda</code> 定义</p>\n<p>格式:  <code>lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_func = <span class=\"keyword\">lambda</span> a: <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_func(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-常见函数定义\"><a href=\"#3-6-常见函数定义\" class=\"headerlink\" title=\"3.6. 常见函数定义\"></a>3.6. 常见函数定义</h3><ul>\n<li>递归函数: 在一个函数内调用的是函数本身, 这样的函数称为递归函数</li>\n<li>函数嵌套：python中, 可以在函数内部再定义一个函数, 称为函数的嵌套（例：装饰器）</li>\n<li>高阶函数：函数的参数或者返回值是一个函数类型, 那么这样的函数就叫高阶函数（例：装饰器）</li>\n</ul>\n<h2 id=\"4-文件\"><a href=\"#4-文件\" class=\"headerlink\" title=\"4. 文件\"></a>4. 文件</h2><h3 id=\"4-1-常识\"><a href=\"#4-1-常识\" class=\"headerlink\" title=\"4.1. 常识\"></a>4.1. 常识</h3><ul>\n<li><p>在windows的python解释器里面, 打开文件默认的编码格式是 <code>gbk</code> 的</p>\n</li>\n<li><p>在mac和linux的解释器里面, 打开文件默认的编码格式是 <code>utf-8</code> 的</p>\n</li>\n<li><p><code>utf-8</code> 一个汉字占用三个字节, 一个字母占1个字节</p>\n</li>\n<li><p>编码:  <code>.encode(&quot;utf-8&quot;)</code></p>\n</li>\n<li><p>解码:  <code>.decode(&quot;utf-8&quot;)</code></p>\n</li>\n</ul>\n<h2 id=\"5-面向对象\"><a href=\"#5-面向对象\" class=\"headerlink\" title=\"5. 面向对象\"></a>5. 面向对象</h2><blockquote>\n<p>面向对象就是对面向过程的封装</p>\n<p><strong>面向对象的三大特性</strong></p>\n<p><strong>封装:</strong> 把属性和方法放到类里面的操作就是封装, 封装可以控制属性和方法的访问权限</p>\n<p><strong>继承:</strong> 子类可以使用父类的方法或者属性, 提高了代码的复用性, 注意点: 父类的功能满足不了子类的需要, 重写父类的方法</p>\n<p><strong>多态:</strong> </p>\n<ul>\n<li>对象调用同一个方法会出现不同的表现形式(表现结果)</li>\n<li>多态的好处, 代码的可扩展性强, 代码兼容性强, 不关系类型, 只关系对象是否具有指定功能方法</li>\n</ul>\n</blockquote>\n<h3 id=\"5-0-类的实例化过程\"><a href=\"#5-0-类的实例化过程\" class=\"headerlink\" title=\"5.0. 类的实例化过程\"></a>5.0. 类的实例化过程</h3><ol>\n<li><p>内存分配：Python为对象分配所需的内存空间。</p>\n</li>\n<li><p>初始化实例：调用类的__init__方法来初始化实例。__init__方法是类中一个特殊的方法，它在实例化对象时被自动调用。</p>\n</li>\n<li><p>创建对象引用：创建一个指向该实例的引用，允许你通过变量来访问该实例。</p>\n</li>\n<li><p>执行__new__方法（可选）：如果定义了__new__方法，它将在__init__之前被调用。__new__方法负责创建实例。</p>\n</li>\n<li><p>返回实例：返回一个指向新实例的引用，使你可以使用该引用来操作该实例。</p>\n</li>\n</ol>\n<p>总结起来，实例化一个类时，Python会为对象分配内存空间，然后调用__init__方法初始化实例，最后返回新实例的引用。这样，就可以通过该引用来操作和访问该实例的属性和方法。</p>\n<h3 id=\"5-1-魔法方法\"><a href=\"#5-1-魔法方法\" class=\"headerlink\" title=\"5.1. 魔法方法\"></a>5.1. 魔法方法</h3><p><strong>定义</strong>：方法名前后都有两个下划线, 这样的方法称为魔法方法, 魔法方法具有一定的特殊功能</p>\n<p><strong>常见魔法方法</strong>：</p>\n<ul>\n<li><p><code>__new__</code> 分配内存的方法, 在<code>__init__</code>之前调用</p>\n</li>\n<li><p><code>__init__</code>, 在创建一个对象时默认被调用,不需要手动调用, 可以在此方法内添加对象属性</p>\n</li>\n<li><p><code>__del__</code>, 创建对象后, python解释器默认调用<code>__init__</code>方法, 当删除对象时, python解释器也会默认调用<code>__del__</code>方法</p>\n</li>\n<li><p><code>__str__</code>, 当使用<code>print</code>输出对象的时候, 默认打印对象的内存地址, 如果类定义了此方法,那么就会打印从在这个方法中<code>return</code>的数据, 此方法返回必须是字符串类型, 作为这个对象的描述信息. </p>\n</li>\n<li><p><code>__slots__</code>方法, 限定自定义类型的的对象只能绑定某些属性, 只对当前类对象生效, 对子类并不起任何作用</p>\n</li>\n<li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p>\n</li>\n<li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p>\n</li>\n</ul>\n<p><strong>对象销毁的方式</strong>:</p>\n<ul>\n<li><p>程序运行结束, 程序中所使用对象都要在内存中销毁</p>\n</li>\n<li><p>当对象没有变量使用的时候, 该对象就会被销毁, 引用计数为0时会销毁</p>\n</li>\n</ul>\n<h3 id=\"5-2-继承\"><a href=\"#5-2-继承\" class=\"headerlink\" title=\"5.2. 继承\"></a>5.2. 继承</h3><p><strong>语法</strong>：<code>class 子类名(父类名):</code>  &#x2F; <code>class 子类名(父类1, 父类2):</code></p>\n<p><strong>说明</strong>：子类复用父类里面的属性或方法,  提高代码的复用性,  能够使用父类里面的方法或者属性, 包括<code>__init__</code>方法</p>\n<p><strong>常识：</strong></p>\n<ul>\n<li><p>父类也称为基类,  子类也称为派生类</p>\n</li>\n<li><p>单继承：子类只继承一个父类</p>\n</li>\n<li><p>多继承：子类继承多个父类, 可以使用多个父类里的方法</p>\n<ul>\n<li><code>.mro()</code>  方法可查看类的继承顺序</li>\n</ul>\n</li>\n<li><p>多层继承：只要有类继承关系, 子类对父类及所有上层父类的方法都可以使用</p>\n</li>\n<li><p>继承后方法的调用：先从本类查找, 依次往后查找, 找到就停, 如果没找到对应方法, 程序崩溃</p>\n</li>\n<li><p>重写：子类继承父类, 对父类的功能方法进行重新改造（子类方法名要和父类方法名相同）</p>\n</li>\n</ul>\n<p><strong>子类调用父类方法：</strong></p>\n<ul>\n<li><p><code>self.方法()</code> : 当子类没有这个方法时候才可以用, 子类有相同方法时用<code>父类的类名.方法(self)</code></p>\n</li>\n<li><p><code>父类的类名.方法(self)</code> :  类名调用对象方法, 需要自己手动传入self参数, 对象调用对象方法, 不需要传self参数</p>\n</li>\n<li><p><code>super().方法()</code> :  <code>super</code>是一个类, <code>super()</code>表示创建了一个父类对象, 通过<code>__init__</code>方法给对象添加属性 </p>\n<ul>\n<li><p>完整写法 <code>super(子类名称, self).父类方法()</code>  : 指定类名, 根据子类获取对应父类</p>\n</li>\n<li><p>super本质: 根据指定类 在类的继承顺序**类名.mro()**中获取下一个类, 然后调用下一个类的方法, 如果是单继承, super的调用可以认为是调用的是父类的方法</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-私有权限\"><a href=\"#5-3-私有权限\" class=\"headerlink\" title=\"5.3. 私有权限\"></a>5.3. 私有权限</h3><ol>\n<li>在属性名和方法名前加两个下划线</li>\n<li>私有属性和私有方法只能在本类中使用, 不能在类外部使用</li>\n<li>其实私有属性及方法只是对属性名和方法名进行了包装, 把名字进行了修改</li>\n<li>总结: 私有属性和方法 的包装格式: 在属性名和方法名前面加 <code>_本类类名__</code></li>\n<li>子类无法使用父类的私有属性和私有方法, 也是把名字做了包装, 同上</li>\n<li>给对象添加私有属性只能在<code>__init__</code>方法里面完成</li>\n</ol>\n<h3 id=\"5-4-类属性和实例属性\"><a href=\"#5-4-类属性和实例属性\" class=\"headerlink\" title=\"5.4. 类属性和实例属性\"></a>5.4. 类属性和实例属性</h3><ul>\n<li><p><strong>类属性</strong>: 在类的内部init方法外部定义的属性, 类属性属于类</p>\n</li>\n<li><ul>\n<li><strong>私有类属性</strong>: 类名前加两个下划线, 也是把名字做了包装, 实际同对象的私有</li>\n</ul>\n</li>\n<li><p><strong>实例属性</strong>: 在init方法内部定义的属性称为实例属性, 实例属性属于实例  (实例 &#x3D;&#x3D; 对象)</p>\n</li>\n<li><p><strong>类不能访问对象属性, 但是对象可以访问类属性(对象不能修改类属性, 只能类去修改)</strong></p>\n</li>\n<li><p><strong>总结</strong>: 对象属性的操作是由对象完成, 类属性操作由类来完成, 只不过对象可以访问类属性(也可以用 <strong>self.<strong>class</strong>.类属性</strong> 修改类属性, 用class找到类然后是类去修改类属性), 类不能访问对象属性</p>\n</li>\n</ul>\n<h3 id=\"5-5-类中方法的种类\"><a href=\"#5-5-类中方法的种类\" class=\"headerlink\" title=\"5.5. 类中方法的种类\"></a>5.5. 类中方法的种类</h3><ul>\n<li><p><strong>实例方法</strong>: 方法的第一个参数是self, 那么这样的方法就是对象方法, self表示当前对象, 实例方法, 类不能调用</p>\n</li>\n<li><p><strong>类方法</strong>(修改和获取类的私有属性时使用): 方法第一参数cls并且还需要使用<code>@classmethod</code>的关键字进行修饰, cls表示当前类, 类方法可以获取和修改类的私有属性, 类方法类和对象都可以调用</p>\n</li>\n<li><p><strong>静态方法</strong>: 方法里没有self和cls参数并且还需要使用<code>@staticmethod</code>的关键字进行修饰</p>\n</li>\n</ul>\n<h2 id=\"6-异常-amp-模块\"><a href=\"#6-异常-amp-模块\" class=\"headerlink\" title=\"6. 异常&amp;模块\"></a>6. 异常&amp;模块</h2><h3 id=\"6-1-异常\"><a href=\"#6-1-异常\" class=\"headerlink\" title=\"6.1. 异常\"></a>6.1. 异常</h3><p><strong>异常捕获<code> try...except...</code></strong></p>\n<ul>\n<li><code>try</code> 表示尝试执行可能出问题的代码, <code>except</code> 表示如果代码出现异常, 进行捕获 <code>as e:</code></li>\n<li>捕获异常类型的通用写法就是用<code>Exception</code>,  因为大多数异常类型都是最终继承<code>Exception</code>的</li>\n<li><code>BaseException</code> 可以捕获任何异常</li>\n</ul>\n<p><strong><code>try...except...else...finally</code></strong></p>\n<ul>\n<li><code>except</code> 与 <code>else</code> 互斥,  <code>finally</code>不管有没有异常都执行</li>\n</ul>\n<p><strong>异常的传递</strong></p>\n<ul>\n<li>当执行代码的时候遇到错误, 首先判断当前代码块对异常进行捕获, 如果没有, 那么再把异常一层一层往外传递, 如果外界的都没对异常的捕获, 程序就会崩溃, 如果有异常捕获, 就不会崩溃了</li>\n</ul>\n<p><strong>自定义异常</strong></p>\n<ul>\n<li>class定义自定义异常类, 必须继承<code>Exception</code>或者<code>BaseException</code>才可以</li>\n<li>抛出自定义异常使用关键字<code>raise</code></li>\n<li>注意:raise只能抛出异常类的对象</li>\n</ul>\n<h3 id=\"6-2-模块\"><a href=\"#6-2-模块\" class=\"headerlink\" title=\"6.2. 模块\"></a>6.2. 模块</h3><p> <strong>通俗理解模块就是一个 .py 文件, 模块里面可以定义具体的功能代码(类, 函数, 全局变量, 匿名函数等等)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看导入模块的搜索路径 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)       </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>模块好比一个工具箱, 模块里的每一个具体代码好比一个工具</li>\n<li>模块的命名规则和变量名的命名规则一样 使用下划线命名</li>\n<li>模块名的组成和变量名组成一样, 字母, 数字, 下划线开头, 如果以数字开头, 这个模块就不能使用了</li>\n</ul>\n<p><strong>导入模块的两种方式</strong></p>\n<ul>\n<li>import 模块名  as 别名</li>\n<li>from 模块名 import 功能代码(函数, 类, 全局变量)   as 别名</li>\n<li>from 模块名 import *  导入模块里所有功能代码 一般不这样使用</li>\n</ul>\n<p><strong>导入模块注意点</strong></p>\n<ul>\n<li>自制的模块名不要和系统的模块重名</li>\n<li>使用from 模块名 import 功能, 在当前模块不要再定义导入功能的代码, 否则会覆盖之前导入功能代码</li>\n</ul>\n<p><strong>自制模块</strong></p>\n<ul>\n<li><strong>all</strong> 指定导入对应的功能代码  <strong>all</strong> &#x3D; [类名, 类名…..]  all定义针对外界使用from 模块名 import * 导入,  只能导入all里面指定的功能代码</li>\n</ul>\n<p><strong>主模块名字</strong>: <strong>main</strong>  </p>\n<p><strong>导入的模块名字</strong>:  就是模块原本的名字</p>\n<p><strong>包:</strong> <strong>通俗理解只要文件夹里包含一个__init__.py文件, 那么这个文件夹就是包</strong></p>\n<ul>\n<li><p>包的作用: 包是用来管理不同模块的 </p>\n</li>\n<li><p>模块的作用: 模块是用来管理不同功能代码的</p>\n</li>\n<li><p>包名的命名规则和变量名一样, 使用下划线命名法</p>\n</li>\n<li><p>包名的组成和变量名的组成一样, 数字, 字母, 下划线 不能数字开头</p>\n</li>\n<li><p><strong>包的特点</strong>:</p>\n</li>\n<li><ul>\n<li>包里面有一个__init__.py文件,这是包的初始化文件, 当且仅当第一次导入包的时候会执行这个文件</li>\n<li><strong>init</strong>.py 其实就是包的象征文件</li>\n<li><strong>init</strong>.py 可以控制模块的导入行为</li>\n<li><strong>init</strong>.py 可以定义类, 函数, 全局变量等代码</li>\n</ul>\n</li>\n</ul>\n<p><strong>包的导入目的使用包里面的模块</strong></p>\n<p><strong>格式</strong>: </p>\n<ul>\n<li>import 包名  指定导入包, 用包调用模块, 使用模块中的功能代码 第一次导入包的时候会默认调用__init__.py  </li>\n<li>import 包名.模块名</li>\n<li>from 包名 import 模块名</li>\n<li>from 包名 import 模块名 as 模块别名</li>\n<li>from 包名 import *      默认不是导入包里所有模块, 需要在__init__.py中使用__all__去指定</li>\n</ul>\n<h1 id=\"二-高级\"><a href=\"#二-高级\" class=\"headerlink\" title=\"二. 高级\"></a>二. 高级</h1><h2 id=\"1-多任务\"><a href=\"#1-多任务\" class=\"headerlink\" title=\"1. 多任务\"></a>1. 多任务</h2><h3 id=\"1-1-常识\"><a href=\"#1-1-常识\" class=\"headerlink\" title=\"1.1. 常识\"></a>1.1. 常识</h3><ul>\n<li><p>多任务的目的：充分利用CPU资源，提高执行效率</p>\n</li>\n<li><p>时间片：内核分配给程序执行的一小段时间，这个时间内进程拥有cpu资源</p>\n</li>\n<li><p>同步：协同步调，按预定的先后次序进行运行。如：你说完，我再说</p>\n</li>\n<li><p>进程、线程同步：可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行; B执行，再将结果给A; A再继续操作</p>\n</li>\n<li><p>进程状态: 等待状态不占用时间片, 即使时间片有剩余也会退出不占用CPU资源, 只有运行状态才占用CPU资源</p>\n<p><img src=\"/..%5Cimages%5Cimage-20230704132442670.png\" alt=\"image-20230704132442670\"></p>\n</li>\n</ul>\n<h3 id=\"1-2-执行形式\"><a href=\"#1-2-执行形式\" class=\"headerlink\" title=\"1.2. 执行形式\"></a>1.2. 执行形式</h3><ul>\n<li>并发：在一个时间段内，交替的执行多个任务，任务数 &gt; CPU核心数，时间片轮转</li>\n<li>并行：在一个时间点，多核CPU同时执行多个任务，任务数 &lt; CPU核心数</li>\n<li>一般情况下，并发和并行同时存在</li>\n</ul>\n<h3 id=\"1-3-实现方式：进程\"><a href=\"#1-3-实现方式：进程\" class=\"headerlink\" title=\"1.3. 实现方式：进程\"></a>1.3. 实现方式：进程</h3><ul>\n<li><strong>进程是操作系统进行资源(CPU、内存)分配的基本单位</strong></li>\n<li>程序中至少有一个进程，这个进程称为主进程</li>\n<li>主进程会等待所有子进程执行结束再结束<ul>\n<li>如果子进程没执行完，主进程会一直等待，此时如果子进程进入死循环会导致主进程无法退出解决办法：<ul>\n<li>设置子进程为守护主进程，主进程退出时子进程直接销毁: <code>sub_process.daemon = True</code></li>\n<li>主进程退出前先销毁子进程: <code>sub_process.terminate()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>每个进程中至少有一个线程，这个线程称为主线程</li>\n<li>进程间不共享全局变量</li>\n<li>进程之间执行也是无序的，由操作系统调度决定</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进程创建子进程时程序会复制一份代码去跑(也就是说操作系统会再次进行资源分配，所以创建出来的子进程所拥有的内存是和创建它的进程的内存是不同的，所以不可能共享全局变量)</span></span><br><span class=\"line\"><span class=\"comment\"># 打印全局变量id可发现变量的内存地址是不同的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_list = []  <span class=\"comment\"># 列表可变类型，为全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_val</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;reading list: <span class=\"subst\">&#123;my_list&#125;</span>, id: <span class=\"subst\">&#123;<span class=\"built_in\">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_val</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        my_list.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;writed.....<span class=\"subst\">&#123;my_list&#125;</span>, id: <span class=\"subst\">&#123;<span class=\"built_in\">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建子进程时：linux和mac不会拷贝主进程执行的代码，但windows会拷贝主进程代码并执行，所以对windows来说创建子进程的代码会发生递归执行而报错，需要把此部分代码放在__name__ == &quot;__main__&quot;判断下（判断主模块的代码只会执行一次），linux和mac就不需要</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    read_task = multiprocessing.Process(target=read_val)</span><br><span class=\"line\">    write_task = multiprocessing.Process(target=write_val)</span><br><span class=\"line\"></span><br><span class=\"line\">    write_task.start()</span><br><span class=\"line\">    read_task.start()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-实现方式：线程\"><a href=\"#1-4-实现方式：线程\" class=\"headerlink\" title=\"1.4. 实现方式：线程\"></a>1.4. 实现方式：线程</h3><ul>\n<li>线程是进程中执行代码的一个分支，每个线程想到执行代码需要CPU进行调度</li>\n<li><strong>线程是CPU调度的基本单位</strong>，每个进程至少有一个线程，称为主线程</li>\n<li>主线程会等待所有子线程结束再结束<ul>\n<li><code>sub_thread.setDaemon(True)</code></li>\n<li><code>threading.Thread(target=task, daemon=True)</code></li>\n</ul>\n</li>\n<li>线程执行时无序的, 谁抢到CPU, 谁就执行</li>\n<li>线程之间共享全局变量，因为在同一进程里面，所以使用的内存资源是相同的，这会导致数据错乱问题，解决方案<ul>\n<li>线程等待 <code>sub_thread.join()</code></li>\n<li>互斥锁：对共享数据进行锁定，保证同一时刻只有一个线程操作共享数据</li>\n<li>以上两种方法都是把多任务改成单任务去执行，保证了数据的准确性，但执行效率会下降</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    cur_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;sing: <span class=\"subst\">&#123;cur_thread&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;singing <span class=\"subst\">&#123;name&#125;</span>... \\n&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    cur_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;dance: <span class=\"subst\">&#123;cur_thread&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dancing... \\n&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial0</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线程无序&quot;&quot;&quot;</span></span><br><span class=\"line\">    main_thread = threading.current_thread()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;main thread: <span class=\"subst\">&#123;main_thread&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sing_thread = threading.Thread(target=sing, args=(<span class=\"string\">&quot;正月十八&quot;</span>, ))</span><br><span class=\"line\">    dance_thread = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    sing_thread.start()</span><br><span class=\"line\">    dance_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程之间共享全局变量</span></span><br><span class=\"line\">g_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_data</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        g_list.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;added, <span class=\"subst\">&#123;g_list&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_data</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;read data <span class=\"subst\">&#123;g_list&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial1</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;线程共享全局变量&quot;&quot;&quot;</span></span><br><span class=\"line\">    add_thread = threading.Thread(target=add_data)</span><br><span class=\"line\">    read_thread = threading.Thread(target=read_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    add_thread.start()</span><br><span class=\"line\">    read_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">g_num = <span class=\"number\">0</span></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_num0</span>():</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100_0000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">global</span> g_num  <span class=\"comment\"># int不可变要用全局需要声名</span></span><br><span class=\"line\">        g_num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;add0: <span class=\"subst\">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_num1</span>():</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100_0000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">global</span> g_num  <span class=\"comment\"># int不可变要用全局需要声名</span></span><br><span class=\"line\">        g_num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;add1: <span class=\"subst\">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tutorial2</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;数据保护&quot;&quot;&quot;</span></span><br><span class=\"line\">    thread0 = threading.Thread(target=add_num0)</span><br><span class=\"line\">    thread1 = threading.Thread(target=add_num1)</span><br><span class=\"line\"></span><br><span class=\"line\">    thread0.start()</span><br><span class=\"line\">    <span class=\"comment\"># thread0.join()  # 线程等待 在0执行完再向下执行</span></span><br><span class=\"line\">    thread1.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    tutorial2()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-实现方式：协程\"><a href=\"#1-5-实现方式：协程\" class=\"headerlink\" title=\"1.5. 实现方式：协程\"></a>1.5. 实现方式：协程</h3><p><strong>迭代器 Iterator</strong></p>\n<ul>\n<li>可迭代对象(Iterable)定义：包含 <code>__iter__</code> 方法<ul>\n<li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断一个对象是否可迭代</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(A, Iterable)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>迭代器定义：包含 <code>__iter__</code> 和 <code>__next__</code> 方法<ul>\n<li>迭代是访问集合元素的一种方式</li>\n<li>迭代器是一个可以记住遍历位置的对象</li>\n<li>迭代器对象从集合第一个元素开始访问，直到所有元素被访问结束</li>\n<li>迭代器只能往前不能后退</li>\n<li>迭代器可以节省内存空间，实现循环</li>\n</ul>\n</li>\n<li>迭代器优点：存放生成数据的实现方式而不是具体数据，占用很少的内存空间</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections.abc <span class=\"keyword\">import</span> Iterable, Iterator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassIterator</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, obj</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.obj = obj</span><br><span class=\"line\">        self.cur_num = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cur_num &gt;= <span class=\"built_in\">len</span>(self.obj.names):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        res = self.obj.names[self.cur_num]</span><br><span class=\"line\">        self.cur_num += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Classmate</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.names = <span class=\"built_in\">list</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.names.append(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;想要一个对象称为一个 可迭代对象, 即可以用for遍历</span></span><br><span class=\"line\"><span class=\"string\">        必须要有此方法</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassIterator(self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iter返回self</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fibonacci</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.nums = nums</span><br><span class=\"line\">        self.cur_num = <span class=\"number\">0</span></span><br><span class=\"line\">        self.a = <span class=\"number\">0</span></span><br><span class=\"line\">        self.b = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cur_num &gt;= <span class=\"built_in\">len</span>(self.nums):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = self.a</span><br><span class=\"line\">        self.a, self.b = self.b, self.a + self.b</span><br><span class=\"line\">        self.cur_num += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    classmate = Classmate()</span><br><span class=\"line\"></span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;zoo&quot;</span>)</span><br><span class=\"line\">    classmate.add(<span class=\"string\">&quot;yoo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># iter方法会自动调用__iter__方法接收返回值, 其返回值就是迭代器也就是ClassIterator类创建的对象就是迭代器</span></span><br><span class=\"line\">    classmate_iterator = <span class=\"built_in\">iter</span>(classmate)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(classmate_iterator, Iterator))  <span class=\"comment\"># 判断是否是迭代器 True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> classmate:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)  <span class=\"comment\"># foo zoo yoo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(classmate, Iterable))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成器 Generator</strong></p>\n<ul>\n<li>生成器是一种特殊的迭代器</li>\n<li>如果一个函数中有<code>yield</code>语句，那么这个函数就不再是函数，而是一个生成器模板</li>\n<li>定义：生成器推导式<ul>\n<li>列表推导式：<code>[i for i in range(3)]</code><ul>\n<li>把列表推导式的<code>[]</code> 改为 <code>()</code> 返回的就是一个生成器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>生成器的启动：让生成器从断点处继续执行，即唤醒生成器<ul>\n<li><code>next()</code>第几次启动都可以，但不能传参</li>\n<li><code>obj.send(param)</code> 需要传参时使用，不能第一次启动时使用</li>\n</ul>\n</li>\n<li>获取生成器数据用 <code>next(generator)</code>方法</li>\n<li>生成器数据全部取出后再次使用<code>next()</code>方法会报<code>StopIteration</code>错误</li>\n<li><code>yield</code>关键字有两个作用<ul>\n<li>保存当前运行状态，暂停执行，将生成器挂起</li>\n<li>将<code>yield</code>关键字后面表达式的值作为返回值返回，此时类似<code>return</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_num</span>(<span class=\"params\">cnt</span>):</span><br><span class=\"line\">    a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    cur_num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur_num &lt; cnt:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        cur_num += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">gen_obj = create_num(<span class=\"number\">10</span>)  <span class=\"comment\"># 此时创建了一个生成器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gen_obj)  <span class=\"comment\"># &lt;generator object create_num at 0x0000022C5899D510&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> gen_obj])  <span class=\"comment\"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>协程 Coroutine</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用greenlet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> greenlet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t1</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------A----------&quot;</span>)</span><br><span class=\"line\">        gr2.switch()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t2</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------B----------&quot;</span>)</span><br><span class=\"line\">        gr1.switch()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gr1 = greenlet(t1)</span><br><span class=\"line\">gr2 = greenlet(t2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gr1, gr2)</span><br><span class=\"line\">gr2.switch()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;greenlet.greenlet object at 0x00000276263C30F0 (otid=0x00000276263A9EE0) pending&gt; &lt;greenlet.greenlet object at 0x00000276263C31A0 (otid=0x00000276263C7040) pending&gt;</span></span><br><span class=\"line\"><span class=\"string\">----------B----------</span></span><br><span class=\"line\"><span class=\"string\">----------A----------</span></span><br><span class=\"line\"><span class=\"string\">----------B----------</span></span><br><span class=\"line\"><span class=\"string\">----------A----------</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用gevent碰到延时就切换到其他的greenlet去运行</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gevent <span class=\"keyword\">import</span> monkey</span><br><span class=\"line\">monkey.patch_all()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-不同实现方式对比\"><a href=\"#1-6-不同实现方式对比\" class=\"headerlink\" title=\"1.6. 不同实现方式对比\"></a>1.6. 不同实现方式对比</h3><ul>\n<li>进程是资源分配的基本单位，切换需要资源最大，效率很低</li>\n<li>线程是操作系统调度的基本单位，切换需要的资源一般，效率一般(不考虑GIL的情况下)</li>\n<li>协程切换任务需要的资源很小，效率高</li>\n<li>多进程、多线程根据CPU核数不同可能是并行的，协程在一个线程中所以一定是并发的</li>\n</ul>\n<h3 id=\"1-7-GIL锁\"><a href=\"#1-7-GIL锁\" class=\"headerlink\" title=\"1.7. GIL锁\"></a>1.7. GIL锁</h3><blockquote>\n<p>GIL（全局解释器锁）是一个在CPython解释器中的锁，用于确保同一时刻只有一个线程执行Python字节码。这是由于CPython的内存管理机制并不是线程安全的，因此GIL可以防止多个线程同时访问、修改同一块内存，从而避免了可能出现的数据竞争和内存错误。但同时，GIL也限制了Python多线程并行性能，在一些密集计算和多线程CPU密集型任务场景中表现不及其他语言和并发框架。</p>\n</blockquote>\n<blockquote>\n<p>CPython解释器的内存管理机制是基于引用计数的垃圾回收，即对象被引用一次计数器加一，对象引用被释放计数器减一，当计数器变为0时，对象被回收。这种内存管理机制并不是线程安全的，因为多个线程可能同时访问和修改同一块内存，从而导致计数器不一致，或者对象被销毁多次，或者内存泄漏等问题。因此，为了避免这些问题，CPython引入了GIL锁来确保同一时刻只有一个线程执行Python字节码，从而保证内存管理的线程安全性。</p>\n</blockquote>\n<ul>\n<li>全局解释器锁</li>\n<li>保证同一时间, 只有一个线程使用CPU, 不管主子线程</li>\n<li>GIL的存在导致, python中只有进程是可以并行的, 多线程实际也是并发的</li>\n<li>一个进程有一个GIL锁</li>\n<li>GIL不是python的特性, 只是CPython解释器的概念, 历史遗留问题</li>\n<li>所以cpu超线程对python是没用的！比如2核4线程，一个python死循环会让cpu两个线程跑满(这里说的线程是硬件层面的技术，模拟多个逻辑CPU提高处理并发性能)</li>\n</ul>\n<p>  <strong>GIL锁什么时候释放</strong></p>\n<ul>\n<li>当前线程执行超时后会释放</li>\n<li>当前线程阻塞操作时会自动释放(input, io&#x2F;输入输出)</li>\n<li>当前执行完成时</li>\n</ul>\n<p>  <strong>GIL的弊端</strong></p>\n<ul>\n<li>GIL对计算密集型的程序会产生影响。因为计算密集型的程序，需要占用系统资源。</li>\n<li>GIL的存在，相当于始终在进行单线程运算，这样自然就慢了。</li>\n<li>IO密集型影响不大的原因在于，IO，input&#x2F;output，这两个词就表明程序的瓶颈在于输入所耗费的时间，线程大部分时间在等待，所以它们是多个一起等（多线程）还是单个等（单线程）无所谓的。</li>\n</ul>\n<p>  <strong>解决方案：</strong></p>\n<p>  要提升多线程执行效率，解决方案：</p>\n<ul>\n<li>更换解释器</li>\n<li>改为进程替换多线程</li>\n<li>子线程使用C语言实现（绕过GIL锁）</li>\n</ul>\n<p>  <strong>必须要知道的是：</strong></p>\n<ul>\n<li>CPU 密集(计算密集)型不太适合多线程</li>\n<li>I&#x2F;O 密集型适合多线程&#x2F;协程（Gil锁会释放）</li>\n</ul>\n<h2 id=\"2-高级语法\"><a href=\"#2-高级语法\" class=\"headerlink\" title=\"2. 高级语法\"></a>2. 高级语法</h2><h3 id=\"2-1-闭包-amp-装饰器\"><a href=\"#2-1-闭包-amp-装饰器\" class=\"headerlink\" title=\"2.1. 闭包&amp;装饰器\"></a>2.1. 闭包&amp;装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;闭包</span></span><br><span class=\"line\"><span class=\"string\">定义：函数嵌套的前提下，内部函数使用了外部函数的变量或参数，外部函数返回内部函数</span></span><br><span class=\"line\"><span class=\"string\">作用：保存外部函数内的变量, 不会随着外部函数调用结束而销毁，但消耗内存!</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter0</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    local_a = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">b</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;a&#125;</span>, <span class=\"subst\">&#123;b&#125;</span> <span class=\"subst\">&#123;local_a&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t0</span>():</span><br><span class=\"line\">    foo = outter0(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    goo = outter0(<span class=\"string\">&quot;goo&quot;</span>)</span><br><span class=\"line\">    goo(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># inner: foo, hello world</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: goo, hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter1</span>(<span class=\"params\">a=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;outter: <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">b=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> a</span><br><span class=\"line\">        a = a + b  <span class=\"comment\"># 此时默认是是取local vars不声名nonlocal会报UnboundLocalError</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner a: <span class=\"subst\">&#123;a&#125;</span>, b: <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t1</span>():</span><br><span class=\"line\">    f = outter1()</span><br><span class=\"line\">    f()</span><br><span class=\"line\">    <span class=\"comment\"># outter: 10</span></span><br><span class=\"line\">    <span class=\"comment\"># inner a: 20, b: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">装饰器：本质就是一个闭包函数（但要求闭包函数有且只有一个参数, 参数必须是函数类型）</span></span><br><span class=\"line\"><span class=\"string\">装饰器的执行事件是加载模块事立即执行 (在函数定义时候执行了), 所以一般外部函数内不写其他东西, 只有内部函数</span></span><br><span class=\"line\"><span class=\"string\">特点：</span></span><br><span class=\"line\"><span class=\"string\">    - 不修改已有函数的源代码</span></span><br><span class=\"line\"><span class=\"string\">    - 不修改已有函数的调用方式</span></span><br><span class=\"line\"><span class=\"string\">    - 给已有函数增加额外的功能</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用装饰器(inner的参数为 *args, **kwargs也就是接收任意参数)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter2</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args, kwargs&#125;</span>&quot;</span>)</span><br><span class=\"line\">        res = f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;res&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@outter2  </span><span class=\"comment\"># 相当于执行了这句代码：func = outter2(func)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func2</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t2</span>():</span><br><span class=\"line\">    func2(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: ((1, 2), &#123;&#x27;d&#x27;: 5&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 5)</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带有参数的装饰器：装饰器外再加一层闭包</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outter3</span>(<span class=\"params\">flag=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">outter2</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 此时只是打印flag, 没修改不可变类型，不需要声名nonlocal</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args, kwargs&#125;</span>, <span class=\"subst\">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class=\"line\">            res = f(*args, **kwargs)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;res&#125;</span>, <span class=\"subst\">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outter2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@outter3(<span class=\"params\"><span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func3</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t3</span>():</span><br><span class=\"line\">    func3(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: ((1, 2), &#123;&#x27;d&#x27;: 4&#125;), flag=True</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 4)</span></span><br><span class=\"line\">    <span class=\"comment\"># inner: hello world, flag=True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outter4</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, f</span>):</span><br><span class=\"line\">        self.f = f</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;inner: <span class=\"subst\">&#123;args=&#125;</span>, <span class=\"subst\">&#123;kwargs=&#125;</span>&quot;</span>)</span><br><span class=\"line\">        res = self.f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Outter4</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func4</span>(<span class=\"params\">a, b, c=<span class=\"number\">3</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;func: <span class=\"subst\">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t4</span>():</span><br><span class=\"line\">    func4(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># inner: args=(1, 2), kwargs=&#123;&#x27;d&#x27;: 4&#125;</span></span><br><span class=\"line\">    <span class=\"comment\"># func: (1, 2, 3, 4)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    t4()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-property\"><a href=\"#2-2-property\" class=\"headerlink\" title=\"2.2. property\"></a>2.2. property</h3><p><strong>3. property属性</strong></p>\n<ul>\n<li>property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用</li>\n<li>定义方式<ul>\n<li>装饰器方式</li>\n<li>类属性方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类属性方式 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):     </span><br><span class=\"line\">        self.__age = <span class=\"number\">0</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_age</span>(<span class=\"params\">self</span>):     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__age   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">set_age</span>(<span class=\"params\">self, value</span>):    </span><br><span class=\"line\">        self.__age = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是获取值的方法， 第二个是设置值的方法   </span></span><br><span class=\"line\">    age = <span class=\"built_in\">property</span>(get_age, set_age)      </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器方式</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取年龄</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__age   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置年龄</span></span><br><span class=\"line\"><span class=\"meta\">    @age.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">age</span>(<span class=\"params\">self, value</span>):     </span><br><span class=\"line\">        self.__age = value  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-with语句-amp-上下文管理器\"><a href=\"#2-3-with语句-amp-上下文管理器\" class=\"headerlink\" title=\"2.3. with语句&amp;上下文管理器\"></a>2.3. with语句&amp;上下文管理器</h3><ul>\n<li>with 语句执行完成以后自动调用关闭文件操作, 即使出现异常</li>\n<li>一个类只要实现了<code>__enter__()</code>和<code>__exit__()</code>这个两个方法，通过该类创建的对象我们就称之为上下文管理器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要实现上下文管理器， 要实现__enter__ 和 __exit__  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">File</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, file_name, file_mode</span>):</span><br><span class=\"line\">        self.file_name = file_name</span><br><span class=\"line\">        self.file_mode = file_mode</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实现上文的方法，主要用来提供资源，需要返回一个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__enter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;entered up&#x27;</span>)</span><br><span class=\"line\">            self.fp = <span class=\"built_in\">open</span>(self.file_name, self.file_mode)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.fp</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 实现下文的方法，主要用来释放资源</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__exit__</span>(<span class=\"params\">self, exc_type, exc_val, exc_tb</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;exited down&#x27;</span>)</span><br><span class=\"line\">            self.fp.close()</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"keyword\">with</span> File(<span class=\"string\">&quot;a.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># entered up</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># exited down</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的，也就是说刚才使用 open 函数创建的文件对象就是就是一个上下文管理器对象</p>\n</li>\n<li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p>\n</li>\n<li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p>\n</li>\n</ul>\n<h3 id=\"2-4-深拷贝和浅拷贝\"><a href=\"#2-4-深拷贝和浅拷贝\" class=\"headerlink\" title=\"2.4. 深拷贝和浅拷贝\"></a>2.4. 深拷贝和浅拷贝</h3><ul>\n<li><code>import copy</code>拷贝的目的: 保证原数据和拷贝的数据之间不影响</li>\n<li><strong><code>copy.copy()</code> 浅拷贝</strong>，只对可变类型的第一层对象进行拷贝，对拷贝的对象开辟新的内存空间进行存储，不会拷贝对象内部的子对象<ul>\n<li>不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用</li>\n<li>可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝</li>\n</ul>\n</li>\n<li><strong><code>copy.deepcopy()</code> 深拷贝</strong>, 只要发现对象有可变类型就会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储<ul>\n<li>不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li>\n<li>可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li>\n</ul>\n</li>\n<li><strong>浅拷贝最多拷贝对象的一层 (即使可变类型, 也只拷贝第一层) 其它情况都是拷贝引用</strong></li>\n<li><strong>深拷贝可能拷贝对象的多层 (只要是有可变类型, 就全部拷贝) 其它情况都是拷贝引用</strong></li>\n</ul>\n<h3 id=\"2-5-单例\"><a href=\"#2-5-单例\" class=\"headerlink\" title=\"2.5. 单例\"></a>2.5. 单例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只有一份内存空间</span></span><br><span class=\"line\"><span class=\"comment\"># __new__ 开辟内存空间, 会在__init__之前执行 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):   </span><br><span class=\"line\">    is_instance = <span class=\"literal\">None</span>   </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls.is_instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 保证下边代码执行一次</span></span><br><span class=\"line\">            cls.is_instance = <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls.is_instance</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls.is_instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Singleton()</span><br><span class=\"line\">b = Singleton()</span><br><span class=\"line\">c = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a) == <span class=\"built_in\">id</span>(b) == <span class=\"built_in\">id</span>(c)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"面试造飞机\"><a href=\"#面试造飞机\" class=\"headerlink\" title=\"面试造飞机\"></a>面试造飞机</h1><ol>\n<li><p>生成器和迭代器的区别</p>\n<ol>\n<li><strong>定义方式：</strong><ul>\n<li>生成器是一种特殊的函数，它使用 <code>yield</code> 关键字来定义，并在函数体内使用 <code>yield</code> 来产生值。生成器函数可以暂停执行，并在需要时恢复执行，每次恢复执行时会从上次暂停的位置继续执行。</li>\n<li>迭代器是一个实现了迭代协议的对象，它包含 <code>__iter__()</code> 方法和 <code>__next__()</code> 方法。<code>__iter__()</code> 方法返回迭代器自身，而 <code>__next__()</code> 方法用于返回迭代器的下一个值，如果没有下一个值则抛出 <code>StopIteration</code> 异常。</li>\n</ul>\n</li>\n<li><strong>使用方式：</strong><ul>\n<li>生成器通常用于生成一个序列的值，它们可以通过 <code>for</code> 循环来迭代产生的值，也可以通过调用 <code>next()</code> 函数手动迭代。</li>\n<li>迭代器则是一种更通用的迭代工具，它可以迭代任何实现了迭代协议的对象，包括列表、元组、集合等。迭代器可以通过 <code>iter()</code> 函数获取，也可以直接用于 <code>for</code> 循环中。</li>\n</ul>\n</li>\n<li><strong>内存占用：</strong><ul>\n<li>生成器是一种惰性求值（Lazy Evaluation）的机制，它只在需要时生成值，并且不会一次性将所有值存储在内存中，因此生成器在处理大量数据时具有较低的内存消耗。</li>\n<li>迭代器通常需要将所有的值存储在内存中，因此在处理大量数据时可能会消耗较多的内存。</li>\n</ul>\n</li>\n<li><strong>可变性：</strong><ul>\n<li>生成器是不可变的，一旦定义完成后，生成器的值无法修改。</li>\n<li>迭代器通常是可变的，可以在迭代过程中修改迭代器的状态，例如添加、删除元素等。</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，生成器和迭代器在 Python 中都是用于处理可迭代对象的工具，但它们的定义方式、使用方式、内存占用和可变性等方面有一些区别。生成器通常用于惰性生成值，而迭代器则是一种通用的迭代工具，用于迭代任意可迭代对象。</p>\n</li>\n<li><p>python内存管理(同GIL锁是cpython解释器的特性)</p>\n<ol>\n<li><p>Python的内存管理机制主要依赖于引用计数来迅速释放不再使用的对象，同时通过垃圾回收来处理循环引用等特殊情况，保证内存的高效利用。这种自动内存管理的方式让开发者从手动管理内存的负担中解放出来，提高了开发效率。</p>\n</li>\n<li><p>引用计数：Python使用引用计数来跟踪每个对象被引用的次数。当一个对象被创建或者另一个对象引用它时，引用计数就会增加。当一个对象的引用计数降为0时，表示没有任何变量指向该对象，那么该对象将成为垃圾，Python会回收这部分内存以供其他对象使用。</p>\n<ul>\n<li>引用计数的优点是在对象不再被引用时立即释放内存，因为没有等待垃圾回收器的运行。但是引用计数无法解决循环引用的问题（两个或更多的对象相互引用，导致它们的引用计数都不会降为0），为此，Python引入了垃圾回收机制。</li>\n</ul>\n</li>\n<li><p>垃圾回收（Garbage Collection）： Python中的垃圾回收机制是为了解决循环引用以及其他无法通过引用计数检测的垃圾对象。Python采用了分代回收算法，将对象分为不同的代（generation）。新创建的对象位于第0代，每经过一次垃圾回收，存活的对象会晋升到下一代。随着对象存活时间的增加，回收的频率会降低，因为大部分对象很快就会变成垃圾，只有少数长时间存活的对象才需要耗费更多的垃圾回收时间。</p>\n<ul>\n<li><p>标记-清除（Mark and Sweep）：垃圾回收器首先标记所有可以访问的对象，然后清除所有未标记的对象，释放其内存。</p>\n</li>\n<li><p>分代回收（Generational Garbage Collection）：将对象按照存活时间分为不同的代，一般将新创建的对象放入第0代，存活时间更长的对象依次放入第1代、第2代，通过不同代之间的垃圾回收来提高效率。</p>\n</li>\n<li><p>引用计数+标记-清除：综合利用引用计数和标记-清除算法，处理循环引用以及其他无法通过引用计数回收的对象。</p>\n</li>\n<li><p><strong>分代回收在处理循环引用的情况</strong>时，通过为每个对象分配一个分代标记来解决这个问题。分代标记可以被划分为两种类型：线程局部分代标记（thread local allocation context）和全局局部分代标记（global allocation context）。</p>\n<p>当一个对象被创建时，Python内核会为其分配一个分代标记，并将该标记与对象一起存储。对于循环引用的对象，分代标记会被保持不变。当一个对象被销毁时，Python通过检查对象的分代标记来确定是否已经被回收。如果对象的分代标记未被其他地方引用，那么该对象已经不再被使用，并需要进行回收。</p>\n<p>为了避免不必要的循环回收，Python内核会记录每个对象是否已经被回收。一旦对象被回收，就不会再被释放，即使再次被检测到。这样可以确保只有一次地回收每个对象。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>tcp与udp区别</p>\n<ol>\n<li>连接：tcp是一种面向连接的协议，在数据传输前要先建立一个连接，UDP是无连接协议，不需建立连接</li>\n<li>可靠性：TCP提供可靠的数据传输，确保数据包在从发送端到接收端的传输过程中不会丢失、被改变或出现重复，UDP不保证数据传输可靠性，可能导致丢包、被改变或重复</li>\n<li>速度：由于TCP的可靠性和流量控制机制，传输速度相对UDP会慢很多</li>\n<li>设计目的：TCP适用于对数据传输可靠性和稳定性要求较高，如文件传输、电子邮件和网页浏览等，UDP更擅长对实时性要求较高的应用，如实时语音、视频通信，在线游戏等</li>\n<li>头部信息：TCP和UDP的头部信息分别为20字节和8字节。TCP的头部信息包括数据包的序号和个别流标记，用于确保数据包在传输过程的顺序和完整性。UDP的头部信息相对较少主要包括数据包的源端和目标端的IP地址和端口</li>\n</ol>\n</li>\n<li><p>https原理</p>\n<ol>\n<li>SSL&#x2F;TCS 密钥包括一个私钥和一个公钥</li>\n<li>当用户通过浏览器访问一个HTTPS页面，服务器首先向浏览器发送公钥，浏览器接收到公钥后，会使用它来加密数据（请求头和请求体），然后将加密数据发送回服务器</li>\n<li>服务器使用接收到的加密数据和自己的私钥来解密数据。</li>\n</ol>\n</li>\n<li><p>TCP3次握手4次挥手</p>\n<ol>\n<li>客户端向服务端发送一个SYN（初始化）包，表明希望建立一个连接</li>\n<li>服务端同意建立连接会回复SYN+ACK包，表示可以建立连接</li>\n<li>客户端回复ACK包，连接建立</li>\n<li>客户端向服务端发送一个FIN包，表明希望断开连接，进入终止等待1状态</li>\n<li>服务端向客户端回复一个ACK包，表示进入终止等待状态，此时可传数据</li>\n<li>服务端向客户端发送一个FIN包，客户端进入终止等待2状态</li>\n<li>客户端向服务端回复一个ACK包，客户等待超时时间后断开连接，服务端立刻断开连接</li>\n</ol>\n</li>\n<li><p>Flask路由原理</p>\n<p>Flask 的路由原理主要基于装饰器和 Python 的函数式编程概念。具体来说，Flask 使用 @app.route() 装饰器将 URL 路径和视图函数绑定在一起。当接收到一个 HTTP 请求时，Flask 会根据请求的 URL 找到对应的视图函数，并执行该函数来处理请求。</p>\n</li>\n<li><p>django处理csrf原理</p>\n<p>Django处理CSRF的原理基本上是通过在每个页面加载时生成一个唯一的CSRF令牌，并将其存储在用户的会话中。当用户在表单中提交请求时，Django会验证请求中包含的CSRF令牌是否与用户会话中存储的令牌匹配，以确保请求来自于站点的合法来源。</p>\n</li>\n<li><p>django cookie session原理</p>\n<p>在Django中，会话（Session）是一种存储在服务器端的数据，用于在用户请求之间保持状态。Django通常使用基于cookie的会话来管理会话数据，其原理如下：</p>\n<ol>\n<li><strong>会话数据存储：</strong> 当用户首次访问Django应用时，Django会为该用户创建一个唯一的会话标识符（session ID），通常是一个随机生成的字符串。会话数据存储在服务器端的缓存中，默认情况下使用的是数据库缓存。会话数据可以包含任意类型的数据，例如用户的身份验证信息、用户偏好设置等。</li>\n<li><strong>会话ID的传递：</strong> 一旦会话数据存储在服务器端，Django会将会话ID发送给客户端浏览器，通常是通过一个名为<code>sessionid</code>的cookie。这个cookie包含了用户的会话ID，用于在后续的请求中标识用户的会话数据。</li>\n<li><strong>请求中的会话ID提取：</strong> 当用户在浏览器上发送新的请求时，浏览器会自动将之前设置的<code>sessionid</code> cookie包含在请求头中。</li>\n<li><strong>会话数据的检索：</strong> Django在处理请求时会检查请求头中是否包含<code>sessionid</code> cookie，如果包含，Django会使用该会话ID来检索对应的会话数据。</li>\n<li><strong>会话数据的使用：</strong> 一旦会话数据被检索到，Django会将其提供给视图函数，以便在视图中使用。开发人员可以在视图中读取和修改会话数据，从而实现跨请求的状态保持。</li>\n<li><strong>响应中的会话ID更新：</strong> 如果在处理请求时会话数据发生了变化，Django会在响应中将更新后的会话ID发送给客户端浏览器。这是为了确保会话ID的安全性，以及避免可能的会话固定攻击（Session Fixation Attack）。</li>\n</ol>\n<p>通过这种方式，Django使用基于cookie的会话机制来管理用户会话数据，从而实现了用户状态的保持和跨请求的数据传递。这种机制是一种常见的Web应用程序开发中用于处理用户状态的方式。</p>\n</li>\n</ol>\n<h1 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS\"></a>TIPS</h1><p>字典无序性: 在Python 3.7及之前的版本中，字典元素的顺序是不确定的，即它们的存储顺序与插入顺序不一定一致。但是从Python 3.7开始，字典保留了元素插入的顺序。这意味着当你迭代字典时，它们的顺序将与你添加键-值对的顺序相同。</p>\n"},{"title":"微信公众号","date":"2021-03-18T09:09:33.000Z","_content":"\n### redirect_uri错误\n1. 首先确定`基本配置`中的 appID, appSecret, 服务器配置是否启用, 服务器地址, token是否都配置正确.\n\n2. `接口权限`-`网页授权获取用户基本信息`-`修改`\n\n- 注意: 这里有个大坑, 使用的url最好是直接域名, 如果有层级要保证项目实际使用的url全是在这里填写的层级之下的, 不然即使这里修改成功, 还是会报redirect_uri错误\n","source":"_posts/微信公众号.md","raw":"---\ntitle: 微信公众号\ndate: 2021-03-18 17:09:33\ntags: bug\ncategories: 微信公众号\n---\n\n### redirect_uri错误\n1. 首先确定`基本配置`中的 appID, appSecret, 服务器配置是否启用, 服务器地址, token是否都配置正确.\n\n2. `接口权限`-`网页授权获取用户基本信息`-`修改`\n\n- 注意: 这里有个大坑, 使用的url最好是直接域名, 如果有层级要保证项目实际使用的url全是在这里填写的层级之下的, 不然即使这里修改成功, 还是会报redirect_uri错误\n","slug":"微信公众号","published":1,"updated":"2022-07-24T08:18:32.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcc000pisuh2xkm28k2","content":"<h3 id=\"redirect-uri错误\"><a href=\"#redirect-uri错误\" class=\"headerlink\" title=\"redirect_uri错误\"></a>redirect_uri错误</h3><ol>\n<li><p>首先确定<code>基本配置</code>中的 appID, appSecret, 服务器配置是否启用, 服务器地址, token是否都配置正确.</p>\n</li>\n<li><p><code>接口权限</code>-<code>网页授权获取用户基本信息</code>-<code>修改</code></p>\n</li>\n</ol>\n<ul>\n<li>注意: 这里有个大坑, 使用的url最好是直接域名, 如果有层级要保证项目实际使用的url全是在这里填写的层级之下的, 不然即使这里修改成功, 还是会报redirect_uri错误</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"redirect-uri错误\"><a href=\"#redirect-uri错误\" class=\"headerlink\" title=\"redirect_uri错误\"></a>redirect_uri错误</h3><ol>\n<li><p>首先确定<code>基本配置</code>中的 appID, appSecret, 服务器配置是否启用, 服务器地址, token是否都配置正确.</p>\n</li>\n<li><p><code>接口权限</code>-<code>网页授权获取用户基本信息</code>-<code>修改</code></p>\n</li>\n</ol>\n<ul>\n<li>注意: 这里有个大坑, 使用的url最好是直接域名, 如果有层级要保证项目实际使用的url全是在这里填写的层级之下的, 不然即使这里修改成功, 还是会报redirect_uri错误</li>\n</ul>\n"},{"title":"数据结构从入门到放弃","date":"2024-05-23T07:09:19.000Z","_content":"\n# 一. 基础\n\n## 1. 数据结构基本概念\n\n> 随机存取（Random Access）是指能够以均等的时间访问数据结构中任意元素的能力\n\n**数据结构三要素**\n\n- **逻辑结构**\n  - 线性结构\n    - 一般线性表\n    - 受限线性表：栈、队列、串\n    - 线性表推广：数组\n  - 非线性结构\n    - 集合\n    - 树形结构：一般树、二叉树\n    - 图状结构：有向图、无向图\n- **存储结构**\n  - 顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元上\n    - 优点：可实现随机存取\n    - 缺点：只能使用相邻的存储单元，可能产生较多外部碎片\n  - 链式存储：不要求逻辑上相邻物理位置也相邻\n    - 优点：可以充分利用存储单元\n    - 缺点：每个元素因存储指针而占用额外存储空间，且只能实现顺序存取\n  - 索引存储：存储元素信息的同时建立附加索引表。索引表中每项称为索引项(一般形式为 (关键字，地址))\n    - 优点：检索速度快\n    - 缺点：占额外空间，增加和删除数据时也要修改索引表，花费更多时间\n  - 散列存储(哈希存储)：根据元素关键字直接算出元素的存储地址\n    - 优点：检索、增加和删除数据操作快\n    - 缺点：如散列函数不好，可能出现元素存储单元冲突，解决冲突会增加时间和空间开销\n- **运算**\n  - 定义：针对逻辑结构，指出运算的功能 \n  - 实现：针对存储结构，指出具体操作步骤\n\n> ### 1. 逻辑结构\n>\n> 逻辑结构描述了数据元素之间的逻辑关系，通常有以下几种：\n>\n> 1. **集合结构（Set Structure）**(非线性)\n>    - 数据元素之间仅有“属于同一个集合”的关系，元素之间无顺序关系。\n> 2. **线性结构（Linear Structure）**\n>    - 数据元素之间是一对一的关系，通常具有顺序性。\n>    - 典型例子：数组、链表、栈、队列。\n> 3. **树形结构（Tree Structure）**(非线性)\n>    - 数据元素之间是一对多的层次关系。\n>    - 典型例子：二叉树、平衡树、B树。\n> 4. **图形结构（Graph Structure）**(非线性)\n>    - 数据元素之间是多对多的关系，可以用节点和边表示。\n>    - 典型例子：无向图、有向图、加权图。\n>\n> ### 2. 存储结构\n>\n> 存储结构是指数据在计算机内存中的存储方式，通常有以下几种：\n>\n> 1. **顺序存储结构（Sequential Storage Structure）**\n>    - 数据元素按顺序存储在连续的存储单元中，通常通过数组实现。\n>    - 适用于随机存取。\n> 2. **链式存储结构（Linked Storage Structure）**\n>    - 数据元素存储在任意存储单元中，通过指针指示数据元素之间的逻辑关系，通常通过链表实现。\n>    - 适用于顺序存取。\n> 3. **索引存储结构（Indexed Storage Structure）**\n>    - 在存储数据元素的同时，还附加了索引表，通过索引表可以快速找到数据元素。\n>    - 常用于数据库和文件系统。\n> 4. **散列存储结构（Hashed Storage Structure）**\n>    - 通过散列函数将数据元素映射到存储位置，适用于查找操作频繁的应用场景。\n>    - 典型例子：哈希表。\n>\n> ### 组合与选择\n>\n> 不同的逻辑结构可以采用不同的存储结构实现。选择哪种存储结构主要取决于操作的效率需求。例如：\n>\n> - **数组**（线性结构）可以通过顺序存储实现，提供高效的随机访问。\n> - **链表**（线性结构）通过链式存储实现，插入和删除操作较为高效。\n> - **树**（树形结构）可以通过链式存储实现，支持动态插入和删除。\n> - **图**（图形结构）可以通过邻接矩阵（顺序存储）或邻接表（链式存储）实现。\n>\n> **举例：**\n>\n> - **数组**：线性结构 + 顺序存储\n> - **链表**：线性结构 + 链式存储\n> - **栈和队列**：线性结构 + 顺序存储或链式存储\n> - **二叉树**：树形结构 + 链式存储\n> - **哈希表**：集合结构 + 散列存储\n>\n> # Python对应\n>\n> ### 1. 列表（List）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：支持随机存取，元素可以通过索引直接访问；动态调整大小；支持高效的插入和删除操作。\n>\n> ```python\n> my_list = [1, 2, 3, 4, 5]\n> ```\n>\n> ### 2. 元组（Tuple）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：类似于列表，但不可变；一旦创建，元素不能修改；支持随机存取。\n>\n> ```python\n> my_tuple = (1, 2, 3, 4, 5)\n> ```\n>\n> ### 3. 字典（Dictionary）\n>\n> - **逻辑结构**：集合结构\n> - **存储结构**：哈希表（散列存储）\n> - **特点**：键值对存储，通过键快速查找值；不保证顺序；动态调整大小。\n>\n> 从python3.7开始改为有序\n>\n> ```python\n> my_dict = {'a': 1, 'b': 2, 'c': 3}\n> ```\n>\n> ### 4. 集合（Set）\n>\n> - **逻辑结构**：集合结构\n> - **存储结构**：哈希表（散列存储）\n> - **特点**：无序不重复元素集；支持快速查找、插入和删除操作。\n>\n> ```python\n> my_set = {1, 2, 3, 4, 5}\n> ```\n>\n> ### 5. 字符串（String）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：顺序存储\n> - **特点**：不可变字符序列；支持随机存取。\n>\n> ```python\n> my_string = \"hello\"\n> ```\n>\n> ### 6. 队列（Queue）\n>\n> Python中没有内置的队列结构，但可以使用`collections.deque`来实现。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：链式存储\n> - **特点**：双端队列，可以在两端快速插入和删除。\n>\n> ```python\n> from collections import deque\n> my_queue = deque([1, 2, 3, 4, 5])\n> ```\n>\n> ### 7. 栈（Stack）\n>\n> Python中没有内置的栈结构，但列表可以用作栈。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：LIFO（后进先出）结构，使用`append`和`pop`操作。\n>\n> ```python\n> my_stack = [1, 2, 3, 4, 5]\n> my_stack.append(6)  # 入栈\n> my_stack.pop()  # 出栈\n> ```\n>\n> ### 8. 链表（Linked List）\n>\n> Python标准库中没有内置的链表，但可以自定义实现。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：链式存储\n> - **特点**：动态调整大小，插入和删除操作高效。\n>\n> ```python\n> class Node:\n>     def __init__(self, value=None):\n>         self.value = value\n>         self.next = None\n> \n> class LinkedList:\n>     def __init__(self):\n>         self.head = None\n> \n>     def append(self, value):\n>         new_node = Node(value)\n>         if not self.head:\n>             self.head = new_node\n>         else:\n>             current = self.head\n>             while current.next:\n>                 current = current.next\n>             current.next = new_node\n> \n> my_linked_list = LinkedList()\n> my_linked_list.append(1)\n> my_linked_list.append(2)\n> ```\n>\n> ### 9. 优先队列（Priority Queue）\n>\n> 可以使用`heapq`模块实现。\n>\n> - **逻辑结构**：树形结构\n> - **存储结构**：二叉堆（顺序存储）\n> - **特点**：支持快速获取和删除最小（或最大）元素。\n>\n> ```python\n> import heapq\n> my_priority_queue = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n> heapq.heapify(my_priority_queue)  # 转换为堆\n> heapq.heappop(my_priority_queue)  # 删除并返回最小元素\n> ```\n\n## 2. 算法与算法评价\n\n> 算法定义：对特定问题求解步骤的一种描述，是指令的有限序列，每条指令表示一个或多个操作\n>\n> 度量：时间复杂度和空间复杂度\n>\n> 一个语句的频度: 该语句在算法中被重复执行的次数\n\n时间复杂度\n\n- 计算：取 算法中所有语句的频度之和中增长最快的项，将其系数置为1作为时间复杂度的度量\n\n- 一般是考虑最坏情况下的时间复杂度，确保算法运行时间不超过它\n\n空间复杂度\n\n- 算法所消耗的存储空间\n\n# 二. 线性表\n\n# 三. 栈、队列和数组\n\n# 四. 串\n\n# 五. 树\n\n# 六. 图\n\n# 七. 查找\n\n# 八. 排序\n\n\n\n","source":"_posts/数据结构从入门到放弃.md","raw":"---\ntitle: 数据结构从入门到放弃\ndate: 2024-05-23 15:09:19\ntags: 数据结构\n---\n\n# 一. 基础\n\n## 1. 数据结构基本概念\n\n> 随机存取（Random Access）是指能够以均等的时间访问数据结构中任意元素的能力\n\n**数据结构三要素**\n\n- **逻辑结构**\n  - 线性结构\n    - 一般线性表\n    - 受限线性表：栈、队列、串\n    - 线性表推广：数组\n  - 非线性结构\n    - 集合\n    - 树形结构：一般树、二叉树\n    - 图状结构：有向图、无向图\n- **存储结构**\n  - 顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元上\n    - 优点：可实现随机存取\n    - 缺点：只能使用相邻的存储单元，可能产生较多外部碎片\n  - 链式存储：不要求逻辑上相邻物理位置也相邻\n    - 优点：可以充分利用存储单元\n    - 缺点：每个元素因存储指针而占用额外存储空间，且只能实现顺序存取\n  - 索引存储：存储元素信息的同时建立附加索引表。索引表中每项称为索引项(一般形式为 (关键字，地址))\n    - 优点：检索速度快\n    - 缺点：占额外空间，增加和删除数据时也要修改索引表，花费更多时间\n  - 散列存储(哈希存储)：根据元素关键字直接算出元素的存储地址\n    - 优点：检索、增加和删除数据操作快\n    - 缺点：如散列函数不好，可能出现元素存储单元冲突，解决冲突会增加时间和空间开销\n- **运算**\n  - 定义：针对逻辑结构，指出运算的功能 \n  - 实现：针对存储结构，指出具体操作步骤\n\n> ### 1. 逻辑结构\n>\n> 逻辑结构描述了数据元素之间的逻辑关系，通常有以下几种：\n>\n> 1. **集合结构（Set Structure）**(非线性)\n>    - 数据元素之间仅有“属于同一个集合”的关系，元素之间无顺序关系。\n> 2. **线性结构（Linear Structure）**\n>    - 数据元素之间是一对一的关系，通常具有顺序性。\n>    - 典型例子：数组、链表、栈、队列。\n> 3. **树形结构（Tree Structure）**(非线性)\n>    - 数据元素之间是一对多的层次关系。\n>    - 典型例子：二叉树、平衡树、B树。\n> 4. **图形结构（Graph Structure）**(非线性)\n>    - 数据元素之间是多对多的关系，可以用节点和边表示。\n>    - 典型例子：无向图、有向图、加权图。\n>\n> ### 2. 存储结构\n>\n> 存储结构是指数据在计算机内存中的存储方式，通常有以下几种：\n>\n> 1. **顺序存储结构（Sequential Storage Structure）**\n>    - 数据元素按顺序存储在连续的存储单元中，通常通过数组实现。\n>    - 适用于随机存取。\n> 2. **链式存储结构（Linked Storage Structure）**\n>    - 数据元素存储在任意存储单元中，通过指针指示数据元素之间的逻辑关系，通常通过链表实现。\n>    - 适用于顺序存取。\n> 3. **索引存储结构（Indexed Storage Structure）**\n>    - 在存储数据元素的同时，还附加了索引表，通过索引表可以快速找到数据元素。\n>    - 常用于数据库和文件系统。\n> 4. **散列存储结构（Hashed Storage Structure）**\n>    - 通过散列函数将数据元素映射到存储位置，适用于查找操作频繁的应用场景。\n>    - 典型例子：哈希表。\n>\n> ### 组合与选择\n>\n> 不同的逻辑结构可以采用不同的存储结构实现。选择哪种存储结构主要取决于操作的效率需求。例如：\n>\n> - **数组**（线性结构）可以通过顺序存储实现，提供高效的随机访问。\n> - **链表**（线性结构）通过链式存储实现，插入和删除操作较为高效。\n> - **树**（树形结构）可以通过链式存储实现，支持动态插入和删除。\n> - **图**（图形结构）可以通过邻接矩阵（顺序存储）或邻接表（链式存储）实现。\n>\n> **举例：**\n>\n> - **数组**：线性结构 + 顺序存储\n> - **链表**：线性结构 + 链式存储\n> - **栈和队列**：线性结构 + 顺序存储或链式存储\n> - **二叉树**：树形结构 + 链式存储\n> - **哈希表**：集合结构 + 散列存储\n>\n> # Python对应\n>\n> ### 1. 列表（List）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：支持随机存取，元素可以通过索引直接访问；动态调整大小；支持高效的插入和删除操作。\n>\n> ```python\n> my_list = [1, 2, 3, 4, 5]\n> ```\n>\n> ### 2. 元组（Tuple）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：类似于列表，但不可变；一旦创建，元素不能修改；支持随机存取。\n>\n> ```python\n> my_tuple = (1, 2, 3, 4, 5)\n> ```\n>\n> ### 3. 字典（Dictionary）\n>\n> - **逻辑结构**：集合结构\n> - **存储结构**：哈希表（散列存储）\n> - **特点**：键值对存储，通过键快速查找值；不保证顺序；动态调整大小。\n>\n> 从python3.7开始改为有序\n>\n> ```python\n> my_dict = {'a': 1, 'b': 2, 'c': 3}\n> ```\n>\n> ### 4. 集合（Set）\n>\n> - **逻辑结构**：集合结构\n> - **存储结构**：哈希表（散列存储）\n> - **特点**：无序不重复元素集；支持快速查找、插入和删除操作。\n>\n> ```python\n> my_set = {1, 2, 3, 4, 5}\n> ```\n>\n> ### 5. 字符串（String）\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：顺序存储\n> - **特点**：不可变字符序列；支持随机存取。\n>\n> ```python\n> my_string = \"hello\"\n> ```\n>\n> ### 6. 队列（Queue）\n>\n> Python中没有内置的队列结构，但可以使用`collections.deque`来实现。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：链式存储\n> - **特点**：双端队列，可以在两端快速插入和删除。\n>\n> ```python\n> from collections import deque\n> my_queue = deque([1, 2, 3, 4, 5])\n> ```\n>\n> ### 7. 栈（Stack）\n>\n> Python中没有内置的栈结构，但列表可以用作栈。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：动态数组（顺序存储）\n> - **特点**：LIFO（后进先出）结构，使用`append`和`pop`操作。\n>\n> ```python\n> my_stack = [1, 2, 3, 4, 5]\n> my_stack.append(6)  # 入栈\n> my_stack.pop()  # 出栈\n> ```\n>\n> ### 8. 链表（Linked List）\n>\n> Python标准库中没有内置的链表，但可以自定义实现。\n>\n> - **逻辑结构**：线性结构\n> - **存储结构**：链式存储\n> - **特点**：动态调整大小，插入和删除操作高效。\n>\n> ```python\n> class Node:\n>     def __init__(self, value=None):\n>         self.value = value\n>         self.next = None\n> \n> class LinkedList:\n>     def __init__(self):\n>         self.head = None\n> \n>     def append(self, value):\n>         new_node = Node(value)\n>         if not self.head:\n>             self.head = new_node\n>         else:\n>             current = self.head\n>             while current.next:\n>                 current = current.next\n>             current.next = new_node\n> \n> my_linked_list = LinkedList()\n> my_linked_list.append(1)\n> my_linked_list.append(2)\n> ```\n>\n> ### 9. 优先队列（Priority Queue）\n>\n> 可以使用`heapq`模块实现。\n>\n> - **逻辑结构**：树形结构\n> - **存储结构**：二叉堆（顺序存储）\n> - **特点**：支持快速获取和删除最小（或最大）元素。\n>\n> ```python\n> import heapq\n> my_priority_queue = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n> heapq.heapify(my_priority_queue)  # 转换为堆\n> heapq.heappop(my_priority_queue)  # 删除并返回最小元素\n> ```\n\n## 2. 算法与算法评价\n\n> 算法定义：对特定问题求解步骤的一种描述，是指令的有限序列，每条指令表示一个或多个操作\n>\n> 度量：时间复杂度和空间复杂度\n>\n> 一个语句的频度: 该语句在算法中被重复执行的次数\n\n时间复杂度\n\n- 计算：取 算法中所有语句的频度之和中增长最快的项，将其系数置为1作为时间复杂度的度量\n\n- 一般是考虑最坏情况下的时间复杂度，确保算法运行时间不超过它\n\n空间复杂度\n\n- 算法所消耗的存储空间\n\n# 二. 线性表\n\n# 三. 栈、队列和数组\n\n# 四. 串\n\n# 五. 树\n\n# 六. 图\n\n# 七. 查找\n\n# 八. 排序\n\n\n\n","slug":"数据结构从入门到放弃","published":1,"updated":"2024-05-23T08:30:02.309Z","_id":"clwixegcd000qisuh38hicyqf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-数据结构基本概念\"><a href=\"#1-数据结构基本概念\" class=\"headerlink\" title=\"1. 数据结构基本概念\"></a>1. 数据结构基本概念</h2><blockquote>\n<p>随机存取（Random Access）是指能够以均等的时间访问数据结构中任意元素的能力</p>\n</blockquote>\n<p><strong>数据结构三要素</strong></p>\n<ul>\n<li><strong>逻辑结构</strong><ul>\n<li>线性结构<ul>\n<li>一般线性表</li>\n<li>受限线性表：栈、队列、串</li>\n<li>线性表推广：数组</li>\n</ul>\n</li>\n<li>非线性结构<ul>\n<li>集合</li>\n<li>树形结构：一般树、二叉树</li>\n<li>图状结构：有向图、无向图</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>存储结构</strong><ul>\n<li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元上<ul>\n<li>优点：可实现随机存取</li>\n<li>缺点：只能使用相邻的存储单元，可能产生较多外部碎片</li>\n</ul>\n</li>\n<li>链式存储：不要求逻辑上相邻物理位置也相邻<ul>\n<li>优点：可以充分利用存储单元</li>\n<li>缺点：每个元素因存储指针而占用额外存储空间，且只能实现顺序存取</li>\n</ul>\n</li>\n<li>索引存储：存储元素信息的同时建立附加索引表。索引表中每项称为索引项(一般形式为 (关键字，地址))<ul>\n<li>优点：检索速度快</li>\n<li>缺点：占额外空间，增加和删除数据时也要修改索引表，花费更多时间</li>\n</ul>\n</li>\n<li>散列存储(哈希存储)：根据元素关键字直接算出元素的存储地址<ul>\n<li>优点：检索、增加和删除数据操作快</li>\n<li>缺点：如散列函数不好，可能出现元素存储单元冲突，解决冲突会增加时间和空间开销</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>运算</strong><ul>\n<li>定义：针对逻辑结构，指出运算的功能 </li>\n<li>实现：针对存储结构，指出具体操作步骤</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"1-逻辑结构\"><a href=\"#1-逻辑结构\" class=\"headerlink\" title=\"1. 逻辑结构\"></a>1. 逻辑结构</h3><p>逻辑结构描述了数据元素之间的逻辑关系，通常有以下几种：</p>\n<ol>\n<li><strong>集合结构（Set Structure）</strong>(非线性)<ul>\n<li>数据元素之间仅有“属于同一个集合”的关系，元素之间无顺序关系。</li>\n</ul>\n</li>\n<li><strong>线性结构（Linear Structure）</strong><ul>\n<li>数据元素之间是一对一的关系，通常具有顺序性。</li>\n<li>典型例子：数组、链表、栈、队列。</li>\n</ul>\n</li>\n<li><strong>树形结构（Tree Structure）</strong>(非线性)<ul>\n<li>数据元素之间是一对多的层次关系。</li>\n<li>典型例子：二叉树、平衡树、B树。</li>\n</ul>\n</li>\n<li><strong>图形结构（Graph Structure）</strong>(非线性)<ul>\n<li>数据元素之间是多对多的关系，可以用节点和边表示。</li>\n<li>典型例子：无向图、有向图、加权图。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-存储结构\"><a href=\"#2-存储结构\" class=\"headerlink\" title=\"2. 存储结构\"></a>2. 存储结构</h3><p>存储结构是指数据在计算机内存中的存储方式，通常有以下几种：</p>\n<ol>\n<li><strong>顺序存储结构（Sequential Storage Structure）</strong><ul>\n<li>数据元素按顺序存储在连续的存储单元中，通常通过数组实现。</li>\n<li>适用于随机存取。</li>\n</ul>\n</li>\n<li><strong>链式存储结构（Linked Storage Structure）</strong><ul>\n<li>数据元素存储在任意存储单元中，通过指针指示数据元素之间的逻辑关系，通常通过链表实现。</li>\n<li>适用于顺序存取。</li>\n</ul>\n</li>\n<li><strong>索引存储结构（Indexed Storage Structure）</strong><ul>\n<li>在存储数据元素的同时，还附加了索引表，通过索引表可以快速找到数据元素。</li>\n<li>常用于数据库和文件系统。</li>\n</ul>\n</li>\n<li><strong>散列存储结构（Hashed Storage Structure）</strong><ul>\n<li>通过散列函数将数据元素映射到存储位置，适用于查找操作频繁的应用场景。</li>\n<li>典型例子：哈希表。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"组合与选择\"><a href=\"#组合与选择\" class=\"headerlink\" title=\"组合与选择\"></a>组合与选择</h3><p>不同的逻辑结构可以采用不同的存储结构实现。选择哪种存储结构主要取决于操作的效率需求。例如：</p>\n<ul>\n<li><strong>数组</strong>（线性结构）可以通过顺序存储实现，提供高效的随机访问。</li>\n<li><strong>链表</strong>（线性结构）通过链式存储实现，插入和删除操作较为高效。</li>\n<li><strong>树</strong>（树形结构）可以通过链式存储实现，支持动态插入和删除。</li>\n<li><strong>图</strong>（图形结构）可以通过邻接矩阵（顺序存储）或邻接表（链式存储）实现。</li>\n</ul>\n<p><strong>举例：</strong></p>\n<ul>\n<li><strong>数组</strong>：线性结构 + 顺序存储</li>\n<li><strong>链表</strong>：线性结构 + 链式存储</li>\n<li><strong>栈和队列</strong>：线性结构 + 顺序存储或链式存储</li>\n<li><strong>二叉树</strong>：树形结构 + 链式存储</li>\n<li><strong>哈希表</strong>：集合结构 + 散列存储</li>\n</ul>\n<h1 id=\"Python对应\"><a href=\"#Python对应\" class=\"headerlink\" title=\"Python对应\"></a>Python对应</h1><h3 id=\"1-列表（List）\"><a href=\"#1-列表（List）\" class=\"headerlink\" title=\"1. 列表（List）\"></a>1. 列表（List）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：支持随机存取，元素可以通过索引直接访问；动态调整大小；支持高效的插入和删除操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-元组（Tuple）\"><a href=\"#2-元组（Tuple）\" class=\"headerlink\" title=\"2. 元组（Tuple）\"></a>2. 元组（Tuple）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：类似于列表，但不可变；一旦创建，元素不能修改；支持随机存取。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_tuple = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字典（Dictionary）\"><a href=\"#3-字典（Dictionary）\" class=\"headerlink\" title=\"3. 字典（Dictionary）\"></a>3. 字典（Dictionary）</h3><ul>\n<li><strong>逻辑结构</strong>：集合结构</li>\n<li><strong>存储结构</strong>：哈希表（散列存储）</li>\n<li><strong>特点</strong>：键值对存储，通过键快速查找值；不保证顺序；动态调整大小。</li>\n</ul>\n<p>从python3.7开始改为有序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_dict = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-集合（Set）\"><a href=\"#4-集合（Set）\" class=\"headerlink\" title=\"4. 集合（Set）\"></a>4. 集合（Set）</h3><ul>\n<li><strong>逻辑结构</strong>：集合结构</li>\n<li><strong>存储结构</strong>：哈希表（散列存储）</li>\n<li><strong>特点</strong>：无序不重复元素集；支持快速查找、插入和删除操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_set = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-字符串（String）\"><a href=\"#5-字符串（String）\" class=\"headerlink\" title=\"5. 字符串（String）\"></a>5. 字符串（String）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：顺序存储</li>\n<li><strong>特点</strong>：不可变字符序列；支持随机存取。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_string = <span class=\"string\">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-队列（Queue）\"><a href=\"#6-队列（Queue）\" class=\"headerlink\" title=\"6. 队列（Queue）\"></a>6. 队列（Queue）</h3><p>Python中没有内置的队列结构，但可以使用<code>collections.deque</code>来实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：链式存储</li>\n<li><strong>特点</strong>：双端队列，可以在两端快速插入和删除。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">my_queue = deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-栈（Stack）\"><a href=\"#7-栈（Stack）\" class=\"headerlink\" title=\"7. 栈（Stack）\"></a>7. 栈（Stack）</h3><p>Python中没有内置的栈结构，但列表可以用作栈。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：LIFO（后进先出）结构，使用<code>append</code>和<code>pop</code>操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_stack = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">my_stack.append(<span class=\"number\">6</span>)  <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">my_stack.pop()  <span class=\"comment\"># 出栈</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-链表（Linked-List）\"><a href=\"#8-链表（Linked-List）\" class=\"headerlink\" title=\"8. 链表（Linked List）\"></a>8. 链表（Linked List）</h3><p>Python标准库中没有内置的链表，但可以自定义实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：链式存储</li>\n<li><strong>特点</strong>：动态调整大小，插入和删除操作高效。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.head = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">append</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        new_node = Node(value)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</span><br><span class=\"line\">            self.head = new_node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            current = self.head</span><br><span class=\"line\">            <span class=\"keyword\">while</span> current.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">                current = current.<span class=\"built_in\">next</span></span><br><span class=\"line\">            current.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\"></span><br><span class=\"line\">my_linked_list = LinkedList()</span><br><span class=\"line\">my_linked_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">my_linked_list.append(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-优先队列（Priority-Queue）\"><a href=\"#9-优先队列（Priority-Queue）\" class=\"headerlink\" title=\"9. 优先队列（Priority Queue）\"></a>9. 优先队列（Priority Queue）</h3><p>可以使用<code>heapq</code>模块实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：树形结构</li>\n<li><strong>存储结构</strong>：二叉堆（顺序存储）</li>\n<li><strong>特点</strong>：支持快速获取和删除最小（或最大）元素。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">my_priority_queue = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">heapq.heapify(my_priority_queue)  <span class=\"comment\"># 转换为堆</span></span><br><span class=\"line\">heapq.heappop(my_priority_queue)  <span class=\"comment\"># 删除并返回最小元素</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"2-算法与算法评价\"><a href=\"#2-算法与算法评价\" class=\"headerlink\" title=\"2. 算法与算法评价\"></a>2. 算法与算法评价</h2><blockquote>\n<p>算法定义：对特定问题求解步骤的一种描述，是指令的有限序列，每条指令表示一个或多个操作</p>\n<p>度量：时间复杂度和空间复杂度</p>\n<p>一个语句的频度: 该语句在算法中被重复执行的次数</p>\n</blockquote>\n<p>时间复杂度</p>\n<ul>\n<li><p>计算：取 算法中所有语句的频度之和中增长最快的项，将其系数置为1作为时间复杂度的度量</p>\n</li>\n<li><p>一般是考虑最坏情况下的时间复杂度，确保算法运行时间不超过它</p>\n</li>\n</ul>\n<p>空间复杂度</p>\n<ul>\n<li>算法所消耗的存储空间</li>\n</ul>\n<h1 id=\"二-线性表\"><a href=\"#二-线性表\" class=\"headerlink\" title=\"二. 线性表\"></a>二. 线性表</h1><h1 id=\"三-栈、队列和数组\"><a href=\"#三-栈、队列和数组\" class=\"headerlink\" title=\"三. 栈、队列和数组\"></a>三. 栈、队列和数组</h1><h1 id=\"四-串\"><a href=\"#四-串\" class=\"headerlink\" title=\"四. 串\"></a>四. 串</h1><h1 id=\"五-树\"><a href=\"#五-树\" class=\"headerlink\" title=\"五. 树\"></a>五. 树</h1><h1 id=\"六-图\"><a href=\"#六-图\" class=\"headerlink\" title=\"六. 图\"></a>六. 图</h1><h1 id=\"七-查找\"><a href=\"#七-查找\" class=\"headerlink\" title=\"七. 查找\"></a>七. 查找</h1><h1 id=\"八-排序\"><a href=\"#八-排序\" class=\"headerlink\" title=\"八. 排序\"></a>八. 排序</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-数据结构基本概念\"><a href=\"#1-数据结构基本概念\" class=\"headerlink\" title=\"1. 数据结构基本概念\"></a>1. 数据结构基本概念</h2><blockquote>\n<p>随机存取（Random Access）是指能够以均等的时间访问数据结构中任意元素的能力</p>\n</blockquote>\n<p><strong>数据结构三要素</strong></p>\n<ul>\n<li><strong>逻辑结构</strong><ul>\n<li>线性结构<ul>\n<li>一般线性表</li>\n<li>受限线性表：栈、队列、串</li>\n<li>线性表推广：数组</li>\n</ul>\n</li>\n<li>非线性结构<ul>\n<li>集合</li>\n<li>树形结构：一般树、二叉树</li>\n<li>图状结构：有向图、无向图</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>存储结构</strong><ul>\n<li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元上<ul>\n<li>优点：可实现随机存取</li>\n<li>缺点：只能使用相邻的存储单元，可能产生较多外部碎片</li>\n</ul>\n</li>\n<li>链式存储：不要求逻辑上相邻物理位置也相邻<ul>\n<li>优点：可以充分利用存储单元</li>\n<li>缺点：每个元素因存储指针而占用额外存储空间，且只能实现顺序存取</li>\n</ul>\n</li>\n<li>索引存储：存储元素信息的同时建立附加索引表。索引表中每项称为索引项(一般形式为 (关键字，地址))<ul>\n<li>优点：检索速度快</li>\n<li>缺点：占额外空间，增加和删除数据时也要修改索引表，花费更多时间</li>\n</ul>\n</li>\n<li>散列存储(哈希存储)：根据元素关键字直接算出元素的存储地址<ul>\n<li>优点：检索、增加和删除数据操作快</li>\n<li>缺点：如散列函数不好，可能出现元素存储单元冲突，解决冲突会增加时间和空间开销</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>运算</strong><ul>\n<li>定义：针对逻辑结构，指出运算的功能 </li>\n<li>实现：针对存储结构，指出具体操作步骤</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"1-逻辑结构\"><a href=\"#1-逻辑结构\" class=\"headerlink\" title=\"1. 逻辑结构\"></a>1. 逻辑结构</h3><p>逻辑结构描述了数据元素之间的逻辑关系，通常有以下几种：</p>\n<ol>\n<li><strong>集合结构（Set Structure）</strong>(非线性)<ul>\n<li>数据元素之间仅有“属于同一个集合”的关系，元素之间无顺序关系。</li>\n</ul>\n</li>\n<li><strong>线性结构（Linear Structure）</strong><ul>\n<li>数据元素之间是一对一的关系，通常具有顺序性。</li>\n<li>典型例子：数组、链表、栈、队列。</li>\n</ul>\n</li>\n<li><strong>树形结构（Tree Structure）</strong>(非线性)<ul>\n<li>数据元素之间是一对多的层次关系。</li>\n<li>典型例子：二叉树、平衡树、B树。</li>\n</ul>\n</li>\n<li><strong>图形结构（Graph Structure）</strong>(非线性)<ul>\n<li>数据元素之间是多对多的关系，可以用节点和边表示。</li>\n<li>典型例子：无向图、有向图、加权图。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-存储结构\"><a href=\"#2-存储结构\" class=\"headerlink\" title=\"2. 存储结构\"></a>2. 存储结构</h3><p>存储结构是指数据在计算机内存中的存储方式，通常有以下几种：</p>\n<ol>\n<li><strong>顺序存储结构（Sequential Storage Structure）</strong><ul>\n<li>数据元素按顺序存储在连续的存储单元中，通常通过数组实现。</li>\n<li>适用于随机存取。</li>\n</ul>\n</li>\n<li><strong>链式存储结构（Linked Storage Structure）</strong><ul>\n<li>数据元素存储在任意存储单元中，通过指针指示数据元素之间的逻辑关系，通常通过链表实现。</li>\n<li>适用于顺序存取。</li>\n</ul>\n</li>\n<li><strong>索引存储结构（Indexed Storage Structure）</strong><ul>\n<li>在存储数据元素的同时，还附加了索引表，通过索引表可以快速找到数据元素。</li>\n<li>常用于数据库和文件系统。</li>\n</ul>\n</li>\n<li><strong>散列存储结构（Hashed Storage Structure）</strong><ul>\n<li>通过散列函数将数据元素映射到存储位置，适用于查找操作频繁的应用场景。</li>\n<li>典型例子：哈希表。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"组合与选择\"><a href=\"#组合与选择\" class=\"headerlink\" title=\"组合与选择\"></a>组合与选择</h3><p>不同的逻辑结构可以采用不同的存储结构实现。选择哪种存储结构主要取决于操作的效率需求。例如：</p>\n<ul>\n<li><strong>数组</strong>（线性结构）可以通过顺序存储实现，提供高效的随机访问。</li>\n<li><strong>链表</strong>（线性结构）通过链式存储实现，插入和删除操作较为高效。</li>\n<li><strong>树</strong>（树形结构）可以通过链式存储实现，支持动态插入和删除。</li>\n<li><strong>图</strong>（图形结构）可以通过邻接矩阵（顺序存储）或邻接表（链式存储）实现。</li>\n</ul>\n<p><strong>举例：</strong></p>\n<ul>\n<li><strong>数组</strong>：线性结构 + 顺序存储</li>\n<li><strong>链表</strong>：线性结构 + 链式存储</li>\n<li><strong>栈和队列</strong>：线性结构 + 顺序存储或链式存储</li>\n<li><strong>二叉树</strong>：树形结构 + 链式存储</li>\n<li><strong>哈希表</strong>：集合结构 + 散列存储</li>\n</ul>\n<h1 id=\"Python对应\"><a href=\"#Python对应\" class=\"headerlink\" title=\"Python对应\"></a>Python对应</h1><h3 id=\"1-列表（List）\"><a href=\"#1-列表（List）\" class=\"headerlink\" title=\"1. 列表（List）\"></a>1. 列表（List）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：支持随机存取，元素可以通过索引直接访问；动态调整大小；支持高效的插入和删除操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-元组（Tuple）\"><a href=\"#2-元组（Tuple）\" class=\"headerlink\" title=\"2. 元组（Tuple）\"></a>2. 元组（Tuple）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：类似于列表，但不可变；一旦创建，元素不能修改；支持随机存取。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_tuple = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字典（Dictionary）\"><a href=\"#3-字典（Dictionary）\" class=\"headerlink\" title=\"3. 字典（Dictionary）\"></a>3. 字典（Dictionary）</h3><ul>\n<li><strong>逻辑结构</strong>：集合结构</li>\n<li><strong>存储结构</strong>：哈希表（散列存储）</li>\n<li><strong>特点</strong>：键值对存储，通过键快速查找值；不保证顺序；动态调整大小。</li>\n</ul>\n<p>从python3.7开始改为有序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_dict = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-集合（Set）\"><a href=\"#4-集合（Set）\" class=\"headerlink\" title=\"4. 集合（Set）\"></a>4. 集合（Set）</h3><ul>\n<li><strong>逻辑结构</strong>：集合结构</li>\n<li><strong>存储结构</strong>：哈希表（散列存储）</li>\n<li><strong>特点</strong>：无序不重复元素集；支持快速查找、插入和删除操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_set = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-字符串（String）\"><a href=\"#5-字符串（String）\" class=\"headerlink\" title=\"5. 字符串（String）\"></a>5. 字符串（String）</h3><ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：顺序存储</li>\n<li><strong>特点</strong>：不可变字符序列；支持随机存取。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_string = <span class=\"string\">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-队列（Queue）\"><a href=\"#6-队列（Queue）\" class=\"headerlink\" title=\"6. 队列（Queue）\"></a>6. 队列（Queue）</h3><p>Python中没有内置的队列结构，但可以使用<code>collections.deque</code>来实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：链式存储</li>\n<li><strong>特点</strong>：双端队列，可以在两端快速插入和删除。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">my_queue = deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-栈（Stack）\"><a href=\"#7-栈（Stack）\" class=\"headerlink\" title=\"7. 栈（Stack）\"></a>7. 栈（Stack）</h3><p>Python中没有内置的栈结构，但列表可以用作栈。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：动态数组（顺序存储）</li>\n<li><strong>特点</strong>：LIFO（后进先出）结构，使用<code>append</code>和<code>pop</code>操作。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_stack = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">my_stack.append(<span class=\"number\">6</span>)  <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">my_stack.pop()  <span class=\"comment\"># 出栈</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-链表（Linked-List）\"><a href=\"#8-链表（Linked-List）\" class=\"headerlink\" title=\"8. 链表（Linked List）\"></a>8. 链表（Linked List）</h3><p>Python标准库中没有内置的链表，但可以自定义实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：线性结构</li>\n<li><strong>存储结构</strong>：链式存储</li>\n<li><strong>特点</strong>：动态调整大小，插入和删除操作高效。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.head = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">append</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        new_node = Node(value)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</span><br><span class=\"line\">            self.head = new_node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            current = self.head</span><br><span class=\"line\">            <span class=\"keyword\">while</span> current.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">                current = current.<span class=\"built_in\">next</span></span><br><span class=\"line\">            current.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\"></span><br><span class=\"line\">my_linked_list = LinkedList()</span><br><span class=\"line\">my_linked_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">my_linked_list.append(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-优先队列（Priority-Queue）\"><a href=\"#9-优先队列（Priority-Queue）\" class=\"headerlink\" title=\"9. 优先队列（Priority Queue）\"></a>9. 优先队列（Priority Queue）</h3><p>可以使用<code>heapq</code>模块实现。</p>\n<ul>\n<li><strong>逻辑结构</strong>：树形结构</li>\n<li><strong>存储结构</strong>：二叉堆（顺序存储）</li>\n<li><strong>特点</strong>：支持快速获取和删除最小（或最大）元素。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">my_priority_queue = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">heapq.heapify(my_priority_queue)  <span class=\"comment\"># 转换为堆</span></span><br><span class=\"line\">heapq.heappop(my_priority_queue)  <span class=\"comment\"># 删除并返回最小元素</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"2-算法与算法评价\"><a href=\"#2-算法与算法评价\" class=\"headerlink\" title=\"2. 算法与算法评价\"></a>2. 算法与算法评价</h2><blockquote>\n<p>算法定义：对特定问题求解步骤的一种描述，是指令的有限序列，每条指令表示一个或多个操作</p>\n<p>度量：时间复杂度和空间复杂度</p>\n<p>一个语句的频度: 该语句在算法中被重复执行的次数</p>\n</blockquote>\n<p>时间复杂度</p>\n<ul>\n<li><p>计算：取 算法中所有语句的频度之和中增长最快的项，将其系数置为1作为时间复杂度的度量</p>\n</li>\n<li><p>一般是考虑最坏情况下的时间复杂度，确保算法运行时间不超过它</p>\n</li>\n</ul>\n<p>空间复杂度</p>\n<ul>\n<li>算法所消耗的存储空间</li>\n</ul>\n<h1 id=\"二-线性表\"><a href=\"#二-线性表\" class=\"headerlink\" title=\"二. 线性表\"></a>二. 线性表</h1><h1 id=\"三-栈、队列和数组\"><a href=\"#三-栈、队列和数组\" class=\"headerlink\" title=\"三. 栈、队列和数组\"></a>三. 栈、队列和数组</h1><h1 id=\"四-串\"><a href=\"#四-串\" class=\"headerlink\" title=\"四. 串\"></a>四. 串</h1><h1 id=\"五-树\"><a href=\"#五-树\" class=\"headerlink\" title=\"五. 树\"></a>五. 树</h1><h1 id=\"六-图\"><a href=\"#六-图\" class=\"headerlink\" title=\"六. 图\"></a>六. 图</h1><h1 id=\"七-查找\"><a href=\"#七-查找\" class=\"headerlink\" title=\"七. 查找\"></a>七. 查找</h1><h1 id=\"八-排序\"><a href=\"#八-排序\" class=\"headerlink\" title=\"八. 排序\"></a>八. 排序</h1>"},{"title":"Python AI从入门到放弃","date":"2023-06-30T03:14:42.000Z","_content":"\n# Python AI从入门到放弃\n\n## 1. 概述\n\n### 1.1. 人工智能起源\n\n- 图灵测试\n- 达特茅斯会议\n\n### 1.2. 人工智能三个阶段\n\n- 1980年代是正式成形期\n- 1990-2010年代是蓬勃发展期\n- 2012年之后是深度学习期\n\n### 1.3. 人工智能、机器学习和深度学习\n\n- 机器学习是人工智能的一个实现途径\n- 深度学习是机器学习的一个方法发展而来\n\n### 1.4. 主要分支\n\n- 计算机视觉 CV\n  - 人脸识别\n- 自然语言处理 NLP\n  - 语音识别\n  - 语义识别\n- 机器人\n\n### 1.5. 人工智能必备三要素\n\n- 数据\n- 算法\n- 计算力\n\n### 1.6. GPU、CPU\n\n- GPU -- 计算密集型\n- CPU  --  IO密集型\n\n## 2. 机器学习\n\n### 2.1. 工作流程\n\n1. 数据获取\n\n数据类型构成\n- 特征值 + 目标值（目标值分为离散还是连续）\n- 仅有特征值，无目标值\n\n数据划分\n\n- 训练集 0.7~0.8\n- 测试集 0.2~0.3\n\n2. 数据基本处理\n\n> 对数据进行缺失值、去除异常值等处理\n\n3. 特征工程\n\n> 把数据转换为机器更容易识别的数据\n>\n> 数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已\n\n- 特征提取\n- 特征预处理\n- 特征降维\n\n4. 机器学习（模型训练）\n\n> 选择合适的算法对模型进行训练\n\n5.  模型评估\n\n> 对训练好的模型进行评估\n\n### 2.2. 机器学习算法分类\n\n- 监督学习：有特征值，有目标值\n  - 目标值连续：回归\n  - 目标值离散：分类\n- 无监督学习：仅有特征值\n- 半监督学习：有特征值，但一部分数据有目标值 ，一部分没有\n- 强化学习：即自动进行决策，并可以做连续决策\n  - 动态过程，上一步的输出是下一步的输入\n  - 四要素：agent, action, environment, reward\n\n### 2.3. 模型评估\n\n- 分类模型评估\n\n  - 准确率：预测正确的数占样本总数的比例\n  - 精确率：预测为正的数占全部预测为正的比例\n  - 召回率： 预测为正占全部正样本的比例\n  - F1-score：主要用于评估模型的稳健性\n  - AUC指标：主要用于评估样本不均衡的情况\n\n- 回归模型评估\n\n  > p = predicted target\n  >\n  > a = actual target\n\n  - 均方根误差(Root Mean Squared Error, RMSE)\n  - 相对平方误差(Relative Squared Error, RSE)\n  - 平均绝对误差(Mean Absolute Error, MAE)\n  - 相对绝对误差(Relative Absolute Error, RAE)\n  - 决定系数(Coefficient of Determination)\n\n- 拟合度（评估结果）\n\n  - 欠拟合：学习到的特征太少（有两个眼睛的就是人）\n  - 过拟合：学习到的特征太多（仅黄皮肤的才是人）\n\n## 3. 机器学习环境配置\n\n### 3.1. 环境安装\n\n- 创建虚拟环境： `conda create --name=ai0 python=3.10`\n- 安装相关包：\n  - matplotlib==2.2.2\n  - numpy==1.14.2\n  - pandas==0.20.3\n  - tables==3.4.2\n  - jupyter=1.0.0\n- 先从cmd进入指定目录后执行`jupyter notebook`\n\n### 3.2. jupyter基操\n\n> 类似vim, 分不同的输入模式，命令也和vim基本相同\n\n- 两种模式通用快捷键\n  - `Shift + Enter`  执行本单元代码，跳转到下一单元\n  - `Ctrl + Enter` 执行本单元代码，留在本单元\n- **命令模式**：按 `ESC`  进入\n  - `Y`, cell 切换到Code模式\n  - `M`, cell 切换到Markdown模式\n  - `A`, 在当前cell上面添加cell\n  - `B`, 在当前cell下面添加cell\n  - `DD`, 删除当前cell\n  - `Z`, 回退\n  - `L`, 为当前cell加上行号<!--\n  - `Ctrl+Shift+P`, 对话框输入命令直接运行\n  - `Ctrl+Home`, 跳转到首个cell\n  - `Ctrl+End`, 跳转到末个cell\n  - `Shift + M` 合并下面的cell\n- **编辑模式**: 按 `Enter` 进入\n  - `Ctrl + 点击`, 多光标操作\n  - `Ctrl + Z`, 回退\n  - `Ctrl + Y`, 重做\n  - `TAB`,  代码补全\n  - `Ctrl + /` 注释/取消注释\n  - `代码后 + ;`  屏蔽输出\n\n## 4. Matplotlib\n\n> 用于开发2D、3D图表\n>\n> 使用简单，以渐进、交互式实现数据可视化\n\n### 4.1. 三层结构\n\n- **容器层**\n  - Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具\n  - Figure: `Canvas`上第一层，充当画布角色 \n  - Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色\n    - Axes: 坐标系，数据的绘图区域\n    - Axis: 坐标轴\n- **辅助显示层**：为Axes内除了根据数据绘制出的图像以外的内容，主要包括`facecolor(Axes外观)`、`spines(边框线)`、`axis(坐标轴)` 、`axix lable(坐标轴名称)`、`tick(坐标轴刻度)`、`tick lable(坐标轴刻度标签)`、`gird(网格线)`、`legend(图例)`、`title(标题)`等\n- **图像层**：指`Axes`内通过 `plot`, `scatter`, `histogram`, `pie`等函数根据数据绘制出的图像。\n\n### 4.2. 折线图与基操\n\n> `help(plt.figure)` 查看命令帮助\n>\n> 负号报错 plt.rcParams[\"axes.unicode_minus\"]=False 加这句\n>\n> 中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib/mpl-data/matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置\n>\n> 报错`missing from current font`，加以下代码\n>\n> `from pylab import mpl\n> mpl.rcParams['font.sans-serif'] = ['SimHei']`\n\n**Hello World**\n\n```python\nimport matplotlib.pyplot as plt\n\n# 1.创建画布\nplt.figure()\n\n# 2.图像绘制\nx = [i for i in range(1, 6)]\ny = [i for i in range(3, 8)]\nplt.plot(x, y)\n\n# 2.1. 图像保存, 要放到show前\nplt.savefig()\n\n# 3.显示图像\nplt.show()\n\n```\n\n**基操**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\nplt.figure(figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\nplt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\nplt.plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\nplt.yticks(y_ticks[::5])\nplt.xticks(x[::5], x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\nplt.grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\nplt.xlabel(\"时间\")\nplt.ylabel(\"温度\")\nplt.title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\nplt.legend()\n\n# 3. 图像显示\nplt.show()\n```\n\n**多个坐标系图像显示**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 多个坐标系显示图像\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\n# plt.figure(figsize=(20, 8), dpi=100)\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\n# plt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\n# plt.plot(x, y_shanghai, label=\"上海\")\naxes[0].plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\naxes[1].plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\n# plt.yticks(y_ticks[::5])\n# plt.xticks(x[::5], x_ticks_labels[::5])\n\naxes[0].set_xticks(x[::5])\naxes[0].set_yticks(y_ticks[::5])\naxes[0].set_xticklabels(x_ticks_labels[::5])\n\naxes[1].set_xticks(x[::5])\naxes[1].set_yticks(y_ticks[::5])\naxes[1].set_xticklabels(x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\n# plt.grid(True, linestyle=\"-\", alpha=1)\naxes[0].grid(True, linestyle=\"-\", alpha=1)\naxes[1].grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\n# plt.xlabel(\"时间\")\n# plt.ylabel(\"温度\")\n# plt.title(\"中午11：00到12：00温度变化\")\n\naxes[0].set_xlabel(\"时间\")\naxes[0].set_ylabel(\"温度\")\naxes[0].set_title(\"中午11：00到12：00温度变化\")\n\naxes[1].set_xlabel(\"时间\")\naxes[1].set_ylabel(\"温度\")\naxes[1].set_title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\n# plt.legend(loc=0)\n\naxes[0].legend(loc=0)\naxes[1].legend(loc=0)\n\n# 3. 图像显示\nplt.show()\n```\n\n## 5. Numpy\n\n### 5.1. 基础\n\n**定义：**\n\n- Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组\n- Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多\n- Numpy使用`ndarray`对象来处理多维数组，该对象是一个快速而灵活的大数据容器\n\n**优势：**\n\n- 内存块风格：`ndarray`在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快\n  - 原因：`ndarray`中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以`ndarray`在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素\n\n- 并行化运算：向量化运算\n- Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码\n\n```python\nimport time\nimport random\nimport numpy as np\n\n# 创建\nscore = np.array([random.sample(range(0, 100), 5) for i in  range(8)]) \nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\n\n# 效率对比\na = [random.random() for _ in range(1000_0000)]\n\n# %time 魔法方法，查看当前行代码运行耗时情况 \n# cpu times CPU执行耗时, wall time 总耗时\n%time sum1 = sum(a)\n\nb = np.array(a)\n\n%time sum2 = np.sum(b)\n\"\"\"\nCPU times: total: 31.2 ms\nWall time: 31.9 ms\nCPU times: total: 15.6 ms\nWall time: 9.97 ms\n\"\"\"\n```\n\n**常用属性：**\n\n```python\nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\nscore.shape  # (8, 5)\nscore.ndim  # 2  数组维度(也就是有几层[])\nscore.size  # 40\nscore.itemsize  # 4 每个元素占字节长度\nscore.dtype  # dtype('int32')\n\n# 设置ndarray类型\na = np.array([[1, 2, 3], [2, 3, 4]], dtype=np.float32)\na.dtype  # dtype('float32')\n```\n\n#### 5.1.1.  生成数组\n\n```python\n# 0/1数组\nnp.ones([3, 4])\n\"\"\"\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\"\"\"\n\nnp.zeros([3, 4])\n\"\"\"\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\"\"\"\n\n# 从现有数组创建数组\na = np.array([[1,2,3], [4,5,6]])\n\na1 = np.array(a)  # 深拷贝\n\na2 = np.asarray(a)  # 浅拷贝\n\n# 生成固定范围数组\nnp.linespace(0, 100, 11)  # 等间隔生成11个\n# array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])\n\nnp.aragne(10, 50, 2)  # 步长2来生成\n# array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n\n```\n\n**生成随机数组**\n\n- 生成均匀分布：`np.random.uniform(low, high, size)`\n\n- 正态分布\n  - 均值：平均值\n  - 标准差：方差开根号\n  - 生成标准正态分布：`np.random.normal(low, high, size)`\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 均匀分布\nx = np.random.uniform(1, 10, 1000_0000)  # 准备数据\nplt.figure(figsize=(20, 8), dpi=100)  # 画布\nplt.hist(x, bins=1000)  # 绘制 x代表要使用的数据， bins表示要划分的区间数\nplt.show()  # 显示\n\n# 正态分布\nx = np.random.normal(1.75, 1, 1000_0000)\nplt.figure(figsize=(20, 8), dpi=100)\nplt.hist(x, bins=1000)\nplt.show()\n```\n\n#### 5.1.2. 数组索引、切片\n\n- 直接索引，先对行进行索引，再对列进行索引\n- 高维度索引，从宏观到微观\n\n```python\na = np.random.normal(0, 1, (8, 10))  # 8rows, 10cols\na[0:2, 0:3]  # 前两行，前三列\n\na = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\na[0, 0, 0]  # 1\na[1, 0, 0]  # 7\na[1, 1, 2]  # 12\n\n```\n\n#### 5.1.3. 形状修改\n\n- `.reshape([rows, cols])` 不进行行列互换，产生新变量\n\n- `.resize([rows, cols])` 进行行列互换，对原值 进行更改\n\n- `.T` 行列互换\n\n#### 5.1.4. 类型修改\n\n- `.astype(np.int32)` \n- `.tobytes()`\n\n- `np.unique(nparray)`  去重\n\n  ```python\n  arr = np.array([[1, 2, 3, 3, 3], [2, 3, 4,4 , 5]])\n  np.unique(arr)\n  # array([1, 2, 3, 4, 5])\n  ```\n\n#### 5.1.5 运算\n\n```python\nimport numpy as np\n\n# 逻辑运算\na = np.random.normal(0, 1, (8, 10))\na > 1  # 全部数据进行此运算，结果赋值为 True/False\na[a > 1] = 2  # 全部数据 >1 赋值为 2\n\n# 通用判断函数,和python的all和any一样\nb = a[0:2, 0:5]  # 切为2行5列\nnp.all(b > 0)  # False\nnp.any(b > 0)  # True\n\n# 三元运算\nnp.where(b > 0, 1, 0)  # array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])\n\nnp.where(np.logical_and(b > -0.5, b < 0.5), 1, 0)  # array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])\n\nnp.where(np.logical_or(b > -0.5, b < 0.5), 1, 0)  # array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n# 统计运算\nmin\nmax\nmedian\nmean\nstd 标准差\nvar  方差\nargmax  最大值下标\nargmin  \n```\n\n### 5.2. 矩阵\n\n- 矩阵：二维数组\n  - 向量：一维数组\n- 加法：对应位置相加\n- 标量乘法：标量和每个位置元素相乘\n- 矩阵乘法：[M行，N列] * [N行，L列] = [M行，L列]\n  - 满足结合律，不满足交换律\n- 单位矩阵：对角线为1，其他位置为0的矩阵\n- 逆：A * B = 单位矩阵，A和B互为逆矩阵\n- 转置T：行列互换\n\n### 5.3. 数组间运算\n\n- 数组和数字：可以直接运算\n\n- 数组和数组：广播机制\n  - 维度相同\n  - shape对应位置为1\n\n```python\nimport numpy as np\n\n# 数组运算\narr1 = np.array([[1, 2, 3], [2, 3, 4]])  # 2，3\narr2 = np.array([[2], [1]])  # 2， 1  \n\narr1 + arr2  # 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])\n\n# 矩阵乘法\na = np.array([[1, 2], [2, 3], [3, 4]])\nb = np.array([[3], [2]])\n\n# 矩阵乘\nnp.matmul(a, b)  # 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])\n\n# 点乘\nnp.dot(2, b)  # array([[6], [4]])\n```\n\n## 6. Pandas\n\n- 封装了Numpy 和 matplotlib\n- 便捷的数据处理，展示能力\n\n```python\nimport pandas as pd\nimport numpy as np\n\na = np.random.normal(0, 1, (10, 5))\n\na_shape = pd.DataFrame(a).shape  # (10, 5)\n\nrow_index = [f\"第{i+1}行\" for i in range(a_shape[0])]\ncolumn_name = pd.date_range(start=\"20230713\", periods=a_shape[1], freq=\"B\")  # freq:B 工作日 DatetimeIndex(['2023-07-13', '2023-07-14', '2023-07-17', '2023-07-18','2023-07-19'], dtype='datetime64[ns]', freq='B')\n\nb = pd.DataFrame(a, index=row_index, columns=column_name)  # 设置行索引, 列名\n\nb.shape  # 形状\nb.index  # 行索引\nb.columns  # 列名\nb.values  # array\nb.T  # 转置\nb.head()  # 前5行\nb.tail()  # 后5行\n\n\n# 重设索引\nb.index = row_index\nc = b.reset_index(drop=False)  # 默认drop=False不删除原索引，增加index列 值为原索引\n\n# 设置某列为索引，可设置多列\nc.set_index(keys=[\"index\"])  \n\n```\n\n## 7. K-近邻算法\n\n> 根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)\n>\n> - \n\n### 7.1. Scikit-learn\n\n> Classification  分类\n>\n> Regression  回归\n>\n> Clustering  聚类\n>\n> Dimensionality reduction 维度缩小\n>\n> Model selection  模型选择\n>\n> Preprocessing  特征预处理\n\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# 获取数据\nx = [[1], [2], [0], [0]]\ny = [1, 1, 0, 0]\n\n# machine learning\n# 1. 实例化一个训练模型\nestimator = KNeighborsClassifier(n_neighbors=2)  # 选定几个参考数据\n\n# 2. 调用fit方法进行训练\nestimator.fit(x, y)\n\n# 预测其他值\nprint(estimator.predict([[-1]]))\n\n```\n\n### 7.2. 距离度量\n\n欧式距离：差平方开根号\n\n曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)\n\n- d = |x1 - x2| + |y1 - y2|\n\n切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)\n\n闵可夫斯基距离(Minkowski Distance): \n$$\nd_{12} = p\\sqrt{\\sum_{k=1}^n|x_{1k} - x_{2k}|^p}\n$$\n\n- 当p=1, 为曼哈顿距离\n- 当p=2，为欧氏距离\n- 当p$\\to\\infty$， 为切比雪夫距离\n\n标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)\n\n- 既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：\n\n$$\nd_{12} = \\sqrt{\\sum_{k=1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}\n$$\n\n余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异\n\n汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计\n\n杰卡德距离(Jaccard Distance): 通过交并集进行统计\n\n马氏距离(Mahalanobis Distance): 通过样本分布进行计算\n\n### 7.3. K值选择\n\n过小：容易受到异常点的影响，容易过拟合\n\n过大：受到样本均衡的问题，容易欠拟合\n\n### 7.4. KD树\n\n\n\n\n\n## 8. 线性回归\n\n\n\n## 9. 逻辑回归\n\n\n\n## 10. 决策树算法\n\n\n\n\n\n## 11. 集成学习\n\n\n\n\n\n## 12. 聚类算法\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/人工智能从入门到放弃.md","raw":"---\ntitle: Python AI从入门到放弃\ndate: 2023-06-30 11:14:42\ntags: python machine-learning\n---\n\n# Python AI从入门到放弃\n\n## 1. 概述\n\n### 1.1. 人工智能起源\n\n- 图灵测试\n- 达特茅斯会议\n\n### 1.2. 人工智能三个阶段\n\n- 1980年代是正式成形期\n- 1990-2010年代是蓬勃发展期\n- 2012年之后是深度学习期\n\n### 1.3. 人工智能、机器学习和深度学习\n\n- 机器学习是人工智能的一个实现途径\n- 深度学习是机器学习的一个方法发展而来\n\n### 1.4. 主要分支\n\n- 计算机视觉 CV\n  - 人脸识别\n- 自然语言处理 NLP\n  - 语音识别\n  - 语义识别\n- 机器人\n\n### 1.5. 人工智能必备三要素\n\n- 数据\n- 算法\n- 计算力\n\n### 1.6. GPU、CPU\n\n- GPU -- 计算密集型\n- CPU  --  IO密集型\n\n## 2. 机器学习\n\n### 2.1. 工作流程\n\n1. 数据获取\n\n数据类型构成\n- 特征值 + 目标值（目标值分为离散还是连续）\n- 仅有特征值，无目标值\n\n数据划分\n\n- 训练集 0.7~0.8\n- 测试集 0.2~0.3\n\n2. 数据基本处理\n\n> 对数据进行缺失值、去除异常值等处理\n\n3. 特征工程\n\n> 把数据转换为机器更容易识别的数据\n>\n> 数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已\n\n- 特征提取\n- 特征预处理\n- 特征降维\n\n4. 机器学习（模型训练）\n\n> 选择合适的算法对模型进行训练\n\n5.  模型评估\n\n> 对训练好的模型进行评估\n\n### 2.2. 机器学习算法分类\n\n- 监督学习：有特征值，有目标值\n  - 目标值连续：回归\n  - 目标值离散：分类\n- 无监督学习：仅有特征值\n- 半监督学习：有特征值，但一部分数据有目标值 ，一部分没有\n- 强化学习：即自动进行决策，并可以做连续决策\n  - 动态过程，上一步的输出是下一步的输入\n  - 四要素：agent, action, environment, reward\n\n### 2.3. 模型评估\n\n- 分类模型评估\n\n  - 准确率：预测正确的数占样本总数的比例\n  - 精确率：预测为正的数占全部预测为正的比例\n  - 召回率： 预测为正占全部正样本的比例\n  - F1-score：主要用于评估模型的稳健性\n  - AUC指标：主要用于评估样本不均衡的情况\n\n- 回归模型评估\n\n  > p = predicted target\n  >\n  > a = actual target\n\n  - 均方根误差(Root Mean Squared Error, RMSE)\n  - 相对平方误差(Relative Squared Error, RSE)\n  - 平均绝对误差(Mean Absolute Error, MAE)\n  - 相对绝对误差(Relative Absolute Error, RAE)\n  - 决定系数(Coefficient of Determination)\n\n- 拟合度（评估结果）\n\n  - 欠拟合：学习到的特征太少（有两个眼睛的就是人）\n  - 过拟合：学习到的特征太多（仅黄皮肤的才是人）\n\n## 3. 机器学习环境配置\n\n### 3.1. 环境安装\n\n- 创建虚拟环境： `conda create --name=ai0 python=3.10`\n- 安装相关包：\n  - matplotlib==2.2.2\n  - numpy==1.14.2\n  - pandas==0.20.3\n  - tables==3.4.2\n  - jupyter=1.0.0\n- 先从cmd进入指定目录后执行`jupyter notebook`\n\n### 3.2. jupyter基操\n\n> 类似vim, 分不同的输入模式，命令也和vim基本相同\n\n- 两种模式通用快捷键\n  - `Shift + Enter`  执行本单元代码，跳转到下一单元\n  - `Ctrl + Enter` 执行本单元代码，留在本单元\n- **命令模式**：按 `ESC`  进入\n  - `Y`, cell 切换到Code模式\n  - `M`, cell 切换到Markdown模式\n  - `A`, 在当前cell上面添加cell\n  - `B`, 在当前cell下面添加cell\n  - `DD`, 删除当前cell\n  - `Z`, 回退\n  - `L`, 为当前cell加上行号<!--\n  - `Ctrl+Shift+P`, 对话框输入命令直接运行\n  - `Ctrl+Home`, 跳转到首个cell\n  - `Ctrl+End`, 跳转到末个cell\n  - `Shift + M` 合并下面的cell\n- **编辑模式**: 按 `Enter` 进入\n  - `Ctrl + 点击`, 多光标操作\n  - `Ctrl + Z`, 回退\n  - `Ctrl + Y`, 重做\n  - `TAB`,  代码补全\n  - `Ctrl + /` 注释/取消注释\n  - `代码后 + ;`  屏蔽输出\n\n## 4. Matplotlib\n\n> 用于开发2D、3D图表\n>\n> 使用简单，以渐进、交互式实现数据可视化\n\n### 4.1. 三层结构\n\n- **容器层**\n  - Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具\n  - Figure: `Canvas`上第一层，充当画布角色 \n  - Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色\n    - Axes: 坐标系，数据的绘图区域\n    - Axis: 坐标轴\n- **辅助显示层**：为Axes内除了根据数据绘制出的图像以外的内容，主要包括`facecolor(Axes外观)`、`spines(边框线)`、`axis(坐标轴)` 、`axix lable(坐标轴名称)`、`tick(坐标轴刻度)`、`tick lable(坐标轴刻度标签)`、`gird(网格线)`、`legend(图例)`、`title(标题)`等\n- **图像层**：指`Axes`内通过 `plot`, `scatter`, `histogram`, `pie`等函数根据数据绘制出的图像。\n\n### 4.2. 折线图与基操\n\n> `help(plt.figure)` 查看命令帮助\n>\n> 负号报错 plt.rcParams[\"axes.unicode_minus\"]=False 加这句\n>\n> 中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib/mpl-data/matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置\n>\n> 报错`missing from current font`，加以下代码\n>\n> `from pylab import mpl\n> mpl.rcParams['font.sans-serif'] = ['SimHei']`\n\n**Hello World**\n\n```python\nimport matplotlib.pyplot as plt\n\n# 1.创建画布\nplt.figure()\n\n# 2.图像绘制\nx = [i for i in range(1, 6)]\ny = [i for i in range(3, 8)]\nplt.plot(x, y)\n\n# 2.1. 图像保存, 要放到show前\nplt.savefig()\n\n# 3.显示图像\nplt.show()\n\n```\n\n**基操**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\nplt.figure(figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\nplt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\nplt.plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\nplt.yticks(y_ticks[::5])\nplt.xticks(x[::5], x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\nplt.grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\nplt.xlabel(\"时间\")\nplt.ylabel(\"温度\")\nplt.title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\nplt.legend()\n\n# 3. 图像显示\nplt.show()\n```\n\n**多个坐标系图像显示**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 多个坐标系显示图像\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\n# plt.figure(figsize=(20, 8), dpi=100)\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\n# plt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\n# plt.plot(x, y_shanghai, label=\"上海\")\naxes[0].plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\naxes[1].plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\n# plt.yticks(y_ticks[::5])\n# plt.xticks(x[::5], x_ticks_labels[::5])\n\naxes[0].set_xticks(x[::5])\naxes[0].set_yticks(y_ticks[::5])\naxes[0].set_xticklabels(x_ticks_labels[::5])\n\naxes[1].set_xticks(x[::5])\naxes[1].set_yticks(y_ticks[::5])\naxes[1].set_xticklabels(x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\n# plt.grid(True, linestyle=\"-\", alpha=1)\naxes[0].grid(True, linestyle=\"-\", alpha=1)\naxes[1].grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\n# plt.xlabel(\"时间\")\n# plt.ylabel(\"温度\")\n# plt.title(\"中午11：00到12：00温度变化\")\n\naxes[0].set_xlabel(\"时间\")\naxes[0].set_ylabel(\"温度\")\naxes[0].set_title(\"中午11：00到12：00温度变化\")\n\naxes[1].set_xlabel(\"时间\")\naxes[1].set_ylabel(\"温度\")\naxes[1].set_title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\n# plt.legend(loc=0)\n\naxes[0].legend(loc=0)\naxes[1].legend(loc=0)\n\n# 3. 图像显示\nplt.show()\n```\n\n## 5. Numpy\n\n### 5.1. 基础\n\n**定义：**\n\n- Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组\n- Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多\n- Numpy使用`ndarray`对象来处理多维数组，该对象是一个快速而灵活的大数据容器\n\n**优势：**\n\n- 内存块风格：`ndarray`在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快\n  - 原因：`ndarray`中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以`ndarray`在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素\n\n- 并行化运算：向量化运算\n- Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码\n\n```python\nimport time\nimport random\nimport numpy as np\n\n# 创建\nscore = np.array([random.sample(range(0, 100), 5) for i in  range(8)]) \nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\n\n# 效率对比\na = [random.random() for _ in range(1000_0000)]\n\n# %time 魔法方法，查看当前行代码运行耗时情况 \n# cpu times CPU执行耗时, wall time 总耗时\n%time sum1 = sum(a)\n\nb = np.array(a)\n\n%time sum2 = np.sum(b)\n\"\"\"\nCPU times: total: 31.2 ms\nWall time: 31.9 ms\nCPU times: total: 15.6 ms\nWall time: 9.97 ms\n\"\"\"\n```\n\n**常用属性：**\n\n```python\nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\nscore.shape  # (8, 5)\nscore.ndim  # 2  数组维度(也就是有几层[])\nscore.size  # 40\nscore.itemsize  # 4 每个元素占字节长度\nscore.dtype  # dtype('int32')\n\n# 设置ndarray类型\na = np.array([[1, 2, 3], [2, 3, 4]], dtype=np.float32)\na.dtype  # dtype('float32')\n```\n\n#### 5.1.1.  生成数组\n\n```python\n# 0/1数组\nnp.ones([3, 4])\n\"\"\"\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\"\"\"\n\nnp.zeros([3, 4])\n\"\"\"\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\"\"\"\n\n# 从现有数组创建数组\na = np.array([[1,2,3], [4,5,6]])\n\na1 = np.array(a)  # 深拷贝\n\na2 = np.asarray(a)  # 浅拷贝\n\n# 生成固定范围数组\nnp.linespace(0, 100, 11)  # 等间隔生成11个\n# array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])\n\nnp.aragne(10, 50, 2)  # 步长2来生成\n# array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n\n```\n\n**生成随机数组**\n\n- 生成均匀分布：`np.random.uniform(low, high, size)`\n\n- 正态分布\n  - 均值：平均值\n  - 标准差：方差开根号\n  - 生成标准正态分布：`np.random.normal(low, high, size)`\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 均匀分布\nx = np.random.uniform(1, 10, 1000_0000)  # 准备数据\nplt.figure(figsize=(20, 8), dpi=100)  # 画布\nplt.hist(x, bins=1000)  # 绘制 x代表要使用的数据， bins表示要划分的区间数\nplt.show()  # 显示\n\n# 正态分布\nx = np.random.normal(1.75, 1, 1000_0000)\nplt.figure(figsize=(20, 8), dpi=100)\nplt.hist(x, bins=1000)\nplt.show()\n```\n\n#### 5.1.2. 数组索引、切片\n\n- 直接索引，先对行进行索引，再对列进行索引\n- 高维度索引，从宏观到微观\n\n```python\na = np.random.normal(0, 1, (8, 10))  # 8rows, 10cols\na[0:2, 0:3]  # 前两行，前三列\n\na = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\na[0, 0, 0]  # 1\na[1, 0, 0]  # 7\na[1, 1, 2]  # 12\n\n```\n\n#### 5.1.3. 形状修改\n\n- `.reshape([rows, cols])` 不进行行列互换，产生新变量\n\n- `.resize([rows, cols])` 进行行列互换，对原值 进行更改\n\n- `.T` 行列互换\n\n#### 5.1.4. 类型修改\n\n- `.astype(np.int32)` \n- `.tobytes()`\n\n- `np.unique(nparray)`  去重\n\n  ```python\n  arr = np.array([[1, 2, 3, 3, 3], [2, 3, 4,4 , 5]])\n  np.unique(arr)\n  # array([1, 2, 3, 4, 5])\n  ```\n\n#### 5.1.5 运算\n\n```python\nimport numpy as np\n\n# 逻辑运算\na = np.random.normal(0, 1, (8, 10))\na > 1  # 全部数据进行此运算，结果赋值为 True/False\na[a > 1] = 2  # 全部数据 >1 赋值为 2\n\n# 通用判断函数,和python的all和any一样\nb = a[0:2, 0:5]  # 切为2行5列\nnp.all(b > 0)  # False\nnp.any(b > 0)  # True\n\n# 三元运算\nnp.where(b > 0, 1, 0)  # array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])\n\nnp.where(np.logical_and(b > -0.5, b < 0.5), 1, 0)  # array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])\n\nnp.where(np.logical_or(b > -0.5, b < 0.5), 1, 0)  # array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n# 统计运算\nmin\nmax\nmedian\nmean\nstd 标准差\nvar  方差\nargmax  最大值下标\nargmin  \n```\n\n### 5.2. 矩阵\n\n- 矩阵：二维数组\n  - 向量：一维数组\n- 加法：对应位置相加\n- 标量乘法：标量和每个位置元素相乘\n- 矩阵乘法：[M行，N列] * [N行，L列] = [M行，L列]\n  - 满足结合律，不满足交换律\n- 单位矩阵：对角线为1，其他位置为0的矩阵\n- 逆：A * B = 单位矩阵，A和B互为逆矩阵\n- 转置T：行列互换\n\n### 5.3. 数组间运算\n\n- 数组和数字：可以直接运算\n\n- 数组和数组：广播机制\n  - 维度相同\n  - shape对应位置为1\n\n```python\nimport numpy as np\n\n# 数组运算\narr1 = np.array([[1, 2, 3], [2, 3, 4]])  # 2，3\narr2 = np.array([[2], [1]])  # 2， 1  \n\narr1 + arr2  # 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])\n\n# 矩阵乘法\na = np.array([[1, 2], [2, 3], [3, 4]])\nb = np.array([[3], [2]])\n\n# 矩阵乘\nnp.matmul(a, b)  # 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])\n\n# 点乘\nnp.dot(2, b)  # array([[6], [4]])\n```\n\n## 6. Pandas\n\n- 封装了Numpy 和 matplotlib\n- 便捷的数据处理，展示能力\n\n```python\nimport pandas as pd\nimport numpy as np\n\na = np.random.normal(0, 1, (10, 5))\n\na_shape = pd.DataFrame(a).shape  # (10, 5)\n\nrow_index = [f\"第{i+1}行\" for i in range(a_shape[0])]\ncolumn_name = pd.date_range(start=\"20230713\", periods=a_shape[1], freq=\"B\")  # freq:B 工作日 DatetimeIndex(['2023-07-13', '2023-07-14', '2023-07-17', '2023-07-18','2023-07-19'], dtype='datetime64[ns]', freq='B')\n\nb = pd.DataFrame(a, index=row_index, columns=column_name)  # 设置行索引, 列名\n\nb.shape  # 形状\nb.index  # 行索引\nb.columns  # 列名\nb.values  # array\nb.T  # 转置\nb.head()  # 前5行\nb.tail()  # 后5行\n\n\n# 重设索引\nb.index = row_index\nc = b.reset_index(drop=False)  # 默认drop=False不删除原索引，增加index列 值为原索引\n\n# 设置某列为索引，可设置多列\nc.set_index(keys=[\"index\"])  \n\n```\n\n## 7. K-近邻算法\n\n> 根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)\n>\n> - \n\n### 7.1. Scikit-learn\n\n> Classification  分类\n>\n> Regression  回归\n>\n> Clustering  聚类\n>\n> Dimensionality reduction 维度缩小\n>\n> Model selection  模型选择\n>\n> Preprocessing  特征预处理\n\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# 获取数据\nx = [[1], [2], [0], [0]]\ny = [1, 1, 0, 0]\n\n# machine learning\n# 1. 实例化一个训练模型\nestimator = KNeighborsClassifier(n_neighbors=2)  # 选定几个参考数据\n\n# 2. 调用fit方法进行训练\nestimator.fit(x, y)\n\n# 预测其他值\nprint(estimator.predict([[-1]]))\n\n```\n\n### 7.2. 距离度量\n\n欧式距离：差平方开根号\n\n曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)\n\n- d = |x1 - x2| + |y1 - y2|\n\n切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)\n\n闵可夫斯基距离(Minkowski Distance): \n$$\nd_{12} = p\\sqrt{\\sum_{k=1}^n|x_{1k} - x_{2k}|^p}\n$$\n\n- 当p=1, 为曼哈顿距离\n- 当p=2，为欧氏距离\n- 当p$\\to\\infty$， 为切比雪夫距离\n\n标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)\n\n- 既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：\n\n$$\nd_{12} = \\sqrt{\\sum_{k=1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}\n$$\n\n余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异\n\n汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计\n\n杰卡德距离(Jaccard Distance): 通过交并集进行统计\n\n马氏距离(Mahalanobis Distance): 通过样本分布进行计算\n\n### 7.3. K值选择\n\n过小：容易受到异常点的影响，容易过拟合\n\n过大：受到样本均衡的问题，容易欠拟合\n\n### 7.4. KD树\n\n\n\n\n\n## 8. 线性回归\n\n\n\n## 9. 逻辑回归\n\n\n\n## 10. 决策树算法\n\n\n\n\n\n## 11. 集成学习\n\n\n\n\n\n## 12. 聚类算法\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"人工智能从入门到放弃","published":1,"updated":"2023-07-18T11:37:33.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegce000sisuh5n8g75ug","content":"<h1 id=\"Python-AI从入门到放弃\"><a href=\"#Python-AI从入门到放弃\" class=\"headerlink\" title=\"Python AI从入门到放弃\"></a>Python AI从入门到放弃</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-人工智能起源\"><a href=\"#1-1-人工智能起源\" class=\"headerlink\" title=\"1.1. 人工智能起源\"></a>1.1. 人工智能起源</h3><ul>\n<li>图灵测试</li>\n<li>达特茅斯会议</li>\n</ul>\n<h3 id=\"1-2-人工智能三个阶段\"><a href=\"#1-2-人工智能三个阶段\" class=\"headerlink\" title=\"1.2. 人工智能三个阶段\"></a>1.2. 人工智能三个阶段</h3><ul>\n<li>1980年代是正式成形期</li>\n<li>1990-2010年代是蓬勃发展期</li>\n<li>2012年之后是深度学习期</li>\n</ul>\n<h3 id=\"1-3-人工智能、机器学习和深度学习\"><a href=\"#1-3-人工智能、机器学习和深度学习\" class=\"headerlink\" title=\"1.3. 人工智能、机器学习和深度学习\"></a>1.3. 人工智能、机器学习和深度学习</h3><ul>\n<li>机器学习是人工智能的一个实现途径</li>\n<li>深度学习是机器学习的一个方法发展而来</li>\n</ul>\n<h3 id=\"1-4-主要分支\"><a href=\"#1-4-主要分支\" class=\"headerlink\" title=\"1.4. 主要分支\"></a>1.4. 主要分支</h3><ul>\n<li>计算机视觉 CV<ul>\n<li>人脸识别</li>\n</ul>\n</li>\n<li>自然语言处理 NLP<ul>\n<li>语音识别</li>\n<li>语义识别</li>\n</ul>\n</li>\n<li>机器人</li>\n</ul>\n<h3 id=\"1-5-人工智能必备三要素\"><a href=\"#1-5-人工智能必备三要素\" class=\"headerlink\" title=\"1.5. 人工智能必备三要素\"></a>1.5. 人工智能必备三要素</h3><ul>\n<li>数据</li>\n<li>算法</li>\n<li>计算力</li>\n</ul>\n<h3 id=\"1-6-GPU、CPU\"><a href=\"#1-6-GPU、CPU\" class=\"headerlink\" title=\"1.6. GPU、CPU\"></a>1.6. GPU、CPU</h3><ul>\n<li>GPU – 计算密集型</li>\n<li>CPU  –  IO密集型</li>\n</ul>\n<h2 id=\"2-机器学习\"><a href=\"#2-机器学习\" class=\"headerlink\" title=\"2. 机器学习\"></a>2. 机器学习</h2><h3 id=\"2-1-工作流程\"><a href=\"#2-1-工作流程\" class=\"headerlink\" title=\"2.1. 工作流程\"></a>2.1. 工作流程</h3><ol>\n<li>数据获取</li>\n</ol>\n<p>数据类型构成</p>\n<ul>\n<li>特征值 + 目标值（目标值分为离散还是连续）</li>\n<li>仅有特征值，无目标值</li>\n</ul>\n<p>数据划分</p>\n<ul>\n<li>训练集 0.7~0.8</li>\n<li>测试集 0.2~0.3</li>\n</ul>\n<ol start=\"2\">\n<li>数据基本处理</li>\n</ol>\n<blockquote>\n<p>对数据进行缺失值、去除异常值等处理</p>\n</blockquote>\n<ol start=\"3\">\n<li>特征工程</li>\n</ol>\n<blockquote>\n<p>把数据转换为机器更容易识别的数据</p>\n<p>数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已</p>\n</blockquote>\n<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n<ol start=\"4\">\n<li>机器学习（模型训练）</li>\n</ol>\n<blockquote>\n<p>选择合适的算法对模型进行训练</p>\n</blockquote>\n<ol start=\"5\">\n<li>模型评估</li>\n</ol>\n<blockquote>\n<p>对训练好的模型进行评估</p>\n</blockquote>\n<h3 id=\"2-2-机器学习算法分类\"><a href=\"#2-2-机器学习算法分类\" class=\"headerlink\" title=\"2.2. 机器学习算法分类\"></a>2.2. 机器学习算法分类</h3><ul>\n<li>监督学习：有特征值，有目标值<ul>\n<li>目标值连续：回归</li>\n<li>目标值离散：分类</li>\n</ul>\n</li>\n<li>无监督学习：仅有特征值</li>\n<li>半监督学习：有特征值，但一部分数据有目标值 ，一部分没有</li>\n<li>强化学习：即自动进行决策，并可以做连续决策<ul>\n<li>动态过程，上一步的输出是下一步的输入</li>\n<li>四要素：agent, action, environment, reward</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-模型评估\"><a href=\"#2-3-模型评估\" class=\"headerlink\" title=\"2.3. 模型评估\"></a>2.3. 模型评估</h3><ul>\n<li><p>分类模型评估</p>\n<ul>\n<li>准确率：预测正确的数占样本总数的比例</li>\n<li>精确率：预测为正的数占全部预测为正的比例</li>\n<li>召回率： 预测为正占全部正样本的比例</li>\n<li>F1-score：主要用于评估模型的稳健性</li>\n<li>AUC指标：主要用于评估样本不均衡的情况</li>\n</ul>\n</li>\n<li><p>回归模型评估</p>\n<blockquote>\n<p>p &#x3D; predicted target</p>\n<p>a &#x3D; actual target</p>\n</blockquote>\n<ul>\n<li>均方根误差(Root Mean Squared Error, RMSE)</li>\n<li>相对平方误差(Relative Squared Error, RSE)</li>\n<li>平均绝对误差(Mean Absolute Error, MAE)</li>\n<li>相对绝对误差(Relative Absolute Error, RAE)</li>\n<li>决定系数(Coefficient of Determination)</li>\n</ul>\n</li>\n<li><p>拟合度（评估结果）</p>\n<ul>\n<li>欠拟合：学习到的特征太少（有两个眼睛的就是人）</li>\n<li>过拟合：学习到的特征太多（仅黄皮肤的才是人）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-机器学习环境配置\"><a href=\"#3-机器学习环境配置\" class=\"headerlink\" title=\"3. 机器学习环境配置\"></a>3. 机器学习环境配置</h2><h3 id=\"3-1-环境安装\"><a href=\"#3-1-环境安装\" class=\"headerlink\" title=\"3.1. 环境安装\"></a>3.1. 环境安装</h3><ul>\n<li>创建虚拟环境： <code>conda create --name=ai0 python=3.10</code></li>\n<li>安装相关包：<ul>\n<li>matplotlib&#x3D;&#x3D;2.2.2</li>\n<li>numpy&#x3D;&#x3D;1.14.2</li>\n<li>pandas&#x3D;&#x3D;0.20.3</li>\n<li>tables&#x3D;&#x3D;3.4.2</li>\n<li>jupyter&#x3D;1.0.0</li>\n</ul>\n</li>\n<li>先从cmd进入指定目录后执行<code>jupyter notebook</code></li>\n</ul>\n<h3 id=\"3-2-jupyter基操\"><a href=\"#3-2-jupyter基操\" class=\"headerlink\" title=\"3.2. jupyter基操\"></a>3.2. jupyter基操</h3><blockquote>\n<p>类似vim, 分不同的输入模式，命令也和vim基本相同</p>\n</blockquote>\n<ul>\n<li>两种模式通用快捷键<ul>\n<li><code>Shift + Enter</code>  执行本单元代码，跳转到下一单元</li>\n<li><code>Ctrl + Enter</code> 执行本单元代码，留在本单元</li>\n</ul>\n</li>\n<li><strong>命令模式</strong>：按 <code>ESC</code>  进入<ul>\n<li><code>Y</code>, cell 切换到Code模式</li>\n<li><code>M</code>, cell 切换到Markdown模式</li>\n<li><code>A</code>, 在当前cell上面添加cell</li>\n<li><code>B</code>, 在当前cell下面添加cell</li>\n<li><code>DD</code>, 删除当前cell</li>\n<li><code>Z</code>, 回退</li>\n<li><code>L</code>, 为当前cell加上行号&lt;!–</li>\n<li><code>Ctrl+Shift+P</code>, 对话框输入命令直接运行</li>\n<li><code>Ctrl+Home</code>, 跳转到首个cell</li>\n<li><code>Ctrl+End</code>, 跳转到末个cell</li>\n<li><code>Shift + M</code> 合并下面的cell</li>\n</ul>\n</li>\n<li><strong>编辑模式</strong>: 按 <code>Enter</code> 进入<ul>\n<li><code>Ctrl + 点击</code>, 多光标操作</li>\n<li><code>Ctrl + Z</code>, 回退</li>\n<li><code>Ctrl + Y</code>, 重做</li>\n<li><code>TAB</code>,  代码补全</li>\n<li><code>Ctrl + /</code> 注释&#x2F;取消注释</li>\n<li><code>代码后 + ;</code>  屏蔽输出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-Matplotlib\"><a href=\"#4-Matplotlib\" class=\"headerlink\" title=\"4. Matplotlib\"></a>4. Matplotlib</h2><blockquote>\n<p>用于开发2D、3D图表</p>\n<p>使用简单，以渐进、交互式实现数据可视化</p>\n</blockquote>\n<h3 id=\"4-1-三层结构\"><a href=\"#4-1-三层结构\" class=\"headerlink\" title=\"4.1. 三层结构\"></a>4.1. 三层结构</h3><ul>\n<li><strong>容器层</strong><ul>\n<li>Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具</li>\n<li>Figure: <code>Canvas</code>上第一层，充当画布角色 </li>\n<li>Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色<ul>\n<li>Axes: 坐标系，数据的绘图区域</li>\n<li>Axis: 坐标轴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>辅助显示层</strong>：为Axes内除了根据数据绘制出的图像以外的内容，主要包括<code>facecolor(Axes外观)</code>、<code>spines(边框线)</code>、<code>axis(坐标轴)</code> 、<code>axix lable(坐标轴名称)</code>、<code>tick(坐标轴刻度)</code>、<code>tick lable(坐标轴刻度标签)</code>、<code>gird(网格线)</code>、<code>legend(图例)</code>、<code>title(标题)</code>等</li>\n<li><strong>图像层</strong>：指<code>Axes</code>内通过 <code>plot</code>, <code>scatter</code>, <code>histogram</code>, <code>pie</code>等函数根据数据绘制出的图像。</li>\n</ul>\n<h3 id=\"4-2-折线图与基操\"><a href=\"#4-2-折线图与基操\" class=\"headerlink\" title=\"4.2. 折线图与基操\"></a>4.2. 折线图与基操</h3><blockquote>\n<p><code>help(plt.figure)</code> 查看命令帮助</p>\n<p>负号报错 plt.rcParams[“axes.unicode_minus”]&#x3D;False 加这句</p>\n<p>中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib&#x2F;mpl-data&#x2F;matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置</p>\n<p>报错<code>missing from current font</code>，加以下代码</p>\n<p><code>from pylab import mpl mpl.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;]</code></p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图像绘制</span></span><br><span class=\"line\">x = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]</span><br><span class=\"line\">y = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>, <span class=\"number\">8</span>)]</span><br><span class=\"line\">plt.plot(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 图像保存, 要放到show前</span></span><br><span class=\"line\">plt.savefig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>基操</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\">plt.plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">plt.plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">plt.xticks(x[::<span class=\"number\">5</span>], x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个坐标系图像显示</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个坐标系显示图像</span></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\"><span class=\"comment\"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">2</span>, figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_peking, color=&quot;r&quot;, label=&quot;北京&quot;, linestyle=&quot;dashed&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># plt.yticks(y_ticks[::5])</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(x[::5], x_ticks_labels[::5])</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\"><span class=\"comment\"># plt.grid(True, linestyle=&quot;-&quot;, alpha=1)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&quot;中午11：00到12：00温度变化&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\"><span class=\"comment\"># plt.legend(loc=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Numpy\"><a href=\"#5-Numpy\" class=\"headerlink\" title=\"5. Numpy\"></a>5. Numpy</h2><h3 id=\"5-1-基础\"><a href=\"#5-1-基础\" class=\"headerlink\" title=\"5.1. 基础\"></a>5.1. 基础</h3><p><strong>定义：</strong></p>\n<ul>\n<li>Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组</li>\n<li>Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多</li>\n<li>Numpy使用<code>ndarray</code>对象来处理多维数组，该对象是一个快速而灵活的大数据容器</li>\n</ul>\n<p><strong>优势：</strong></p>\n<ul>\n<li><p>内存块风格：<code>ndarray</code>在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快</p>\n<ul>\n<li>原因：<code>ndarray</code>中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以<code>ndarray</code>在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素</li>\n</ul>\n</li>\n<li><p>并行化运算：向量化运算</p>\n</li>\n<li><p>Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">score = np.array([random.sample(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>), <span class=\"number\">5</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)]) </span><br><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 效率对比</span></span><br><span class=\"line\">a = [random.random() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000_0000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %time 魔法方法，查看当前行代码运行耗时情况 </span></span><br><span class=\"line\"><span class=\"comment\"># cpu times CPU执行耗时, wall time 总耗时</span></span><br><span class=\"line\">%time sum1 = <span class=\"built_in\">sum</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = np.array(a)</span><br><span class=\"line\"></span><br><span class=\"line\">%time sum2 = np.<span class=\"built_in\">sum</span>(b)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 31.2 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 31.9 ms</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 15.6 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 9.97 ms</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用属性：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">score.shape  <span class=\"comment\"># (8, 5)</span></span><br><span class=\"line\">score.ndim  <span class=\"comment\"># 2  数组维度(也就是有几层[])</span></span><br><span class=\"line\">score.size  <span class=\"comment\"># 40</span></span><br><span class=\"line\">score.itemsize  <span class=\"comment\"># 4 每个元素占字节长度</span></span><br><span class=\"line\">score.dtype  <span class=\"comment\"># dtype(&#x27;int32&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置ndarray类型</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]], dtype=np.float32)</span><br><span class=\"line\">a.dtype  <span class=\"comment\"># dtype(&#x27;float32&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-1-生成数组\"><a href=\"#5-1-1-生成数组\" class=\"headerlink\" title=\"5.1.1.  生成数组\"></a>5.1.1.  生成数组</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0/1数组</span></span><br><span class=\"line\">np.ones([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从现有数组创建数组</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">a1 = np.array(a)  <span class=\"comment\"># 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a2 = np.asarray(a)  <span class=\"comment\"># 浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成固定范围数组</span></span><br><span class=\"line\">np.linespace(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">11</span>)  <span class=\"comment\"># 等间隔生成11个</span></span><br><span class=\"line\"><span class=\"comment\"># array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.aragne(<span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># 步长2来生成</span></span><br><span class=\"line\"><span class=\"comment\"># array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成随机数组</strong></p>\n<ul>\n<li><p>生成均匀分布：<code>np.random.uniform(low, high, size)</code></p>\n</li>\n<li><p>正态分布</p>\n<ul>\n<li>均值：平均值</li>\n<li>标准差：方差开根号</li>\n<li>生成标准正态分布：<code>np.random.normal(low, high, size)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 均匀分布</span></span><br><span class=\"line\">x = np.random.uniform(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">1000_0000</span>)  <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)  <span class=\"comment\"># 画布</span></span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)  <span class=\"comment\"># 绘制 x代表要使用的数据， bins表示要划分的区间数</span></span><br><span class=\"line\">plt.show()  <span class=\"comment\"># 显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正态分布</span></span><br><span class=\"line\">x = np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">1</span>, <span class=\"number\">1000_0000</span>)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-2-数组索引、切片\"><a href=\"#5-1-2-数组索引、切片\" class=\"headerlink\" title=\"5.1.2. 数组索引、切片\"></a>5.1.2. 数组索引、切片</h4><ul>\n<li>直接索引，先对行进行索引，再对列进行索引</li>\n<li>高维度索引，从宏观到微观</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))  <span class=\"comment\"># 8rows, 10cols</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># 前两行，前三列</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]], [[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]])</span><br><span class=\"line\">a[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 1</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 7</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 12</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-3-形状修改\"><a href=\"#5-1-3-形状修改\" class=\"headerlink\" title=\"5.1.3. 形状修改\"></a>5.1.3. 形状修改</h4><ul>\n<li><p><code>.reshape([rows, cols])</code> 不进行行列互换，产生新变量</p>\n</li>\n<li><p><code>.resize([rows, cols])</code> 进行行列互换，对原值 进行更改</p>\n</li>\n<li><p><code>.T</code> 行列互换</p>\n</li>\n</ul>\n<h4 id=\"5-1-4-类型修改\"><a href=\"#5-1-4-类型修改\" class=\"headerlink\" title=\"5.1.4. 类型修改\"></a>5.1.4. 类型修改</h4><ul>\n<li><p><code>.astype(np.int32)</code> </p>\n</li>\n<li><p><code>.tobytes()</code></p>\n</li>\n<li><p><code>np.unique(nparray)</code>  去重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">4</span> , <span class=\"number\">5</span>]])</span><br><span class=\"line\">np.unique(arr)</span><br><span class=\"line\"><span class=\"comment\"># array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-1-5-运算\"><a href=\"#5-1-5-运算\" class=\"headerlink\" title=\"5.1.5 运算\"></a>5.1.5 运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑运算</span></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">a &gt; <span class=\"number\">1</span>  <span class=\"comment\"># 全部数据进行此运算，结果赋值为 True/False</span></span><br><span class=\"line\">a[a &gt; <span class=\"number\">1</span>] = <span class=\"number\">2</span>  <span class=\"comment\"># 全部数据 &gt;1 赋值为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用判断函数,和python的all和any一样</span></span><br><span class=\"line\">b = a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 切为2行5列</span></span><br><span class=\"line\">np.<span class=\"built_in\">all</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\">np.<span class=\"built_in\">any</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三元运算</span></span><br><span class=\"line\">np.where(b &gt; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_and(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_or(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 统计运算</span></span><br><span class=\"line\"><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"built_in\">max</span></span><br><span class=\"line\">median</span><br><span class=\"line\">mean</span><br><span class=\"line\">std 标准差</span><br><span class=\"line\">var  方差</span><br><span class=\"line\">argmax  最大值下标</span><br><span class=\"line\">argmin  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-矩阵\"><a href=\"#5-2-矩阵\" class=\"headerlink\" title=\"5.2. 矩阵\"></a>5.2. 矩阵</h3><ul>\n<li>矩阵：二维数组<ul>\n<li>向量：一维数组</li>\n</ul>\n</li>\n<li>加法：对应位置相加</li>\n<li>标量乘法：标量和每个位置元素相乘</li>\n<li>矩阵乘法：[M行，N列] * [N行，L列] &#x3D; [M行，L列]<ul>\n<li>满足结合律，不满足交换律</li>\n</ul>\n</li>\n<li>单位矩阵：对角线为1，其他位置为0的矩阵</li>\n<li>逆：A * B &#x3D; 单位矩阵，A和B互为逆矩阵</li>\n<li>转置T：行列互换</li>\n</ul>\n<h3 id=\"5-3-数组间运算\"><a href=\"#5-3-数组间运算\" class=\"headerlink\" title=\"5.3. 数组间运算\"></a>5.3. 数组间运算</h3><ul>\n<li><p>数组和数字：可以直接运算</p>\n</li>\n<li><p>数组和数组：广播机制</p>\n<ul>\n<li>维度相同</li>\n<li>shape对应位置为1</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数组运算</span></span><br><span class=\"line\">arr1 = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]])  <span class=\"comment\"># 2，3</span></span><br><span class=\"line\">arr2 = np.array([[<span class=\"number\">2</span>], [<span class=\"number\">1</span>]])  <span class=\"comment\"># 2， 1  </span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1 + arr2  <span class=\"comment\"># 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">3</span>], [<span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">np.matmul(a, b)  <span class=\"comment\"># 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点乘</span></span><br><span class=\"line\">np.dot(<span class=\"number\">2</span>, b)  <span class=\"comment\"># array([[6], [4]])</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Pandas\"><a href=\"#6-Pandas\" class=\"headerlink\" title=\"6. Pandas\"></a>6. Pandas</h2><ul>\n<li>封装了Numpy 和 matplotlib</li>\n<li>便捷的数据处理，展示能力</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a_shape = pd.DataFrame(a).shape  <span class=\"comment\"># (10, 5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">row_index = [<span class=\"string\">f&quot;第<span class=\"subst\">&#123;i+<span class=\"number\">1</span>&#125;</span>行&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a_shape[<span class=\"number\">0</span>])]</span><br><span class=\"line\">column_name = pd.date_range(start=<span class=\"string\">&quot;20230713&quot;</span>, periods=a_shape[<span class=\"number\">1</span>], freq=<span class=\"string\">&quot;B&quot;</span>)  <span class=\"comment\"># freq:B 工作日 DatetimeIndex([&#x27;2023-07-13&#x27;, &#x27;2023-07-14&#x27;, &#x27;2023-07-17&#x27;, &#x27;2023-07-18&#x27;,&#x27;2023-07-19&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;B&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = pd.DataFrame(a, index=row_index, columns=column_name)  <span class=\"comment\"># 设置行索引, 列名</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.shape  <span class=\"comment\"># 形状</span></span><br><span class=\"line\">b.index  <span class=\"comment\"># 行索引</span></span><br><span class=\"line\">b.columns  <span class=\"comment\"># 列名</span></span><br><span class=\"line\">b.values  <span class=\"comment\"># array</span></span><br><span class=\"line\">b.T  <span class=\"comment\"># 转置</span></span><br><span class=\"line\">b.head()  <span class=\"comment\"># 前5行</span></span><br><span class=\"line\">b.tail()  <span class=\"comment\"># 后5行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重设索引</span></span><br><span class=\"line\">b.index = row_index</span><br><span class=\"line\">c = b.reset_index(drop=<span class=\"literal\">False</span>)  <span class=\"comment\"># 默认drop=False不删除原索引，增加index列 值为原索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置某列为索引，可设置多列</span></span><br><span class=\"line\">c.set_index(keys=[<span class=\"string\">&quot;index&quot;</span>])  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-K-近邻算法\"><a href=\"#7-K-近邻算法\" class=\"headerlink\" title=\"7. K-近邻算法\"></a>7. K-近邻算法</h2><blockquote>\n<p>根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)</p>\n<p>- </p>\n</blockquote>\n<h3 id=\"7-1-Scikit-learn\"><a href=\"#7-1-Scikit-learn\" class=\"headerlink\" title=\"7.1. Scikit-learn\"></a>7.1. Scikit-learn</h3><blockquote>\n<p>Classification  分类</p>\n<p>Regression  回归</p>\n<p>Clustering  聚类</p>\n<p>Dimensionality reduction 维度缩小</p>\n<p>Model selection  模型选择</p>\n<p>Preprocessing  特征预处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">x = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">0</span>], [<span class=\"number\">0</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># machine learning</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 实例化一个训练模型</span></span><br><span class=\"line\">estimator = KNeighborsClassifier(n_neighbors=<span class=\"number\">2</span>)  <span class=\"comment\"># 选定几个参考数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 调用fit方法进行训练</span></span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预测其他值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(estimator.predict([[-<span class=\"number\">1</span>]]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-距离度量\"><a href=\"#7-2-距离度量\" class=\"headerlink\" title=\"7.2. 距离度量\"></a>7.2. 距离度量</h3><p>欧式距离：差平方开根号</p>\n<p>曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)</p>\n<ul>\n<li>d &#x3D; |x1 - x2| + |y1 - y2|</li>\n</ul>\n<p>切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)</p>\n<p>闵可夫斯基距离(Minkowski Distance):<br>$$<br>d_{12} &#x3D; p\\sqrt{\\sum_{k&#x3D;1}^n|x_{1k} - x_{2k}|^p}<br>$$</p>\n<ul>\n<li>当p&#x3D;1, 为曼哈顿距离</li>\n<li>当p&#x3D;2，为欧氏距离</li>\n<li>当p$\\to\\infty$， 为切比雪夫距离</li>\n</ul>\n<p>标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)</p>\n<ul>\n<li>既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：</li>\n</ul>\n<p>$$<br>d_{12} &#x3D; \\sqrt{\\sum_{k&#x3D;1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}<br>$$</p>\n<p>余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异</p>\n<p>汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计</p>\n<p>杰卡德距离(Jaccard Distance): 通过交并集进行统计</p>\n<p>马氏距离(Mahalanobis Distance): 通过样本分布进行计算</p>\n<h3 id=\"7-3-K值选择\"><a href=\"#7-3-K值选择\" class=\"headerlink\" title=\"7.3. K值选择\"></a>7.3. K值选择</h3><p>过小：容易受到异常点的影响，容易过拟合</p>\n<p>过大：受到样本均衡的问题，容易欠拟合</p>\n<h3 id=\"7-4-KD树\"><a href=\"#7-4-KD树\" class=\"headerlink\" title=\"7.4. KD树\"></a>7.4. KD树</h3><h2 id=\"8-线性回归\"><a href=\"#8-线性回归\" class=\"headerlink\" title=\"8. 线性回归\"></a>8. 线性回归</h2><h2 id=\"9-逻辑回归\"><a href=\"#9-逻辑回归\" class=\"headerlink\" title=\"9. 逻辑回归\"></a>9. 逻辑回归</h2><h2 id=\"10-决策树算法\"><a href=\"#10-决策树算法\" class=\"headerlink\" title=\"10. 决策树算法\"></a>10. 决策树算法</h2><h2 id=\"11-集成学习\"><a href=\"#11-集成学习\" class=\"headerlink\" title=\"11. 集成学习\"></a>11. 集成学习</h2><h2 id=\"12-聚类算法\"><a href=\"#12-聚类算法\" class=\"headerlink\" title=\"12. 聚类算法\"></a>12. 聚类算法</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-AI从入门到放弃\"><a href=\"#Python-AI从入门到放弃\" class=\"headerlink\" title=\"Python AI从入门到放弃\"></a>Python AI从入门到放弃</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-人工智能起源\"><a href=\"#1-1-人工智能起源\" class=\"headerlink\" title=\"1.1. 人工智能起源\"></a>1.1. 人工智能起源</h3><ul>\n<li>图灵测试</li>\n<li>达特茅斯会议</li>\n</ul>\n<h3 id=\"1-2-人工智能三个阶段\"><a href=\"#1-2-人工智能三个阶段\" class=\"headerlink\" title=\"1.2. 人工智能三个阶段\"></a>1.2. 人工智能三个阶段</h3><ul>\n<li>1980年代是正式成形期</li>\n<li>1990-2010年代是蓬勃发展期</li>\n<li>2012年之后是深度学习期</li>\n</ul>\n<h3 id=\"1-3-人工智能、机器学习和深度学习\"><a href=\"#1-3-人工智能、机器学习和深度学习\" class=\"headerlink\" title=\"1.3. 人工智能、机器学习和深度学习\"></a>1.3. 人工智能、机器学习和深度学习</h3><ul>\n<li>机器学习是人工智能的一个实现途径</li>\n<li>深度学习是机器学习的一个方法发展而来</li>\n</ul>\n<h3 id=\"1-4-主要分支\"><a href=\"#1-4-主要分支\" class=\"headerlink\" title=\"1.4. 主要分支\"></a>1.4. 主要分支</h3><ul>\n<li>计算机视觉 CV<ul>\n<li>人脸识别</li>\n</ul>\n</li>\n<li>自然语言处理 NLP<ul>\n<li>语音识别</li>\n<li>语义识别</li>\n</ul>\n</li>\n<li>机器人</li>\n</ul>\n<h3 id=\"1-5-人工智能必备三要素\"><a href=\"#1-5-人工智能必备三要素\" class=\"headerlink\" title=\"1.5. 人工智能必备三要素\"></a>1.5. 人工智能必备三要素</h3><ul>\n<li>数据</li>\n<li>算法</li>\n<li>计算力</li>\n</ul>\n<h3 id=\"1-6-GPU、CPU\"><a href=\"#1-6-GPU、CPU\" class=\"headerlink\" title=\"1.6. GPU、CPU\"></a>1.6. GPU、CPU</h3><ul>\n<li>GPU – 计算密集型</li>\n<li>CPU  –  IO密集型</li>\n</ul>\n<h2 id=\"2-机器学习\"><a href=\"#2-机器学习\" class=\"headerlink\" title=\"2. 机器学习\"></a>2. 机器学习</h2><h3 id=\"2-1-工作流程\"><a href=\"#2-1-工作流程\" class=\"headerlink\" title=\"2.1. 工作流程\"></a>2.1. 工作流程</h3><ol>\n<li>数据获取</li>\n</ol>\n<p>数据类型构成</p>\n<ul>\n<li>特征值 + 目标值（目标值分为离散还是连续）</li>\n<li>仅有特征值，无目标值</li>\n</ul>\n<p>数据划分</p>\n<ul>\n<li>训练集 0.7~0.8</li>\n<li>测试集 0.2~0.3</li>\n</ul>\n<ol start=\"2\">\n<li>数据基本处理</li>\n</ol>\n<blockquote>\n<p>对数据进行缺失值、去除异常值等处理</p>\n</blockquote>\n<ol start=\"3\">\n<li>特征工程</li>\n</ol>\n<blockquote>\n<p>把数据转换为机器更容易识别的数据</p>\n<p>数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已</p>\n</blockquote>\n<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n<ol start=\"4\">\n<li>机器学习（模型训练）</li>\n</ol>\n<blockquote>\n<p>选择合适的算法对模型进行训练</p>\n</blockquote>\n<ol start=\"5\">\n<li>模型评估</li>\n</ol>\n<blockquote>\n<p>对训练好的模型进行评估</p>\n</blockquote>\n<h3 id=\"2-2-机器学习算法分类\"><a href=\"#2-2-机器学习算法分类\" class=\"headerlink\" title=\"2.2. 机器学习算法分类\"></a>2.2. 机器学习算法分类</h3><ul>\n<li>监督学习：有特征值，有目标值<ul>\n<li>目标值连续：回归</li>\n<li>目标值离散：分类</li>\n</ul>\n</li>\n<li>无监督学习：仅有特征值</li>\n<li>半监督学习：有特征值，但一部分数据有目标值 ，一部分没有</li>\n<li>强化学习：即自动进行决策，并可以做连续决策<ul>\n<li>动态过程，上一步的输出是下一步的输入</li>\n<li>四要素：agent, action, environment, reward</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-模型评估\"><a href=\"#2-3-模型评估\" class=\"headerlink\" title=\"2.3. 模型评估\"></a>2.3. 模型评估</h3><ul>\n<li><p>分类模型评估</p>\n<ul>\n<li>准确率：预测正确的数占样本总数的比例</li>\n<li>精确率：预测为正的数占全部预测为正的比例</li>\n<li>召回率： 预测为正占全部正样本的比例</li>\n<li>F1-score：主要用于评估模型的稳健性</li>\n<li>AUC指标：主要用于评估样本不均衡的情况</li>\n</ul>\n</li>\n<li><p>回归模型评估</p>\n<blockquote>\n<p>p &#x3D; predicted target</p>\n<p>a &#x3D; actual target</p>\n</blockquote>\n<ul>\n<li>均方根误差(Root Mean Squared Error, RMSE)</li>\n<li>相对平方误差(Relative Squared Error, RSE)</li>\n<li>平均绝对误差(Mean Absolute Error, MAE)</li>\n<li>相对绝对误差(Relative Absolute Error, RAE)</li>\n<li>决定系数(Coefficient of Determination)</li>\n</ul>\n</li>\n<li><p>拟合度（评估结果）</p>\n<ul>\n<li>欠拟合：学习到的特征太少（有两个眼睛的就是人）</li>\n<li>过拟合：学习到的特征太多（仅黄皮肤的才是人）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-机器学习环境配置\"><a href=\"#3-机器学习环境配置\" class=\"headerlink\" title=\"3. 机器学习环境配置\"></a>3. 机器学习环境配置</h2><h3 id=\"3-1-环境安装\"><a href=\"#3-1-环境安装\" class=\"headerlink\" title=\"3.1. 环境安装\"></a>3.1. 环境安装</h3><ul>\n<li>创建虚拟环境： <code>conda create --name=ai0 python=3.10</code></li>\n<li>安装相关包：<ul>\n<li>matplotlib&#x3D;&#x3D;2.2.2</li>\n<li>numpy&#x3D;&#x3D;1.14.2</li>\n<li>pandas&#x3D;&#x3D;0.20.3</li>\n<li>tables&#x3D;&#x3D;3.4.2</li>\n<li>jupyter&#x3D;1.0.0</li>\n</ul>\n</li>\n<li>先从cmd进入指定目录后执行<code>jupyter notebook</code></li>\n</ul>\n<h3 id=\"3-2-jupyter基操\"><a href=\"#3-2-jupyter基操\" class=\"headerlink\" title=\"3.2. jupyter基操\"></a>3.2. jupyter基操</h3><blockquote>\n<p>类似vim, 分不同的输入模式，命令也和vim基本相同</p>\n</blockquote>\n<ul>\n<li>两种模式通用快捷键<ul>\n<li><code>Shift + Enter</code>  执行本单元代码，跳转到下一单元</li>\n<li><code>Ctrl + Enter</code> 执行本单元代码，留在本单元</li>\n</ul>\n</li>\n<li><strong>命令模式</strong>：按 <code>ESC</code>  进入<ul>\n<li><code>Y</code>, cell 切换到Code模式</li>\n<li><code>M</code>, cell 切换到Markdown模式</li>\n<li><code>A</code>, 在当前cell上面添加cell</li>\n<li><code>B</code>, 在当前cell下面添加cell</li>\n<li><code>DD</code>, 删除当前cell</li>\n<li><code>Z</code>, 回退</li>\n<li><code>L</code>, 为当前cell加上行号&lt;!–</li>\n<li><code>Ctrl+Shift+P</code>, 对话框输入命令直接运行</li>\n<li><code>Ctrl+Home</code>, 跳转到首个cell</li>\n<li><code>Ctrl+End</code>, 跳转到末个cell</li>\n<li><code>Shift + M</code> 合并下面的cell</li>\n</ul>\n</li>\n<li><strong>编辑模式</strong>: 按 <code>Enter</code> 进入<ul>\n<li><code>Ctrl + 点击</code>, 多光标操作</li>\n<li><code>Ctrl + Z</code>, 回退</li>\n<li><code>Ctrl + Y</code>, 重做</li>\n<li><code>TAB</code>,  代码补全</li>\n<li><code>Ctrl + /</code> 注释&#x2F;取消注释</li>\n<li><code>代码后 + ;</code>  屏蔽输出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-Matplotlib\"><a href=\"#4-Matplotlib\" class=\"headerlink\" title=\"4. Matplotlib\"></a>4. Matplotlib</h2><blockquote>\n<p>用于开发2D、3D图表</p>\n<p>使用简单，以渐进、交互式实现数据可视化</p>\n</blockquote>\n<h3 id=\"4-1-三层结构\"><a href=\"#4-1-三层结构\" class=\"headerlink\" title=\"4.1. 三层结构\"></a>4.1. 三层结构</h3><ul>\n<li><strong>容器层</strong><ul>\n<li>Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具</li>\n<li>Figure: <code>Canvas</code>上第一层，充当画布角色 </li>\n<li>Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色<ul>\n<li>Axes: 坐标系，数据的绘图区域</li>\n<li>Axis: 坐标轴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>辅助显示层</strong>：为Axes内除了根据数据绘制出的图像以外的内容，主要包括<code>facecolor(Axes外观)</code>、<code>spines(边框线)</code>、<code>axis(坐标轴)</code> 、<code>axix lable(坐标轴名称)</code>、<code>tick(坐标轴刻度)</code>、<code>tick lable(坐标轴刻度标签)</code>、<code>gird(网格线)</code>、<code>legend(图例)</code>、<code>title(标题)</code>等</li>\n<li><strong>图像层</strong>：指<code>Axes</code>内通过 <code>plot</code>, <code>scatter</code>, <code>histogram</code>, <code>pie</code>等函数根据数据绘制出的图像。</li>\n</ul>\n<h3 id=\"4-2-折线图与基操\"><a href=\"#4-2-折线图与基操\" class=\"headerlink\" title=\"4.2. 折线图与基操\"></a>4.2. 折线图与基操</h3><blockquote>\n<p><code>help(plt.figure)</code> 查看命令帮助</p>\n<p>负号报错 plt.rcParams[“axes.unicode_minus”]&#x3D;False 加这句</p>\n<p>中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib&#x2F;mpl-data&#x2F;matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置</p>\n<p>报错<code>missing from current font</code>，加以下代码</p>\n<p><code>from pylab import mpl mpl.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;]</code></p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图像绘制</span></span><br><span class=\"line\">x = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]</span><br><span class=\"line\">y = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>, <span class=\"number\">8</span>)]</span><br><span class=\"line\">plt.plot(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 图像保存, 要放到show前</span></span><br><span class=\"line\">plt.savefig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>基操</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\">plt.plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">plt.plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">plt.xticks(x[::<span class=\"number\">5</span>], x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个坐标系图像显示</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个坐标系显示图像</span></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\"><span class=\"comment\"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">2</span>, figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_peking, color=&quot;r&quot;, label=&quot;北京&quot;, linestyle=&quot;dashed&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># plt.yticks(y_ticks[::5])</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(x[::5], x_ticks_labels[::5])</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\"><span class=\"comment\"># plt.grid(True, linestyle=&quot;-&quot;, alpha=1)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&quot;中午11：00到12：00温度变化&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\"><span class=\"comment\"># plt.legend(loc=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Numpy\"><a href=\"#5-Numpy\" class=\"headerlink\" title=\"5. Numpy\"></a>5. Numpy</h2><h3 id=\"5-1-基础\"><a href=\"#5-1-基础\" class=\"headerlink\" title=\"5.1. 基础\"></a>5.1. 基础</h3><p><strong>定义：</strong></p>\n<ul>\n<li>Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组</li>\n<li>Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多</li>\n<li>Numpy使用<code>ndarray</code>对象来处理多维数组，该对象是一个快速而灵活的大数据容器</li>\n</ul>\n<p><strong>优势：</strong></p>\n<ul>\n<li><p>内存块风格：<code>ndarray</code>在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快</p>\n<ul>\n<li>原因：<code>ndarray</code>中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以<code>ndarray</code>在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素</li>\n</ul>\n</li>\n<li><p>并行化运算：向量化运算</p>\n</li>\n<li><p>Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">score = np.array([random.sample(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>), <span class=\"number\">5</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)]) </span><br><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 效率对比</span></span><br><span class=\"line\">a = [random.random() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000_0000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %time 魔法方法，查看当前行代码运行耗时情况 </span></span><br><span class=\"line\"><span class=\"comment\"># cpu times CPU执行耗时, wall time 总耗时</span></span><br><span class=\"line\">%time sum1 = <span class=\"built_in\">sum</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = np.array(a)</span><br><span class=\"line\"></span><br><span class=\"line\">%time sum2 = np.<span class=\"built_in\">sum</span>(b)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 31.2 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 31.9 ms</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 15.6 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 9.97 ms</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用属性：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">score.shape  <span class=\"comment\"># (8, 5)</span></span><br><span class=\"line\">score.ndim  <span class=\"comment\"># 2  数组维度(也就是有几层[])</span></span><br><span class=\"line\">score.size  <span class=\"comment\"># 40</span></span><br><span class=\"line\">score.itemsize  <span class=\"comment\"># 4 每个元素占字节长度</span></span><br><span class=\"line\">score.dtype  <span class=\"comment\"># dtype(&#x27;int32&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置ndarray类型</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]], dtype=np.float32)</span><br><span class=\"line\">a.dtype  <span class=\"comment\"># dtype(&#x27;float32&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-1-生成数组\"><a href=\"#5-1-1-生成数组\" class=\"headerlink\" title=\"5.1.1.  生成数组\"></a>5.1.1.  生成数组</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0/1数组</span></span><br><span class=\"line\">np.ones([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从现有数组创建数组</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">a1 = np.array(a)  <span class=\"comment\"># 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a2 = np.asarray(a)  <span class=\"comment\"># 浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成固定范围数组</span></span><br><span class=\"line\">np.linespace(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">11</span>)  <span class=\"comment\"># 等间隔生成11个</span></span><br><span class=\"line\"><span class=\"comment\"># array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.aragne(<span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># 步长2来生成</span></span><br><span class=\"line\"><span class=\"comment\"># array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成随机数组</strong></p>\n<ul>\n<li><p>生成均匀分布：<code>np.random.uniform(low, high, size)</code></p>\n</li>\n<li><p>正态分布</p>\n<ul>\n<li>均值：平均值</li>\n<li>标准差：方差开根号</li>\n<li>生成标准正态分布：<code>np.random.normal(low, high, size)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 均匀分布</span></span><br><span class=\"line\">x = np.random.uniform(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">1000_0000</span>)  <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)  <span class=\"comment\"># 画布</span></span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)  <span class=\"comment\"># 绘制 x代表要使用的数据， bins表示要划分的区间数</span></span><br><span class=\"line\">plt.show()  <span class=\"comment\"># 显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正态分布</span></span><br><span class=\"line\">x = np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">1</span>, <span class=\"number\">1000_0000</span>)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-2-数组索引、切片\"><a href=\"#5-1-2-数组索引、切片\" class=\"headerlink\" title=\"5.1.2. 数组索引、切片\"></a>5.1.2. 数组索引、切片</h4><ul>\n<li>直接索引，先对行进行索引，再对列进行索引</li>\n<li>高维度索引，从宏观到微观</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))  <span class=\"comment\"># 8rows, 10cols</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># 前两行，前三列</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]], [[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]])</span><br><span class=\"line\">a[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 1</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 7</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 12</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-3-形状修改\"><a href=\"#5-1-3-形状修改\" class=\"headerlink\" title=\"5.1.3. 形状修改\"></a>5.1.3. 形状修改</h4><ul>\n<li><p><code>.reshape([rows, cols])</code> 不进行行列互换，产生新变量</p>\n</li>\n<li><p><code>.resize([rows, cols])</code> 进行行列互换，对原值 进行更改</p>\n</li>\n<li><p><code>.T</code> 行列互换</p>\n</li>\n</ul>\n<h4 id=\"5-1-4-类型修改\"><a href=\"#5-1-4-类型修改\" class=\"headerlink\" title=\"5.1.4. 类型修改\"></a>5.1.4. 类型修改</h4><ul>\n<li><p><code>.astype(np.int32)</code> </p>\n</li>\n<li><p><code>.tobytes()</code></p>\n</li>\n<li><p><code>np.unique(nparray)</code>  去重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">4</span> , <span class=\"number\">5</span>]])</span><br><span class=\"line\">np.unique(arr)</span><br><span class=\"line\"><span class=\"comment\"># array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-1-5-运算\"><a href=\"#5-1-5-运算\" class=\"headerlink\" title=\"5.1.5 运算\"></a>5.1.5 运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑运算</span></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">a &gt; <span class=\"number\">1</span>  <span class=\"comment\"># 全部数据进行此运算，结果赋值为 True/False</span></span><br><span class=\"line\">a[a &gt; <span class=\"number\">1</span>] = <span class=\"number\">2</span>  <span class=\"comment\"># 全部数据 &gt;1 赋值为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用判断函数,和python的all和any一样</span></span><br><span class=\"line\">b = a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 切为2行5列</span></span><br><span class=\"line\">np.<span class=\"built_in\">all</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\">np.<span class=\"built_in\">any</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三元运算</span></span><br><span class=\"line\">np.where(b &gt; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_and(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_or(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 统计运算</span></span><br><span class=\"line\"><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"built_in\">max</span></span><br><span class=\"line\">median</span><br><span class=\"line\">mean</span><br><span class=\"line\">std 标准差</span><br><span class=\"line\">var  方差</span><br><span class=\"line\">argmax  最大值下标</span><br><span class=\"line\">argmin  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-矩阵\"><a href=\"#5-2-矩阵\" class=\"headerlink\" title=\"5.2. 矩阵\"></a>5.2. 矩阵</h3><ul>\n<li>矩阵：二维数组<ul>\n<li>向量：一维数组</li>\n</ul>\n</li>\n<li>加法：对应位置相加</li>\n<li>标量乘法：标量和每个位置元素相乘</li>\n<li>矩阵乘法：[M行，N列] * [N行，L列] &#x3D; [M行，L列]<ul>\n<li>满足结合律，不满足交换律</li>\n</ul>\n</li>\n<li>单位矩阵：对角线为1，其他位置为0的矩阵</li>\n<li>逆：A * B &#x3D; 单位矩阵，A和B互为逆矩阵</li>\n<li>转置T：行列互换</li>\n</ul>\n<h3 id=\"5-3-数组间运算\"><a href=\"#5-3-数组间运算\" class=\"headerlink\" title=\"5.3. 数组间运算\"></a>5.3. 数组间运算</h3><ul>\n<li><p>数组和数字：可以直接运算</p>\n</li>\n<li><p>数组和数组：广播机制</p>\n<ul>\n<li>维度相同</li>\n<li>shape对应位置为1</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数组运算</span></span><br><span class=\"line\">arr1 = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]])  <span class=\"comment\"># 2，3</span></span><br><span class=\"line\">arr2 = np.array([[<span class=\"number\">2</span>], [<span class=\"number\">1</span>]])  <span class=\"comment\"># 2， 1  </span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1 + arr2  <span class=\"comment\"># 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">3</span>], [<span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">np.matmul(a, b)  <span class=\"comment\"># 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点乘</span></span><br><span class=\"line\">np.dot(<span class=\"number\">2</span>, b)  <span class=\"comment\"># array([[6], [4]])</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Pandas\"><a href=\"#6-Pandas\" class=\"headerlink\" title=\"6. Pandas\"></a>6. Pandas</h2><ul>\n<li>封装了Numpy 和 matplotlib</li>\n<li>便捷的数据处理，展示能力</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a_shape = pd.DataFrame(a).shape  <span class=\"comment\"># (10, 5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">row_index = [<span class=\"string\">f&quot;第<span class=\"subst\">&#123;i+<span class=\"number\">1</span>&#125;</span>行&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a_shape[<span class=\"number\">0</span>])]</span><br><span class=\"line\">column_name = pd.date_range(start=<span class=\"string\">&quot;20230713&quot;</span>, periods=a_shape[<span class=\"number\">1</span>], freq=<span class=\"string\">&quot;B&quot;</span>)  <span class=\"comment\"># freq:B 工作日 DatetimeIndex([&#x27;2023-07-13&#x27;, &#x27;2023-07-14&#x27;, &#x27;2023-07-17&#x27;, &#x27;2023-07-18&#x27;,&#x27;2023-07-19&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;B&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = pd.DataFrame(a, index=row_index, columns=column_name)  <span class=\"comment\"># 设置行索引, 列名</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.shape  <span class=\"comment\"># 形状</span></span><br><span class=\"line\">b.index  <span class=\"comment\"># 行索引</span></span><br><span class=\"line\">b.columns  <span class=\"comment\"># 列名</span></span><br><span class=\"line\">b.values  <span class=\"comment\"># array</span></span><br><span class=\"line\">b.T  <span class=\"comment\"># 转置</span></span><br><span class=\"line\">b.head()  <span class=\"comment\"># 前5行</span></span><br><span class=\"line\">b.tail()  <span class=\"comment\"># 后5行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重设索引</span></span><br><span class=\"line\">b.index = row_index</span><br><span class=\"line\">c = b.reset_index(drop=<span class=\"literal\">False</span>)  <span class=\"comment\"># 默认drop=False不删除原索引，增加index列 值为原索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置某列为索引，可设置多列</span></span><br><span class=\"line\">c.set_index(keys=[<span class=\"string\">&quot;index&quot;</span>])  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-K-近邻算法\"><a href=\"#7-K-近邻算法\" class=\"headerlink\" title=\"7. K-近邻算法\"></a>7. K-近邻算法</h2><blockquote>\n<p>根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)</p>\n<p>- </p>\n</blockquote>\n<h3 id=\"7-1-Scikit-learn\"><a href=\"#7-1-Scikit-learn\" class=\"headerlink\" title=\"7.1. Scikit-learn\"></a>7.1. Scikit-learn</h3><blockquote>\n<p>Classification  分类</p>\n<p>Regression  回归</p>\n<p>Clustering  聚类</p>\n<p>Dimensionality reduction 维度缩小</p>\n<p>Model selection  模型选择</p>\n<p>Preprocessing  特征预处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">x = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">0</span>], [<span class=\"number\">0</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># machine learning</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 实例化一个训练模型</span></span><br><span class=\"line\">estimator = KNeighborsClassifier(n_neighbors=<span class=\"number\">2</span>)  <span class=\"comment\"># 选定几个参考数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 调用fit方法进行训练</span></span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预测其他值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(estimator.predict([[-<span class=\"number\">1</span>]]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-距离度量\"><a href=\"#7-2-距离度量\" class=\"headerlink\" title=\"7.2. 距离度量\"></a>7.2. 距离度量</h3><p>欧式距离：差平方开根号</p>\n<p>曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)</p>\n<ul>\n<li>d &#x3D; |x1 - x2| + |y1 - y2|</li>\n</ul>\n<p>切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)</p>\n<p>闵可夫斯基距离(Minkowski Distance):<br>$$<br>d_{12} &#x3D; p\\sqrt{\\sum_{k&#x3D;1}^n|x_{1k} - x_{2k}|^p}<br>$$</p>\n<ul>\n<li>当p&#x3D;1, 为曼哈顿距离</li>\n<li>当p&#x3D;2，为欧氏距离</li>\n<li>当p$\\to\\infty$， 为切比雪夫距离</li>\n</ul>\n<p>标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)</p>\n<ul>\n<li>既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：</li>\n</ul>\n<p>$$<br>d_{12} &#x3D; \\sqrt{\\sum_{k&#x3D;1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}<br>$$</p>\n<p>余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异</p>\n<p>汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计</p>\n<p>杰卡德距离(Jaccard Distance): 通过交并集进行统计</p>\n<p>马氏距离(Mahalanobis Distance): 通过样本分布进行计算</p>\n<h3 id=\"7-3-K值选择\"><a href=\"#7-3-K值选择\" class=\"headerlink\" title=\"7.3. K值选择\"></a>7.3. K值选择</h3><p>过小：容易受到异常点的影响，容易过拟合</p>\n<p>过大：受到样本均衡的问题，容易欠拟合</p>\n<h3 id=\"7-4-KD树\"><a href=\"#7-4-KD树\" class=\"headerlink\" title=\"7.4. KD树\"></a>7.4. KD树</h3><h2 id=\"8-线性回归\"><a href=\"#8-线性回归\" class=\"headerlink\" title=\"8. 线性回归\"></a>8. 线性回归</h2><h2 id=\"9-逻辑回归\"><a href=\"#9-逻辑回归\" class=\"headerlink\" title=\"9. 逻辑回归\"></a>9. 逻辑回归</h2><h2 id=\"10-决策树算法\"><a href=\"#10-决策树算法\" class=\"headerlink\" title=\"10. 决策树算法\"></a>10. 决策树算法</h2><h2 id=\"11-集成学习\"><a href=\"#11-集成学习\" class=\"headerlink\" title=\"11. 集成学习\"></a>11. 集成学习</h2><h2 id=\"12-聚类算法\"><a href=\"#12-聚类算法\" class=\"headerlink\" title=\"12. 聚类算法\"></a>12. 聚类算法</h2>"},{"title":"源码安装mysql","date":"2021-07-26T02:46:45.000Z","_content":"\n# 源码安装Mysql\n\n> 系统: CentOS 8\n\n## 1. 下载\n\n**官网找指定版本下载源码包**   \n\n>  https://downloads.mysql.com/archives/community/\n\n```shell\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.34.tar.gz\n```\n\n\n\n## 2. 解压编译\n\n```shell\n\n# 解压\ntar -zvxf mysql-boost-5.7.34.tar.gz\ncd mysql-5.7.34\n\n# 安装cmake\nyum install cmake\n\n# 编译\ncmake .\n\n```\n\n编译时命令 `cmake .` 报错汇总\n\n```shell\n# 报错: undefined symbol: archive_write_add_filter_zstd\nyum install libarchive\n\n# 报错: No CMAKE_CXX_COMPILER could be found.\nyum install gcc-c++\n\n# 报错: CMake Error at cmake/boost.cmake:88, 根据提示命令增加额外安装boost目录\n# (也可自行下载安装Boost C++ 下载地址: https://sourceforge.net/projects/boost/files/boost/)\n# 注意 只能是1.59.0版本的boost\nmkdir -p /usr/local/boost\n\ncmake -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost .\n# 或\ncd /usr/local/boost\nwget https://udomain.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz\ntar -zvxf boost_1_59_0.tar.gz\ncmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost/boost_1_59_0\n\n# 报错: CMake Error at cmake/ssl.cmake:63 (MESSAGE): Please install the appropriate openssl developer package\ngg\n\n\n```\n\n\n\n# 二进制安装\n\n## 1. 下载\n\n> https://downloads.mysql.com/archives/community/\n>\n> Operating System: Linux-Generic\n>\n> OS Version: Linux-Generic(glibc 2.12) (x86, 64-bit)\n\n```shell\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\n```\n\n\n\n## 2. 安装\n\n> 先查看下系统磁盘绑定情况, 再决定mysql data目录\n>\n> 命令: df -h\n\n### 2.1. 创建用户, 用户组, 数据目录\n\n```shell\ngroupadd mysql\nuseradd -g mysql -d /home/mysql mysql\nmkdir /home/mysql/data\n```\n\n### 2.2. 下载, 解压\n\n```shell\ncd /home/mysql\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\ntar -zvxf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\n```\n\n### 2.3. 配置启动\n\n```shell \n# 初始化配置\n./mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize\n\n# 修改basedir, datadir\nvim support-files/mysql.server\n--------------------------\n...\nbasedir=/home/mysql\ndatadir=/home/mysql/data\n...\n--------------------------\n\n# 创建软链接使命令可全局使用\nln -s /home/mysql/bin/mysql /usr/bin/mysql\n\n# 创建配置文件\nvi /etc/my.cnf\n--------------------------\n...\n[mysqld]\n\nbasedir = /home/mysql\ndatadir = /home/mysql/data\n\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect = 'SET NAMES utf8mb4'\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[client]\ndefault-character-set=utf8mb4\n...\n--------------------------\n\n# 添加开机启动\ncp /home/mysql/support-files/mysql.server /etc/init.d/mysqld\n\n# 增加可执行权限\nchmod 755 /etc/init.d/mysqld\n\n# 查看开机启动列表是否有mysqld, 没有就根据提示添加\nchkconfig --list mysqld\nchkconfig --add mysqld \n\n# 启动mysql\n./support-files/mysql.server start\n\n# 首次进入mysql 并修改root密码\nmysql -uroot -p\n> alter user user() identified by \"修改的密码\";\n\n# 查看默认编码集\nshow variables where variable_name like '%char%' or variable_name like 'collation%';\n+--------------------------+-----------------------------+\n| Variable_name            | Value                       |\n+--------------------------+-----------------------------+\n| character_set_client     | utf8mb4                     |\n| character_set_connection | utf8mb4                     |\n| character_set_database   | utf8mb4                     |\n| character_set_filesystem | binary                      |\n| character_set_results    | utf8mb4                     |\n| character_set_server     | utf8mb4                     |\n| character_set_system     | utf8                        |\n| character_sets_dir       | /home/mysql/share/charsets/ |\n| collation_connection     | utf8mb4_unicode_ci          |\n| collation_database       | utf8mb4_unicode_ci          |\n| collation_server         | utf8mb4_unicode_ci          |\n+--------------------------+-----------------------------+\n\n# systemctl 显示mysqld退出但实际没退出时\nsystemctl daemon-reload\n```\n\n<font color=\"red\">启动mysql可能出现的错误:</font>\n\n```shell\n# error while loading shared libraries: libncurses.so.5 \n# error while loading shared libraries: libtinfo.so.5\n# 提示缺少依赖libncurses.so.5 和 libtinfo.so.5\n# 但在 /usr/lib64 目录下是有 libtinfo.so.6.1 和 libncurses.so.6.1包的\n# 所以只需创建个软链接让mysql启动时去找到 *.5的包但实际是调用 *.6.1的包即可\n\nsudo ln -s /usr/lib64/libncurses.so.6.1 /usr/lib64/libncurses.so.5\nsudo ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/源码安装mysql.md","raw":"---\ntitle: 源码安装mysql\ndate: 2021-07-26 10:46:45\ntags:\n---\n\n# 源码安装Mysql\n\n> 系统: CentOS 8\n\n## 1. 下载\n\n**官网找指定版本下载源码包**   \n\n>  https://downloads.mysql.com/archives/community/\n\n```shell\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.34.tar.gz\n```\n\n\n\n## 2. 解压编译\n\n```shell\n\n# 解压\ntar -zvxf mysql-boost-5.7.34.tar.gz\ncd mysql-5.7.34\n\n# 安装cmake\nyum install cmake\n\n# 编译\ncmake .\n\n```\n\n编译时命令 `cmake .` 报错汇总\n\n```shell\n# 报错: undefined symbol: archive_write_add_filter_zstd\nyum install libarchive\n\n# 报错: No CMAKE_CXX_COMPILER could be found.\nyum install gcc-c++\n\n# 报错: CMake Error at cmake/boost.cmake:88, 根据提示命令增加额外安装boost目录\n# (也可自行下载安装Boost C++ 下载地址: https://sourceforge.net/projects/boost/files/boost/)\n# 注意 只能是1.59.0版本的boost\nmkdir -p /usr/local/boost\n\ncmake -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost .\n# 或\ncd /usr/local/boost\nwget https://udomain.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz\ntar -zvxf boost_1_59_0.tar.gz\ncmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost/boost_1_59_0\n\n# 报错: CMake Error at cmake/ssl.cmake:63 (MESSAGE): Please install the appropriate openssl developer package\ngg\n\n\n```\n\n\n\n# 二进制安装\n\n## 1. 下载\n\n> https://downloads.mysql.com/archives/community/\n>\n> Operating System: Linux-Generic\n>\n> OS Version: Linux-Generic(glibc 2.12) (x86, 64-bit)\n\n```shell\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\n```\n\n\n\n## 2. 安装\n\n> 先查看下系统磁盘绑定情况, 再决定mysql data目录\n>\n> 命令: df -h\n\n### 2.1. 创建用户, 用户组, 数据目录\n\n```shell\ngroupadd mysql\nuseradd -g mysql -d /home/mysql mysql\nmkdir /home/mysql/data\n```\n\n### 2.2. 下载, 解压\n\n```shell\ncd /home/mysql\nwget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\ntar -zvxf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz\n```\n\n### 2.3. 配置启动\n\n```shell \n# 初始化配置\n./mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize\n\n# 修改basedir, datadir\nvim support-files/mysql.server\n--------------------------\n...\nbasedir=/home/mysql\ndatadir=/home/mysql/data\n...\n--------------------------\n\n# 创建软链接使命令可全局使用\nln -s /home/mysql/bin/mysql /usr/bin/mysql\n\n# 创建配置文件\nvi /etc/my.cnf\n--------------------------\n...\n[mysqld]\n\nbasedir = /home/mysql\ndatadir = /home/mysql/data\n\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect = 'SET NAMES utf8mb4'\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[client]\ndefault-character-set=utf8mb4\n...\n--------------------------\n\n# 添加开机启动\ncp /home/mysql/support-files/mysql.server /etc/init.d/mysqld\n\n# 增加可执行权限\nchmod 755 /etc/init.d/mysqld\n\n# 查看开机启动列表是否有mysqld, 没有就根据提示添加\nchkconfig --list mysqld\nchkconfig --add mysqld \n\n# 启动mysql\n./support-files/mysql.server start\n\n# 首次进入mysql 并修改root密码\nmysql -uroot -p\n> alter user user() identified by \"修改的密码\";\n\n# 查看默认编码集\nshow variables where variable_name like '%char%' or variable_name like 'collation%';\n+--------------------------+-----------------------------+\n| Variable_name            | Value                       |\n+--------------------------+-----------------------------+\n| character_set_client     | utf8mb4                     |\n| character_set_connection | utf8mb4                     |\n| character_set_database   | utf8mb4                     |\n| character_set_filesystem | binary                      |\n| character_set_results    | utf8mb4                     |\n| character_set_server     | utf8mb4                     |\n| character_set_system     | utf8                        |\n| character_sets_dir       | /home/mysql/share/charsets/ |\n| collation_connection     | utf8mb4_unicode_ci          |\n| collation_database       | utf8mb4_unicode_ci          |\n| collation_server         | utf8mb4_unicode_ci          |\n+--------------------------+-----------------------------+\n\n# systemctl 显示mysqld退出但实际没退出时\nsystemctl daemon-reload\n```\n\n<font color=\"red\">启动mysql可能出现的错误:</font>\n\n```shell\n# error while loading shared libraries: libncurses.so.5 \n# error while loading shared libraries: libtinfo.so.5\n# 提示缺少依赖libncurses.so.5 和 libtinfo.so.5\n# 但在 /usr/lib64 目录下是有 libtinfo.so.6.1 和 libncurses.so.6.1包的\n# 所以只需创建个软链接让mysql启动时去找到 *.5的包但实际是调用 *.6.1的包即可\n\nsudo ln -s /usr/lib64/libncurses.so.6.1 /usr/lib64/libncurses.so.5\nsudo ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"源码安装mysql","published":1,"updated":"2021-08-21T02:52:54.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegce000visuh446t9jr3","content":"<h1 id=\"源码安装Mysql\"><a href=\"#源码安装Mysql\" class=\"headerlink\" title=\"源码安装Mysql\"></a>源码安装Mysql</h1><blockquote>\n<p>系统: CentOS 8</p>\n</blockquote>\n<h2 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h2><p><strong>官网找指定版本下载源码包</strong>   </p>\n<blockquote>\n<p> <a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.34.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-解压编译\"><a href=\"#2-解压编译\" class=\"headerlink\" title=\"2. 解压编译\"></a>2. 解压编译</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zvxf mysql-boost-5.7.34.tar.gz</span><br><span class=\"line\">cd mysql-5.7.34</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装cmake</span></span><br><span class=\"line\">yum install cmake</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">cmake .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编译时命令 <code>cmake .</code> 报错汇总</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: undefined symbol: archive_write_add_filter_zstd</span></span><br><span class=\"line\">yum install libarchive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: No CMAKE_CXX_COMPILER could be found.</span></span><br><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: CMake Error at cmake/boost.cmake:88, 根据提示命令增加额外安装boost目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">(也可自行下载安装Boost C++ 下载地址: https://sourceforge.net/projects/boost/files/boost/)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意 只能是1.59.0版本的boost</span></span><br><span class=\"line\">mkdir -p /usr/local/boost</span><br><span class=\"line\"></span><br><span class=\"line\">cmake -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">cd /usr/local/boost</span><br><span class=\"line\">wget https://udomain.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">tar -zvxf boost_1_59_0.tar.gz</span><br><span class=\"line\">cmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost/boost_1_59_0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: CMake Error at cmake/ssl.cmake:63 (MESSAGE): Please install the appropriate openssl developer package</span></span><br><span class=\"line\">gg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"二进制安装\"><a href=\"#二进制安装\" class=\"headerlink\" title=\"二进制安装\"></a>二进制安装</h1><h2 id=\"1-下载-1\"><a href=\"#1-下载-1\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h2><blockquote>\n<p><a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>Operating System: Linux-Generic</p>\n<p>OS Version: Linux-Generic(glibc 2.12) (x86, 64-bit)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><blockquote>\n<p>先查看下系统磁盘绑定情况, 再决定mysql data目录</p>\n<p>命令: df -h</p>\n</blockquote>\n<h3 id=\"2-1-创建用户-用户组-数据目录\"><a href=\"#2-1-创建用户-用户组-数据目录\" class=\"headerlink\" title=\"2.1. 创建用户, 用户组, 数据目录\"></a>2.1. 创建用户, 用户组, 数据目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql -d /home/mysql mysql</span><br><span class=\"line\">mkdir /home/mysql/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-下载-解压\"><a href=\"#2-2-下载-解压\" class=\"headerlink\" title=\"2.2. 下载, 解压\"></a>2.2. 下载, 解压</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/mysql</span><br><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\">tar -zvxf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-配置启动\"><a href=\"#2-3-配置启动\" class=\"headerlink\" title=\"2.3. 配置启动\"></a>2.3. 配置启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化配置</span></span><br><span class=\"line\">./mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改basedir, datadir</span></span><br><span class=\"line\">vim support-files/mysql.server</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\">basedir=/home/mysql</span><br><span class=\"line\">datadir=/home/mysql/data</span><br><span class=\"line\">...</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软链接使命令可全局使用</span></span><br><span class=\"line\">ln -s /home/mysql/bin/mysql /usr/bin/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">basedir = /home/mysql</span><br><span class=\"line\">datadir = /home/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">character-set-client-handshake = FALSE</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci</span><br><span class=\"line\">init_connect = &#x27;SET NAMES utf8mb4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">...</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加开机启动</span></span><br><span class=\"line\">cp /home/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加可执行权限</span></span><br><span class=\"line\">chmod 755 /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看开机启动列表是否有mysqld, 没有就根据提示添加</span></span><br><span class=\"line\">chkconfig --list mysqld</span><br><span class=\"line\">chkconfig --add mysqld </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动mysql</span></span><br><span class=\"line\">./support-files/mysql.server start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首次进入mysql 并修改root密码</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">alter user user() identified by <span class=\"string\">&quot;修改的密码&quot;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认编码集</span></span><br><span class=\"line\">show variables where variable_name like &#x27;%char%&#x27; or variable_name like &#x27;collation%&#x27;;</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                       |</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb4                     |</span><br><span class=\"line\">| character_set_connection | utf8mb4                     |</span><br><span class=\"line\">| character_set_database   | utf8mb4                     |</span><br><span class=\"line\">| character_set_filesystem | binary                      |</span><br><span class=\"line\">| character_set_results    | utf8mb4                     |</span><br><span class=\"line\">| character_set_server     | utf8mb4                     |</span><br><span class=\"line\">| character_set_system     | utf8                        |</span><br><span class=\"line\">| character_sets_dir       | /home/mysql/share/charsets/ |</span><br><span class=\"line\">| collation_connection     | utf8mb4_unicode_ci          |</span><br><span class=\"line\">| collation_database       | utf8mb4_unicode_ci          |</span><br><span class=\"line\">| collation_server         | utf8mb4_unicode_ci          |</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl 显示mysqld退出但实际没退出时</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">启动mysql可能出现的错误:</font></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">error <span class=\"keyword\">while</span> loading shared libraries: libncurses.so.5</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">error <span class=\"keyword\">while</span> loading shared libraries: libtinfo.so.5</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提示缺少依赖libncurses.so.5 和 libtinfo.so.5</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但在 /usr/lib64 目录下是有 libtinfo.so.6.1 和 libncurses.so.6.1包的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所以只需创建个软链接让mysql启动时去找到 *.5的包但实际是调用 *.6.1的包即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/lib64/libncurses.so.6.1 /usr/lib64/libncurses.so.5</span><br><span class=\"line\">sudo ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"源码安装Mysql\"><a href=\"#源码安装Mysql\" class=\"headerlink\" title=\"源码安装Mysql\"></a>源码安装Mysql</h1><blockquote>\n<p>系统: CentOS 8</p>\n</blockquote>\n<h2 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h2><p><strong>官网找指定版本下载源码包</strong>   </p>\n<blockquote>\n<p> <a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.34.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-解压编译\"><a href=\"#2-解压编译\" class=\"headerlink\" title=\"2. 解压编译\"></a>2. 解压编译</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压</span></span><br><span class=\"line\">tar -zvxf mysql-boost-5.7.34.tar.gz</span><br><span class=\"line\">cd mysql-5.7.34</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装cmake</span></span><br><span class=\"line\">yum install cmake</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">cmake .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编译时命令 <code>cmake .</code> 报错汇总</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: undefined symbol: archive_write_add_filter_zstd</span></span><br><span class=\"line\">yum install libarchive</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: No CMAKE_CXX_COMPILER could be found.</span></span><br><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: CMake Error at cmake/boost.cmake:88, 根据提示命令增加额外安装boost目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">(也可自行下载安装Boost C++ 下载地址: https://sourceforge.net/projects/boost/files/boost/)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意 只能是1.59.0版本的boost</span></span><br><span class=\"line\">mkdir -p /usr/local/boost</span><br><span class=\"line\"></span><br><span class=\"line\">cmake -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">cd /usr/local/boost</span><br><span class=\"line\">wget https://udomain.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">tar -zvxf boost_1_59_0.tar.gz</span><br><span class=\"line\">cmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost/boost_1_59_0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">报错: CMake Error at cmake/ssl.cmake:63 (MESSAGE): Please install the appropriate openssl developer package</span></span><br><span class=\"line\">gg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"二进制安装\"><a href=\"#二进制安装\" class=\"headerlink\" title=\"二进制安装\"></a>二进制安装</h1><h2 id=\"1-下载-1\"><a href=\"#1-下载-1\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h2><blockquote>\n<p><a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>Operating System: Linux-Generic</p>\n<p>OS Version: Linux-Generic(glibc 2.12) (x86, 64-bit)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><blockquote>\n<p>先查看下系统磁盘绑定情况, 再决定mysql data目录</p>\n<p>命令: df -h</p>\n</blockquote>\n<h3 id=\"2-1-创建用户-用户组-数据目录\"><a href=\"#2-1-创建用户-用户组-数据目录\" class=\"headerlink\" title=\"2.1. 创建用户, 用户组, 数据目录\"></a>2.1. 创建用户, 用户组, 数据目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql -d /home/mysql mysql</span><br><span class=\"line\">mkdir /home/mysql/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-下载-解压\"><a href=\"#2-2-下载-解压\" class=\"headerlink\" title=\"2.2. 下载, 解压\"></a>2.2. 下载, 解压</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/mysql</span><br><span class=\"line\">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\">tar -zvxf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-配置启动\"><a href=\"#2-3-配置启动\" class=\"headerlink\" title=\"2.3. 配置启动\"></a>2.3. 配置启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化配置</span></span><br><span class=\"line\">./mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改basedir, datadir</span></span><br><span class=\"line\">vim support-files/mysql.server</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\">basedir=/home/mysql</span><br><span class=\"line\">datadir=/home/mysql/data</span><br><span class=\"line\">...</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建软链接使命令可全局使用</span></span><br><span class=\"line\">ln -s /home/mysql/bin/mysql /usr/bin/mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">...</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">basedir = /home/mysql</span><br><span class=\"line\">datadir = /home/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">character-set-client-handshake = FALSE</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci</span><br><span class=\"line\">init_connect = &#x27;SET NAMES utf8mb4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">...</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加开机启动</span></span><br><span class=\"line\">cp /home/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加可执行权限</span></span><br><span class=\"line\">chmod 755 /etc/init.d/mysqld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看开机启动列表是否有mysqld, 没有就根据提示添加</span></span><br><span class=\"line\">chkconfig --list mysqld</span><br><span class=\"line\">chkconfig --add mysqld </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动mysql</span></span><br><span class=\"line\">./support-files/mysql.server start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首次进入mysql 并修改root密码</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">alter user user() identified by <span class=\"string\">&quot;修改的密码&quot;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看默认编码集</span></span><br><span class=\"line\">show variables where variable_name like &#x27;%char%&#x27; or variable_name like &#x27;collation%&#x27;;</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                       |</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb4                     |</span><br><span class=\"line\">| character_set_connection | utf8mb4                     |</span><br><span class=\"line\">| character_set_database   | utf8mb4                     |</span><br><span class=\"line\">| character_set_filesystem | binary                      |</span><br><span class=\"line\">| character_set_results    | utf8mb4                     |</span><br><span class=\"line\">| character_set_server     | utf8mb4                     |</span><br><span class=\"line\">| character_set_system     | utf8                        |</span><br><span class=\"line\">| character_sets_dir       | /home/mysql/share/charsets/ |</span><br><span class=\"line\">| collation_connection     | utf8mb4_unicode_ci          |</span><br><span class=\"line\">| collation_database       | utf8mb4_unicode_ci          |</span><br><span class=\"line\">| collation_server         | utf8mb4_unicode_ci          |</span><br><span class=\"line\">+--------------------------+-----------------------------+</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl 显示mysqld退出但实际没退出时</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">启动mysql可能出现的错误:</font></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">error <span class=\"keyword\">while</span> loading shared libraries: libncurses.so.5</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">error <span class=\"keyword\">while</span> loading shared libraries: libtinfo.so.5</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提示缺少依赖libncurses.so.5 和 libtinfo.so.5</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">但在 /usr/lib64 目录下是有 libtinfo.so.6.1 和 libncurses.so.6.1包的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所以只需创建个软链接让mysql启动时去找到 *.5的包但实际是调用 *.6.1的包即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/lib64/libncurses.so.6.1 /usr/lib64/libncurses.so.5</span><br><span class=\"line\">sudo ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"配置frp内网穿透","date":"2021-06-03T01:34:18.000Z","_content":"\n### 1. 下载对应包\n\n> https://github.com/fatedier/frp/releases\n\n在git上找到对应自己系统版本的链接, 并下载到服务器\n\n例:\n\n`wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_386.tar.gz`\n\n\n\n### 2. 解压缩\n\n`tar -zvxf frp_0.37.0_linux_386.tar.gz`\n\n### 3. 修改服务器配置\n\n> 后台运行: `nohup ./frps -c frps.ini >/dev/null 2>&1 &`\n>\n> bind_port FRP使用端口\n>\n> v_host_http_port 外部访问端口(可配置nginx proxy_pass转发)\n\n- `vi frps.ini`\n\n```shell\n[common]\nbind_port = 7000\ntoken = 12345678\nvhost_http_port = 80\n```\n\n- 启动: `./frps -c frps.ini`\n\n### 4. 修改客户端配置\n\n> 客户端下载同服务端\n\n- `vi frpc.ini`\n\n```shell\n[common]\nserver_addr = 106.14.30.129\nserver_port = 7000\ntoken = 12345678\ntls_enable = true\n\n[krkdwc]\ntype = http\ncustom_domains = dev.bogwang.cn\nlocal_port = 5000\n```\n\n- 启动: `./frpc -c frpc.ini`\n\n","source":"_posts/配置frp内网穿透.md","raw":"---\ntitle: 配置frp内网穿透\ndate: 2021-06-03 09:34:18\ntags:\n---\n\n### 1. 下载对应包\n\n> https://github.com/fatedier/frp/releases\n\n在git上找到对应自己系统版本的链接, 并下载到服务器\n\n例:\n\n`wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_386.tar.gz`\n\n\n\n### 2. 解压缩\n\n`tar -zvxf frp_0.37.0_linux_386.tar.gz`\n\n### 3. 修改服务器配置\n\n> 后台运行: `nohup ./frps -c frps.ini >/dev/null 2>&1 &`\n>\n> bind_port FRP使用端口\n>\n> v_host_http_port 外部访问端口(可配置nginx proxy_pass转发)\n\n- `vi frps.ini`\n\n```shell\n[common]\nbind_port = 7000\ntoken = 12345678\nvhost_http_port = 80\n```\n\n- 启动: `./frps -c frps.ini`\n\n### 4. 修改客户端配置\n\n> 客户端下载同服务端\n\n- `vi frpc.ini`\n\n```shell\n[common]\nserver_addr = 106.14.30.129\nserver_port = 7000\ntoken = 12345678\ntls_enable = true\n\n[krkdwc]\ntype = http\ncustom_domains = dev.bogwang.cn\nlocal_port = 5000\n```\n\n- 启动: `./frpc -c frpc.ini`\n\n","slug":"配置frp内网穿透","published":1,"updated":"2022-04-10T12:55:59.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcf000wisuhbm1gab5e","content":"<h3 id=\"1-下载对应包\"><a href=\"#1-下载对应包\" class=\"headerlink\" title=\"1. 下载对应包\"></a>1. 下载对应包</h3><blockquote>\n<p><a href=\"https://github.com/fatedier/frp/releases\">https://github.com/fatedier/frp/releases</a></p>\n</blockquote>\n<p>在git上找到对应自己系统版本的链接, 并下载到服务器</p>\n<p>例:</p>\n<p><code>wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_386.tar.gz</code></p>\n<h3 id=\"2-解压缩\"><a href=\"#2-解压缩\" class=\"headerlink\" title=\"2. 解压缩\"></a>2. 解压缩</h3><p><code>tar -zvxf frp_0.37.0_linux_386.tar.gz</code></p>\n<h3 id=\"3-修改服务器配置\"><a href=\"#3-修改服务器配置\" class=\"headerlink\" title=\"3. 修改服务器配置\"></a>3. 修改服务器配置</h3><blockquote>\n<p>后台运行: <code>nohup ./frps -c frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>bind_port FRP使用端口</p>\n<p>v_host_http_port 外部访问端口(可配置nginx proxy_pass转发)</p>\n</blockquote>\n<ul>\n<li><code>vi frps.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">token = 12345678</span><br><span class=\"line\">vhost_http_port = 80</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动: <code>./frps -c frps.ini</code></li>\n</ul>\n<h3 id=\"4-修改客户端配置\"><a href=\"#4-修改客户端配置\" class=\"headerlink\" title=\"4. 修改客户端配置\"></a>4. 修改客户端配置</h3><blockquote>\n<p>客户端下载同服务端</p>\n</blockquote>\n<ul>\n<li><code>vi frpc.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 106.14.30.129</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">token = 12345678</span><br><span class=\"line\">tls_enable = true</span><br><span class=\"line\"></span><br><span class=\"line\">[krkdwc]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">custom_domains = dev.bogwang.cn</span><br><span class=\"line\">local_port = 5000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动: <code>./frpc -c frpc.ini</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-下载对应包\"><a href=\"#1-下载对应包\" class=\"headerlink\" title=\"1. 下载对应包\"></a>1. 下载对应包</h3><blockquote>\n<p><a href=\"https://github.com/fatedier/frp/releases\">https://github.com/fatedier/frp/releases</a></p>\n</blockquote>\n<p>在git上找到对应自己系统版本的链接, 并下载到服务器</p>\n<p>例:</p>\n<p><code>wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_386.tar.gz</code></p>\n<h3 id=\"2-解压缩\"><a href=\"#2-解压缩\" class=\"headerlink\" title=\"2. 解压缩\"></a>2. 解压缩</h3><p><code>tar -zvxf frp_0.37.0_linux_386.tar.gz</code></p>\n<h3 id=\"3-修改服务器配置\"><a href=\"#3-修改服务器配置\" class=\"headerlink\" title=\"3. 修改服务器配置\"></a>3. 修改服务器配置</h3><blockquote>\n<p>后台运行: <code>nohup ./frps -c frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>bind_port FRP使用端口</p>\n<p>v_host_http_port 外部访问端口(可配置nginx proxy_pass转发)</p>\n</blockquote>\n<ul>\n<li><code>vi frps.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">token = 12345678</span><br><span class=\"line\">vhost_http_port = 80</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动: <code>./frps -c frps.ini</code></li>\n</ul>\n<h3 id=\"4-修改客户端配置\"><a href=\"#4-修改客户端配置\" class=\"headerlink\" title=\"4. 修改客户端配置\"></a>4. 修改客户端配置</h3><blockquote>\n<p>客户端下载同服务端</p>\n</blockquote>\n<ul>\n<li><code>vi frpc.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 106.14.30.129</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">token = 12345678</span><br><span class=\"line\">tls_enable = true</span><br><span class=\"line\"></span><br><span class=\"line\">[krkdwc]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">custom_domains = dev.bogwang.cn</span><br><span class=\"line\">local_port = 5000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动: <code>./frpc -c frpc.ini</code></li>\n</ul>\n"},{"title":"计算机组成原理","date":"2022-02-20T06:59:37.000Z","_content":"\n# 计算机组成原理\n\n## 1. Basic\n\n### 1.1. 基本组成\n\n**五大部分**\n\n- **运算器**  (CPU) (主机): 算术运算、逻辑运算\n- **控制器**  (CPU) (主机): 指挥各部件, 使程序运行\n- 存储器 : 存放数据和程序\n  - **主存**  (主机)\n  - 辅存  (I/O设备)\n- **输入设备**  (I/O设备)\n- **输出设备**  (I/O设备)\n\n### 1.2. 各硬件部分\n\n> 寄存, 就是暂存数据的意思, 类似快递点\n\n**主存储器**\n\n> 存储体存数据, MAR对应数据位置(主存地址), MDR暂存对应的实际数据\n>\n> 类似快递点: 存储体=> 货架,  MAR => 店员,  MDR => 取货/放货 的柜台\n>\n> 取数据过程: CPU把地址给到MAR, 把读指令给到主存储器, 主存储器把存储体MAR地址的数据放到MDR等待使用\n>\n> 存数据过程: CPU把地址给到MAR, 把数据放到MDR, 把写指令给到主存储器, 主存储器根据指令把MDR中数据存储到存储体的MAR地址\n\n- 存储体: 数据在存储体中按地址存储, 每个地址对应一个存储单元\n  - 存储单元: 每个存储单元存放一串二进制代码\n    - 存储元: 即存储二进制的电子元件, 每个存储元可存1bit\n  - 存储字: 存储单元中二进制的组合\n  - 存储字长: 存储单元中二进制代码的位数\n- MAR: 存储地址寄存器, 用于指明要读/写哪个存储单元, 其位数反映存储单元数量 Memory Address Register \n- MDR: 存储数据寄存器, 用于暂存要读/写的数据, 其位数=存储字长 Memory Data Register \n\n**运算器**: 用于实现算术运算(+ - * /)、逻辑运算(与/非)\n\n> 前三个存数据, ALU执行(运算)\n\n- ACC: 累加计数器, 存放操作数、运算的结果 Accumulator\n- MQ: 乘商寄存器, 进行乘、除法时用  Multiple-Quotient Register\n- X: 通用寄存器, 存放操作数\n- ALU: 算数逻辑单元, 用电路实现各种算数运算、逻辑运算  Arthmetic and Logic Unit\n\n**控制器**\n\n> PC + IR 取指令, CU执行\n\n- PC: 程序计数器, 存放下一条指令的地址  Program Counter\n- IR: 指令寄存器, 存放当前执行的指令    Instruction Register\n- CU: 控制单元, 分析指令, 给出控制信息 Control Unit\n\n**工作过程**\n\n- 初始: 指令、数据存入主存, PC指向第一条指令\n- 从主存中取指令放入IR、PC自动加1, CU分析指令, CU指挥其他部件执行指令\n\n### 1.3. 计算机系统层次结构\n\n| 微程序机器M0         | 传统机器M1         | 虚拟机器M2                   | 虚拟机器M3                   | 虚拟机器M4                   |\n| -------------------- | ------------------ | ---------------------------- | ---------------------------- | ---------------------------- |\n| 微指令系统           | 用机器语言的机器   | 操作系统机器                 | 汇编语言机器                 | 高级语言机器                 |\n| 硬件                 | 硬件               | 软件                         | 软件                         | 软件                         |\n| 由硬件直接执行微指令 | 执行二进制机器指令 | 向上提供\"广义指令\"(系统调用) | 用汇编程序翻译成机器语言程序 | 用编译程序翻译成汇编语言程序 |\n| 微指令1 / 2 / 3      | 000010000000101    |                              | LOAD 5                       | y=a*b + c                    |\n\n**三种级别的语言**\n\n- 机器语言: 二进制代码\n- 汇编语言: 助记符\n  - 将汇编语言翻译成机器语言\n- 高级语言: C, Python\n  - 编译程序(编译器): 将高级语言一次全部翻译为汇编语言, 或直接翻译为机器语言\n  - 解释程序(解释器): 将高级语言翻译为机器语言, 翻译一句执行一句\n\n### 1.4. 存储器的性能指标\n\n- CPU主频: CPU内数字脉冲信号振荡的频率 (Hz)\n- CPU时钟周期 = 1 / CPU主频  (秒)\n- CPI(Clock cycle Per Instruction): 执行一条指令所需的时钟周期数\n\n> 不同的指令, CPI不同, 甚至相同的指令, CPI也可能变化\n\n- 执行一条指令的耗时 = CPI * CPU时钟周期\n- IPS(Instructions Per Second): 每秒执行多少条指令  = 主频 / 平均CPI   (KMGT  Kilo=10 ** 3  Million=10 ** 6)\n- FLOPS(Floating-point Operations Per Second): 每秒执行多少次浮点运算  (KMGT  Giga=10 ** 9  Tera=10 ** 12)\n\n### 1.5. 系统整体的性能指标\n\n> 描述存储容量, 文件大小时: K = 2^10, M=2^20, G=2^30, T=2^40\n>\n> 描述频率, 速率时: K=10^3, M=10^6, G=10^9, T=10^12\n\n- 数据通路带宽: 数据总线一次所能并行传送信息的位数(各硬件部件通过数据总线传输数据)\n- 吞吐量: 指系统在单位时间内处理请求的数量\n- 响应时间: 指从用户向计算机发送一个请求, 到系统对该请求做出响应并获得它所需要的结果的时间\n- 基准程序: 用来测量计算机的一种实用程序(跑分软件)\n\n## 2. 数据的表示和运算\n\n### 2.1. 进位计数制\n\n- 位权: 由符号的位置反映权重\n- 基数: 每个数码位所用到的不同符号的个数, r进制的基数为r\n\n- 计算机使用二进制\n  - 可使用两个稳定状态的物理器件表示\n  - 0，1正好对应逻辑值 真、假。方便实现逻辑运算\n  - 可很方便地使用逻辑门电路实现算术运算\n- 二进制 >> 八进制： 3位一组，每组转换成对应的八进制符号\n- 二进制 >> 十六进制： 3位一组\n- 十进制 >> r进制\n  - 整数部分：除基取余法，先取得的“余”是整数的低位\n  - 小数部分：乘基取整法，先取得的“整”是小数的高位\n\n| 2^12^ | 2^11^ | 2^10^ | 2^9^ | 2^8^ | 2^7^ | 2^6^ | 2^5^ | 2^4^ | 2^3^ | 2^2^ | 2^1^ | 2^0^ | 2^-1^ | 2^-2^ | 2^-3^ |\n| ----- | ----- | ----- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ----- | ----- | ----- |\n| 4096  | 2048  | 1024  | 512  | 256  | 128  | 64   | 32   | 16   | 8    | 4    | 2    | 1    | 0.5   | 0.25  | 0.125 |\n\n> 参考上图可知有部分小数是无法用二进制精确表示的\n\n- 真值： 实际的带正负号的数值（人类习惯的样子）\n- 机器数：把正负号数字化的数（存到机器里的样子）\n\n### 2.2. BCD码\n\n> 二进制转十进制时按乘转换麻烦, 所以用BCD转换\n>\n> BCD: Binary-Coded Decimal, 用二进制编码的十进制\n\n- **8421码**\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 |\n\n例:\n\n十进制:   5  +  8                     13\n\n十进制: 0101  +  1000         1101 \n\n 8421码中 1010 ~ 1111 没有定义 需要 + 0110 做数据修正(强制向高位进1) 上例得  0001 0011 即 13\n\n4个十进制位 -->> 16种不同的状态\n\nBCD码只使用其中的10种  -->> 不同的映射方案\n\n- **余3码:**  8421码  +  (0011)~2~\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 | 1010 | 1011 | 1100 |\n\n- **2421码:**  改变权值的定义\n\nXXXX -> 2421  并规定 0~4 开头是0  5~? 开头是1\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0000 | 0001 | 0010 | 0011 | 0100 | 1011 | 1100 | 1101 | 1110 | 1111 |\n\n### 2.3. 字符与字符串\n\n#### 2.3.1. ASCII码\n\n> 常用的数字、字母、符号(英文)共128个字符 --> 7个二进制编码  --> ASCII码 \n>\n> 存入计算机通常在高位补个0, 凑足1B(字节)  即 8bit\n>\n> 可印刷字符: 32~126, 其余为控制、通信字符\n>\n> 规律:\n>\n> ​\t数字: 48(0011 0000) ~ 57(0011 1001) 后面一个比特位刚好是数字对应的8421码\n>\n> ​\t大写字母: 65(0100 0001) ~ 90(0101 1010) 前三个010 后面为1~26\n>\n> ​\t小写字母: 97(0110 0001) ~ 122(0111 1010) 前三个011 后面为1~26\n>\n> ```python\n> ord('a') - ord('A') == 32\n> >> True\n> ```\n\n![image-20220724170433901](..\\images\\image-20220724170433901.png)\n\n#### 2.3.2. 汉字的表示和编码\n\n1980年 GB 2312-80: 汉字+各种符号共7445个\n\n区位码: 94个区,  每区94个位置(即94行, 94列)\n\n国标码: 为防止信息交换时与\"控制/通信字符\"冲突,  在区位码基础上加32(16进制: 20H)\n\n> 国标码已可保证数据传输, 但无法和ASCII做区分\n\n汉字内码: 保证高位为1, 与ASCII码做区分, 在国标码基础上加128 (1000, 0000) (16进制: 80H)\n\n> 汉字内码可以保证数据在计算机内部的处理, 计算机发现高位为1时可判断出是汉字\n\n例: \n\n| 汉字(十进制) | 区位码(十六进制) | 国标码(十六进制) | 汉字内码(十六进制) |\n| ------------ | ---------------- | ---------------- | ------------------ |\n| 啊(16 01)    | 10H 01H          | 30H 21H          | B0H A1H            |\n\n输入：输入编码\n\n> 拼音  a1 => 国标码 => 汉字内码\n\n输出：汉字字形码\n\n> 就是对应到一个字块的像素\n\n#### 2.3.3. 字符串\n\n- 从低地址到高地址逐个字符存储, 很多语言中,  '\\0'作为字符串结尾标识\n- 对于多字节的数据(如汉字),  可采取大/小端存储模式\n- 大/小端模式: 将数据的最高有效字节存放在低/高地址单元中\n\n### 2.4. 奇偶校验\n\n#### 2.4.1. 原理\n\n- 码字: 由若干位代码组成的一个字\n\n- 将两个码字逐位进行对比,  具有不同的位的个数称为两个码字间的距离\n- 码距(d): 一种编码方案可能有若干个合法码字,  各合法码字间的最小距离我称为码距\n\n- 当d = 1时, 无检错能力\n- 当d = 2时, 有检错能力\n- 当d = 3 时, 可能有检错、纠错能力\n\n奇校验码: 整个校验码(有效信息位和校验位) 中的 1 个个数为奇数\n\n| 奇/偶 校验位 | 信息位 |\n| ------------ | ------ |\n| 1/0          | n      |\n\n偶校验硬件实现: \n\n- 计算校验位的值:  各信息进行异或运算, 得到的结果即为偶校验位\n\n- 校验:  对所有位进行异或, 结果为1说明出错\n\n#### 2.4.2. 海明码\n\n> 由于奇偶校验的策略仅加了一个比特位,  只能携带2种状态, 能发现数位错误,  但无法确定是哪一位出错\n>\n> 海明码是在原数据中的一些固定位置，插入一个0（或1），以进行奇（或偶）校验位，虽然使原数据变长，但可使其拥有纠错能力。\n> 能侦测并更正一个比特的错误；若有两个比特出错，则只能侦测，不能更正；若有三个或更多的比特出错，则不能侦测，更不能更正。\n\n海明码设计思路:  将信息位分组进行偶校验 => 多个校验位 => 多个校验位标注出错位置\n\nn个信息位  k个校验位  共 n+k 位  2^k种状态\n\n公式:  2^k^  >= n + k + 1\n\n| n    | 1    | 2-4  | 5-11 | 12-26 | 27-57 | 58-120 |\n| ---- | ---- | ---- | ---- | ----- | ----- | ------ |\n| k    | 2    | 3    | 4    | 5     | 6     | 7      |\n\n**求解步骤**\n\n信息位： 1010\n\n1. 确定海明码的位数：2^k^ >= n + k + 1\n\nn = 4  一> k = 3\n\n设信息位D~4~D~3~D~2~D~1~(1010)，共4位，校验位P~1~P~2~P~3~,  共3位， 对应海明码为H~7~H~6~H~5~H~4~H~3~H~2~H~1~.\n\n2. 确定校验位的分布\n\n> 校验位P~i~ 放在海明码位号为2^i-1^的位置上，其余信息位顺序放\n\n| H~7~ | H~6~ | H~5~ | H~4~ | H~3~ | H~2~ | H~1~ |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| D~4~ | D~3~ | D~2~ | P~3~ | D~1~ | P~2~ | P~1~ |\n| 1    | 0    | 1    | 0    | 0    | 1    | 0    |\n\n3. 求校验位的值\n\nH~3~  :  3  转二进制  0   1   1\n\nH~5~  :  5     --->>>    1   0   1\n\nH~6~  :  6     --->>>    1   1   0\n\nH~7~   : 7      --->>>   1   1   1\n\n> 根据P下标对应二进制位的权重进行分组\n\n​\t\tP1 对应二进制权重1的位置为1的信息位 H3 H5 H7 再根据对应信息位的值求异或得 0\n\n​\t\tP2 对应二进制权重2的位置为1的信息位 H3 H6 H7 再根据对应信息位的值求异或得 1\n\n​\t\tP3 对应二进制权重4的位置为1的信息位 H5 H6 H7  再根据对应信息位的值求异或得 0\n\n4. 纠错\n\n> 校验方程：校验位及其对应分组值求异或  为0即无错误\n\n接收到：1010010 无错误\n\n接收到：1010000  H2位错误\n\n​\t\tS1 => P1 H3 H5 H7  => H1 H3 H5 H7  => 0011 => 0\n\n​\t\tS2 => P2 H3 H6 H7  => H2 H3 H6 H7  => 0001 => 1\n\n​\t\tS3 => P3 H3 H5 H7  => H4 H3 H5 H7  => 0011 => 0\n\n错误位即： 010 => H2\n\n5. 补充\n\n海明码的检错、纠错能力：1位可纠错， 2位可检错\n\n实际使用中会在头部再加一个全校验位H~8~（P~全~），对整体进行偶校验\n\nS~3~S~2~S~1~  = 000 且全体偶校验成功  -> 无错误\n\nS~3~S~2~S~1~  != 000 且全体偶校验失败  -> 1位错误，纠正即可\n\nS~3~S~2~S~1~  != 000 且全体偶校验成功  -> 2位错误，不可纠正，需重传\n\n### 2.5. 循环冗余校验\n\n> Cyclic Redundancy Check,  CRC\n\n#### 2.5.1. 原理\n\n1. 数据发送、接受方约定一个”除数“\n\n2. K个信息位 + R个校验位 作为”被除数“， 添加校验位后需要保证除法的余数为0\n\n3. 收到数据后，进行除法检查余数是否为0\n\n4. 若余数为非0说明出错，则进行纠错或重传\n\n#### 2.5.2. 构造方法\n\n> 模二除：十进制除法基础上，每次上的值由被除数高为是否为1决定，1就上1，0就上0再加一位（模二除后余数位数应该正好比除数少1位）\n>\n> 模二减：对应位取异或\n\n1. 由生成多项式确定\"除数\"。若生成多项式中x的最高次为R，则”除数“有R+1位\n2. K个信息位 + R个0，作为”被除数“\n3. 被除数、除数 进行”模二除“，得R位余数\n4. K个信息位 + R位余数 = CRC码\n\n#### 2.5.3. 检错纠错\n\n1. 可检测出所有奇数个错误\n2. 可检测出所有双比特的错误\n3. 可检测出所有小于等于校验位长度的连续错误\n4. 若选择合适的生成多项式，且2^R^ >= K + R + 1，则可纠正单比特位错误\n\n#### 2.5.4. 例\n\n设生成多项式为G(x) = x^3^ + x^2^ + 1, 信息码为101001，求对应的CRC码。\n\n1. 确定K、R以及生成多项式对应的二进制码\n\nK=信息码的长度：6\n\nR=生成多项式最高次幂：3\n\nN(校验码位数) = K + R = 9\n\n生成多项式G(x) = 1 * x^3^ + 1 * x^2^ + 0 * x^1^ + 1 * x^0^, 对应二进制码1101\n\n2. 移位\n\n信息码左移R位，低位补0，对应二进制码 1101000\n\n3. 相除（模二除）\n\n101001 000 模二除 1101 余数001，\n\n得CRC码 101001 001\n\n4. 检错和纠错\n\n发送： 101001001\n\n接收： 101001001 用1101进行模二除 余数为000，代表没出错\n\n接收： 101001011 用1101进行模二除 余数为010，代表出错\n\n> 信息位+校验位 共9位，但校验位3位8保状态，无法表示全部所以才没纠错能力\n\nK个信息位，R个校验位，若生成多项式选择得当，且2^R^ >= K + R _+ 1, 则CRC码可纠正1位错\n\n> CRC码实际常应用在计算机网络中，几千个bit的信息位 + 几个校验位， 仅用来检错，不用来纠错\n\n### 2.6. 定点数\n\n> 定点数： 小数点的位置固定  995.222               --常规计数\n>\n> 浮点数：小数点的位置不固定  9.95222 * 10^2^  --科学计数\n>\n> 二进制和十进制的一样也是分为定点和浮点\n\n#### 2.6.1. 无符号数\n\n- 概念：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。\n\n- 表示范围：n位二进制数：0 ~ 2^n^ - 1 \n- 通常只有无符号的整数，而没有无符号小数\n\n#### 2.6.2. 有符号数定点表示\n\n> 数值部分也称尾数\n>\n> 用定点方式表示19.75时，需要把整数和小数部分分别单独保存\n>\n> 可用原码、反码、补码三种方式来表示定点整数和定点小数。还可以用移码表示定点整数\n>\n> 若真值为x，则用 [x]~原~、 [x]~反~、 [x]~补~、 [x]~移~、分别表示真值所对应的原码、反码、补码、移码\n\n- 定点整数\n\n| x0     | x1   | x2   | ...  | xn   |                    |\n| ------ | ---- | ---- | ---- | ---- | ------------------ |\n| 符号位 | 数   | 值   | 部   | 分   | 小数点位置（隐含） |\n\n- 定点小数\n\n| x0     |                    | x1   | x2   | ...  | xn   |\n| ------ | ------------------ | ---- | ---- | ---- | ---- |\n| 符号位 | 小数点位置（隐含） | 数   | 值   | 部   | 分   |\n\n**原码：用尾数表示真值的绝对值，符号位 0/1 对应 正/负**\n\n- 整数表示范围（机器字长n+1）：-(2^n^-1) <= x <= 2^n^-1\n  - 真值0有+0和-0两种形式\n  - 8位表示整数+19：0 0010011\n- 小数表示范围（机器字长n+1）： -(1-2^-n^) <= x <= 1-2^-n^\n  - 真值0有+0和-0两种形式\n  - 8位表示小数-0.75： 1 110000\n\n**反码：若符号位为0，则反码与原码相同；若符号位为1，则数值位全部取反**\n\n- 整数/小数 表示范围和原码相同\n\n**补码：正数的补码与原码相同；负数的补码=反码末位+1（要考虑进位）**","source":"_posts/计算机组成原理.md","raw":"---\ntitle: 计算机组成原理\ndate: 2022-02-20 14:59:37\ntags: 计组\ncategories: 计组\n---\n\n# 计算机组成原理\n\n## 1. Basic\n\n### 1.1. 基本组成\n\n**五大部分**\n\n- **运算器**  (CPU) (主机): 算术运算、逻辑运算\n- **控制器**  (CPU) (主机): 指挥各部件, 使程序运行\n- 存储器 : 存放数据和程序\n  - **主存**  (主机)\n  - 辅存  (I/O设备)\n- **输入设备**  (I/O设备)\n- **输出设备**  (I/O设备)\n\n### 1.2. 各硬件部分\n\n> 寄存, 就是暂存数据的意思, 类似快递点\n\n**主存储器**\n\n> 存储体存数据, MAR对应数据位置(主存地址), MDR暂存对应的实际数据\n>\n> 类似快递点: 存储体=> 货架,  MAR => 店员,  MDR => 取货/放货 的柜台\n>\n> 取数据过程: CPU把地址给到MAR, 把读指令给到主存储器, 主存储器把存储体MAR地址的数据放到MDR等待使用\n>\n> 存数据过程: CPU把地址给到MAR, 把数据放到MDR, 把写指令给到主存储器, 主存储器根据指令把MDR中数据存储到存储体的MAR地址\n\n- 存储体: 数据在存储体中按地址存储, 每个地址对应一个存储单元\n  - 存储单元: 每个存储单元存放一串二进制代码\n    - 存储元: 即存储二进制的电子元件, 每个存储元可存1bit\n  - 存储字: 存储单元中二进制的组合\n  - 存储字长: 存储单元中二进制代码的位数\n- MAR: 存储地址寄存器, 用于指明要读/写哪个存储单元, 其位数反映存储单元数量 Memory Address Register \n- MDR: 存储数据寄存器, 用于暂存要读/写的数据, 其位数=存储字长 Memory Data Register \n\n**运算器**: 用于实现算术运算(+ - * /)、逻辑运算(与/非)\n\n> 前三个存数据, ALU执行(运算)\n\n- ACC: 累加计数器, 存放操作数、运算的结果 Accumulator\n- MQ: 乘商寄存器, 进行乘、除法时用  Multiple-Quotient Register\n- X: 通用寄存器, 存放操作数\n- ALU: 算数逻辑单元, 用电路实现各种算数运算、逻辑运算  Arthmetic and Logic Unit\n\n**控制器**\n\n> PC + IR 取指令, CU执行\n\n- PC: 程序计数器, 存放下一条指令的地址  Program Counter\n- IR: 指令寄存器, 存放当前执行的指令    Instruction Register\n- CU: 控制单元, 分析指令, 给出控制信息 Control Unit\n\n**工作过程**\n\n- 初始: 指令、数据存入主存, PC指向第一条指令\n- 从主存中取指令放入IR、PC自动加1, CU分析指令, CU指挥其他部件执行指令\n\n### 1.3. 计算机系统层次结构\n\n| 微程序机器M0         | 传统机器M1         | 虚拟机器M2                   | 虚拟机器M3                   | 虚拟机器M4                   |\n| -------------------- | ------------------ | ---------------------------- | ---------------------------- | ---------------------------- |\n| 微指令系统           | 用机器语言的机器   | 操作系统机器                 | 汇编语言机器                 | 高级语言机器                 |\n| 硬件                 | 硬件               | 软件                         | 软件                         | 软件                         |\n| 由硬件直接执行微指令 | 执行二进制机器指令 | 向上提供\"广义指令\"(系统调用) | 用汇编程序翻译成机器语言程序 | 用编译程序翻译成汇编语言程序 |\n| 微指令1 / 2 / 3      | 000010000000101    |                              | LOAD 5                       | y=a*b + c                    |\n\n**三种级别的语言**\n\n- 机器语言: 二进制代码\n- 汇编语言: 助记符\n  - 将汇编语言翻译成机器语言\n- 高级语言: C, Python\n  - 编译程序(编译器): 将高级语言一次全部翻译为汇编语言, 或直接翻译为机器语言\n  - 解释程序(解释器): 将高级语言翻译为机器语言, 翻译一句执行一句\n\n### 1.4. 存储器的性能指标\n\n- CPU主频: CPU内数字脉冲信号振荡的频率 (Hz)\n- CPU时钟周期 = 1 / CPU主频  (秒)\n- CPI(Clock cycle Per Instruction): 执行一条指令所需的时钟周期数\n\n> 不同的指令, CPI不同, 甚至相同的指令, CPI也可能变化\n\n- 执行一条指令的耗时 = CPI * CPU时钟周期\n- IPS(Instructions Per Second): 每秒执行多少条指令  = 主频 / 平均CPI   (KMGT  Kilo=10 ** 3  Million=10 ** 6)\n- FLOPS(Floating-point Operations Per Second): 每秒执行多少次浮点运算  (KMGT  Giga=10 ** 9  Tera=10 ** 12)\n\n### 1.5. 系统整体的性能指标\n\n> 描述存储容量, 文件大小时: K = 2^10, M=2^20, G=2^30, T=2^40\n>\n> 描述频率, 速率时: K=10^3, M=10^6, G=10^9, T=10^12\n\n- 数据通路带宽: 数据总线一次所能并行传送信息的位数(各硬件部件通过数据总线传输数据)\n- 吞吐量: 指系统在单位时间内处理请求的数量\n- 响应时间: 指从用户向计算机发送一个请求, 到系统对该请求做出响应并获得它所需要的结果的时间\n- 基准程序: 用来测量计算机的一种实用程序(跑分软件)\n\n## 2. 数据的表示和运算\n\n### 2.1. 进位计数制\n\n- 位权: 由符号的位置反映权重\n- 基数: 每个数码位所用到的不同符号的个数, r进制的基数为r\n\n- 计算机使用二进制\n  - 可使用两个稳定状态的物理器件表示\n  - 0，1正好对应逻辑值 真、假。方便实现逻辑运算\n  - 可很方便地使用逻辑门电路实现算术运算\n- 二进制 >> 八进制： 3位一组，每组转换成对应的八进制符号\n- 二进制 >> 十六进制： 3位一组\n- 十进制 >> r进制\n  - 整数部分：除基取余法，先取得的“余”是整数的低位\n  - 小数部分：乘基取整法，先取得的“整”是小数的高位\n\n| 2^12^ | 2^11^ | 2^10^ | 2^9^ | 2^8^ | 2^7^ | 2^6^ | 2^5^ | 2^4^ | 2^3^ | 2^2^ | 2^1^ | 2^0^ | 2^-1^ | 2^-2^ | 2^-3^ |\n| ----- | ----- | ----- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ----- | ----- | ----- |\n| 4096  | 2048  | 1024  | 512  | 256  | 128  | 64   | 32   | 16   | 8    | 4    | 2    | 1    | 0.5   | 0.25  | 0.125 |\n\n> 参考上图可知有部分小数是无法用二进制精确表示的\n\n- 真值： 实际的带正负号的数值（人类习惯的样子）\n- 机器数：把正负号数字化的数（存到机器里的样子）\n\n### 2.2. BCD码\n\n> 二进制转十进制时按乘转换麻烦, 所以用BCD转换\n>\n> BCD: Binary-Coded Decimal, 用二进制编码的十进制\n\n- **8421码**\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 |\n\n例:\n\n十进制:   5  +  8                     13\n\n十进制: 0101  +  1000         1101 \n\n 8421码中 1010 ~ 1111 没有定义 需要 + 0110 做数据修正(强制向高位进1) 上例得  0001 0011 即 13\n\n4个十进制位 -->> 16种不同的状态\n\nBCD码只使用其中的10种  -->> 不同的映射方案\n\n- **余3码:**  8421码  +  (0011)~2~\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 | 1010 | 1011 | 1100 |\n\n- **2421码:**  改变权值的定义\n\nXXXX -> 2421  并规定 0~4 开头是0  5~? 开头是1\n\n映射关系:\n\n| 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0000 | 0001 | 0010 | 0011 | 0100 | 1011 | 1100 | 1101 | 1110 | 1111 |\n\n### 2.3. 字符与字符串\n\n#### 2.3.1. ASCII码\n\n> 常用的数字、字母、符号(英文)共128个字符 --> 7个二进制编码  --> ASCII码 \n>\n> 存入计算机通常在高位补个0, 凑足1B(字节)  即 8bit\n>\n> 可印刷字符: 32~126, 其余为控制、通信字符\n>\n> 规律:\n>\n> ​\t数字: 48(0011 0000) ~ 57(0011 1001) 后面一个比特位刚好是数字对应的8421码\n>\n> ​\t大写字母: 65(0100 0001) ~ 90(0101 1010) 前三个010 后面为1~26\n>\n> ​\t小写字母: 97(0110 0001) ~ 122(0111 1010) 前三个011 后面为1~26\n>\n> ```python\n> ord('a') - ord('A') == 32\n> >> True\n> ```\n\n![image-20220724170433901](..\\images\\image-20220724170433901.png)\n\n#### 2.3.2. 汉字的表示和编码\n\n1980年 GB 2312-80: 汉字+各种符号共7445个\n\n区位码: 94个区,  每区94个位置(即94行, 94列)\n\n国标码: 为防止信息交换时与\"控制/通信字符\"冲突,  在区位码基础上加32(16进制: 20H)\n\n> 国标码已可保证数据传输, 但无法和ASCII做区分\n\n汉字内码: 保证高位为1, 与ASCII码做区分, 在国标码基础上加128 (1000, 0000) (16进制: 80H)\n\n> 汉字内码可以保证数据在计算机内部的处理, 计算机发现高位为1时可判断出是汉字\n\n例: \n\n| 汉字(十进制) | 区位码(十六进制) | 国标码(十六进制) | 汉字内码(十六进制) |\n| ------------ | ---------------- | ---------------- | ------------------ |\n| 啊(16 01)    | 10H 01H          | 30H 21H          | B0H A1H            |\n\n输入：输入编码\n\n> 拼音  a1 => 国标码 => 汉字内码\n\n输出：汉字字形码\n\n> 就是对应到一个字块的像素\n\n#### 2.3.3. 字符串\n\n- 从低地址到高地址逐个字符存储, 很多语言中,  '\\0'作为字符串结尾标识\n- 对于多字节的数据(如汉字),  可采取大/小端存储模式\n- 大/小端模式: 将数据的最高有效字节存放在低/高地址单元中\n\n### 2.4. 奇偶校验\n\n#### 2.4.1. 原理\n\n- 码字: 由若干位代码组成的一个字\n\n- 将两个码字逐位进行对比,  具有不同的位的个数称为两个码字间的距离\n- 码距(d): 一种编码方案可能有若干个合法码字,  各合法码字间的最小距离我称为码距\n\n- 当d = 1时, 无检错能力\n- 当d = 2时, 有检错能力\n- 当d = 3 时, 可能有检错、纠错能力\n\n奇校验码: 整个校验码(有效信息位和校验位) 中的 1 个个数为奇数\n\n| 奇/偶 校验位 | 信息位 |\n| ------------ | ------ |\n| 1/0          | n      |\n\n偶校验硬件实现: \n\n- 计算校验位的值:  各信息进行异或运算, 得到的结果即为偶校验位\n\n- 校验:  对所有位进行异或, 结果为1说明出错\n\n#### 2.4.2. 海明码\n\n> 由于奇偶校验的策略仅加了一个比特位,  只能携带2种状态, 能发现数位错误,  但无法确定是哪一位出错\n>\n> 海明码是在原数据中的一些固定位置，插入一个0（或1），以进行奇（或偶）校验位，虽然使原数据变长，但可使其拥有纠错能力。\n> 能侦测并更正一个比特的错误；若有两个比特出错，则只能侦测，不能更正；若有三个或更多的比特出错，则不能侦测，更不能更正。\n\n海明码设计思路:  将信息位分组进行偶校验 => 多个校验位 => 多个校验位标注出错位置\n\nn个信息位  k个校验位  共 n+k 位  2^k种状态\n\n公式:  2^k^  >= n + k + 1\n\n| n    | 1    | 2-4  | 5-11 | 12-26 | 27-57 | 58-120 |\n| ---- | ---- | ---- | ---- | ----- | ----- | ------ |\n| k    | 2    | 3    | 4    | 5     | 6     | 7      |\n\n**求解步骤**\n\n信息位： 1010\n\n1. 确定海明码的位数：2^k^ >= n + k + 1\n\nn = 4  一> k = 3\n\n设信息位D~4~D~3~D~2~D~1~(1010)，共4位，校验位P~1~P~2~P~3~,  共3位， 对应海明码为H~7~H~6~H~5~H~4~H~3~H~2~H~1~.\n\n2. 确定校验位的分布\n\n> 校验位P~i~ 放在海明码位号为2^i-1^的位置上，其余信息位顺序放\n\n| H~7~ | H~6~ | H~5~ | H~4~ | H~3~ | H~2~ | H~1~ |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| D~4~ | D~3~ | D~2~ | P~3~ | D~1~ | P~2~ | P~1~ |\n| 1    | 0    | 1    | 0    | 0    | 1    | 0    |\n\n3. 求校验位的值\n\nH~3~  :  3  转二进制  0   1   1\n\nH~5~  :  5     --->>>    1   0   1\n\nH~6~  :  6     --->>>    1   1   0\n\nH~7~   : 7      --->>>   1   1   1\n\n> 根据P下标对应二进制位的权重进行分组\n\n​\t\tP1 对应二进制权重1的位置为1的信息位 H3 H5 H7 再根据对应信息位的值求异或得 0\n\n​\t\tP2 对应二进制权重2的位置为1的信息位 H3 H6 H7 再根据对应信息位的值求异或得 1\n\n​\t\tP3 对应二进制权重4的位置为1的信息位 H5 H6 H7  再根据对应信息位的值求异或得 0\n\n4. 纠错\n\n> 校验方程：校验位及其对应分组值求异或  为0即无错误\n\n接收到：1010010 无错误\n\n接收到：1010000  H2位错误\n\n​\t\tS1 => P1 H3 H5 H7  => H1 H3 H5 H7  => 0011 => 0\n\n​\t\tS2 => P2 H3 H6 H7  => H2 H3 H6 H7  => 0001 => 1\n\n​\t\tS3 => P3 H3 H5 H7  => H4 H3 H5 H7  => 0011 => 0\n\n错误位即： 010 => H2\n\n5. 补充\n\n海明码的检错、纠错能力：1位可纠错， 2位可检错\n\n实际使用中会在头部再加一个全校验位H~8~（P~全~），对整体进行偶校验\n\nS~3~S~2~S~1~  = 000 且全体偶校验成功  -> 无错误\n\nS~3~S~2~S~1~  != 000 且全体偶校验失败  -> 1位错误，纠正即可\n\nS~3~S~2~S~1~  != 000 且全体偶校验成功  -> 2位错误，不可纠正，需重传\n\n### 2.5. 循环冗余校验\n\n> Cyclic Redundancy Check,  CRC\n\n#### 2.5.1. 原理\n\n1. 数据发送、接受方约定一个”除数“\n\n2. K个信息位 + R个校验位 作为”被除数“， 添加校验位后需要保证除法的余数为0\n\n3. 收到数据后，进行除法检查余数是否为0\n\n4. 若余数为非0说明出错，则进行纠错或重传\n\n#### 2.5.2. 构造方法\n\n> 模二除：十进制除法基础上，每次上的值由被除数高为是否为1决定，1就上1，0就上0再加一位（模二除后余数位数应该正好比除数少1位）\n>\n> 模二减：对应位取异或\n\n1. 由生成多项式确定\"除数\"。若生成多项式中x的最高次为R，则”除数“有R+1位\n2. K个信息位 + R个0，作为”被除数“\n3. 被除数、除数 进行”模二除“，得R位余数\n4. K个信息位 + R位余数 = CRC码\n\n#### 2.5.3. 检错纠错\n\n1. 可检测出所有奇数个错误\n2. 可检测出所有双比特的错误\n3. 可检测出所有小于等于校验位长度的连续错误\n4. 若选择合适的生成多项式，且2^R^ >= K + R + 1，则可纠正单比特位错误\n\n#### 2.5.4. 例\n\n设生成多项式为G(x) = x^3^ + x^2^ + 1, 信息码为101001，求对应的CRC码。\n\n1. 确定K、R以及生成多项式对应的二进制码\n\nK=信息码的长度：6\n\nR=生成多项式最高次幂：3\n\nN(校验码位数) = K + R = 9\n\n生成多项式G(x) = 1 * x^3^ + 1 * x^2^ + 0 * x^1^ + 1 * x^0^, 对应二进制码1101\n\n2. 移位\n\n信息码左移R位，低位补0，对应二进制码 1101000\n\n3. 相除（模二除）\n\n101001 000 模二除 1101 余数001，\n\n得CRC码 101001 001\n\n4. 检错和纠错\n\n发送： 101001001\n\n接收： 101001001 用1101进行模二除 余数为000，代表没出错\n\n接收： 101001011 用1101进行模二除 余数为010，代表出错\n\n> 信息位+校验位 共9位，但校验位3位8保状态，无法表示全部所以才没纠错能力\n\nK个信息位，R个校验位，若生成多项式选择得当，且2^R^ >= K + R _+ 1, 则CRC码可纠正1位错\n\n> CRC码实际常应用在计算机网络中，几千个bit的信息位 + 几个校验位， 仅用来检错，不用来纠错\n\n### 2.6. 定点数\n\n> 定点数： 小数点的位置固定  995.222               --常规计数\n>\n> 浮点数：小数点的位置不固定  9.95222 * 10^2^  --科学计数\n>\n> 二进制和十进制的一样也是分为定点和浮点\n\n#### 2.6.1. 无符号数\n\n- 概念：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。\n\n- 表示范围：n位二进制数：0 ~ 2^n^ - 1 \n- 通常只有无符号的整数，而没有无符号小数\n\n#### 2.6.2. 有符号数定点表示\n\n> 数值部分也称尾数\n>\n> 用定点方式表示19.75时，需要把整数和小数部分分别单独保存\n>\n> 可用原码、反码、补码三种方式来表示定点整数和定点小数。还可以用移码表示定点整数\n>\n> 若真值为x，则用 [x]~原~、 [x]~反~、 [x]~补~、 [x]~移~、分别表示真值所对应的原码、反码、补码、移码\n\n- 定点整数\n\n| x0     | x1   | x2   | ...  | xn   |                    |\n| ------ | ---- | ---- | ---- | ---- | ------------------ |\n| 符号位 | 数   | 值   | 部   | 分   | 小数点位置（隐含） |\n\n- 定点小数\n\n| x0     |                    | x1   | x2   | ...  | xn   |\n| ------ | ------------------ | ---- | ---- | ---- | ---- |\n| 符号位 | 小数点位置（隐含） | 数   | 值   | 部   | 分   |\n\n**原码：用尾数表示真值的绝对值，符号位 0/1 对应 正/负**\n\n- 整数表示范围（机器字长n+1）：-(2^n^-1) <= x <= 2^n^-1\n  - 真值0有+0和-0两种形式\n  - 8位表示整数+19：0 0010011\n- 小数表示范围（机器字长n+1）： -(1-2^-n^) <= x <= 1-2^-n^\n  - 真值0有+0和-0两种形式\n  - 8位表示小数-0.75： 1 110000\n\n**反码：若符号位为0，则反码与原码相同；若符号位为1，则数值位全部取反**\n\n- 整数/小数 表示范围和原码相同\n\n**补码：正数的补码与原码相同；负数的补码=反码末位+1（要考虑进位）**","slug":"计算机组成原理","published":1,"updated":"2023-07-11T09:59:56.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwixegcf000yisuha7wh8dln","content":"<h1 id=\"计算机组成原理\"><a href=\"#计算机组成原理\" class=\"headerlink\" title=\"计算机组成原理\"></a>计算机组成原理</h1><h2 id=\"1-Basic\"><a href=\"#1-Basic\" class=\"headerlink\" title=\"1. Basic\"></a>1. Basic</h2><h3 id=\"1-1-基本组成\"><a href=\"#1-1-基本组成\" class=\"headerlink\" title=\"1.1. 基本组成\"></a>1.1. 基本组成</h3><p><strong>五大部分</strong></p>\n<ul>\n<li><strong>运算器</strong>  (CPU) (主机): 算术运算、逻辑运算</li>\n<li><strong>控制器</strong>  (CPU) (主机): 指挥各部件, 使程序运行</li>\n<li>存储器 : 存放数据和程序<ul>\n<li><strong>主存</strong>  (主机)</li>\n<li>辅存  (I&#x2F;O设备)</li>\n</ul>\n</li>\n<li><strong>输入设备</strong>  (I&#x2F;O设备)</li>\n<li><strong>输出设备</strong>  (I&#x2F;O设备)</li>\n</ul>\n<h3 id=\"1-2-各硬件部分\"><a href=\"#1-2-各硬件部分\" class=\"headerlink\" title=\"1.2. 各硬件部分\"></a>1.2. 各硬件部分</h3><blockquote>\n<p>寄存, 就是暂存数据的意思, 类似快递点</p>\n</blockquote>\n<p><strong>主存储器</strong></p>\n<blockquote>\n<p>存储体存数据, MAR对应数据位置(主存地址), MDR暂存对应的实际数据</p>\n<p>类似快递点: 存储体&#x3D;&gt; 货架,  MAR &#x3D;&gt; 店员,  MDR &#x3D;&gt; 取货&#x2F;放货 的柜台</p>\n<p>取数据过程: CPU把地址给到MAR, 把读指令给到主存储器, 主存储器把存储体MAR地址的数据放到MDR等待使用</p>\n<p>存数据过程: CPU把地址给到MAR, 把数据放到MDR, 把写指令给到主存储器, 主存储器根据指令把MDR中数据存储到存储体的MAR地址</p>\n</blockquote>\n<ul>\n<li>存储体: 数据在存储体中按地址存储, 每个地址对应一个存储单元<ul>\n<li>存储单元: 每个存储单元存放一串二进制代码<ul>\n<li>存储元: 即存储二进制的电子元件, 每个存储元可存1bit</li>\n</ul>\n</li>\n<li>存储字: 存储单元中二进制的组合</li>\n<li>存储字长: 存储单元中二进制代码的位数</li>\n</ul>\n</li>\n<li>MAR: 存储地址寄存器, 用于指明要读&#x2F;写哪个存储单元, 其位数反映存储单元数量 Memory Address Register </li>\n<li>MDR: 存储数据寄存器, 用于暂存要读&#x2F;写的数据, 其位数&#x3D;存储字长 Memory Data Register</li>\n</ul>\n<p><strong>运算器</strong>: 用于实现算术运算(+ - * &#x2F;)、逻辑运算(与&#x2F;非)</p>\n<blockquote>\n<p>前三个存数据, ALU执行(运算)</p>\n</blockquote>\n<ul>\n<li>ACC: 累加计数器, 存放操作数、运算的结果 Accumulator</li>\n<li>MQ: 乘商寄存器, 进行乘、除法时用  Multiple-Quotient Register</li>\n<li>X: 通用寄存器, 存放操作数</li>\n<li>ALU: 算数逻辑单元, 用电路实现各种算数运算、逻辑运算  Arthmetic and Logic Unit</li>\n</ul>\n<p><strong>控制器</strong></p>\n<blockquote>\n<p>PC + IR 取指令, CU执行</p>\n</blockquote>\n<ul>\n<li>PC: 程序计数器, 存放下一条指令的地址  Program Counter</li>\n<li>IR: 指令寄存器, 存放当前执行的指令    Instruction Register</li>\n<li>CU: 控制单元, 分析指令, 给出控制信息 Control Unit</li>\n</ul>\n<p><strong>工作过程</strong></p>\n<ul>\n<li>初始: 指令、数据存入主存, PC指向第一条指令</li>\n<li>从主存中取指令放入IR、PC自动加1, CU分析指令, CU指挥其他部件执行指令</li>\n</ul>\n<h3 id=\"1-3-计算机系统层次结构\"><a href=\"#1-3-计算机系统层次结构\" class=\"headerlink\" title=\"1.3. 计算机系统层次结构\"></a>1.3. 计算机系统层次结构</h3><table>\n<thead>\n<tr>\n<th>微程序机器M0</th>\n<th>传统机器M1</th>\n<th>虚拟机器M2</th>\n<th>虚拟机器M3</th>\n<th>虚拟机器M4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微指令系统</td>\n<td>用机器语言的机器</td>\n<td>操作系统机器</td>\n<td>汇编语言机器</td>\n<td>高级语言机器</td>\n</tr>\n<tr>\n<td>硬件</td>\n<td>硬件</td>\n<td>软件</td>\n<td>软件</td>\n<td>软件</td>\n</tr>\n<tr>\n<td>由硬件直接执行微指令</td>\n<td>执行二进制机器指令</td>\n<td>向上提供”广义指令”(系统调用)</td>\n<td>用汇编程序翻译成机器语言程序</td>\n<td>用编译程序翻译成汇编语言程序</td>\n</tr>\n<tr>\n<td>微指令1 &#x2F; 2 &#x2F; 3</td>\n<td>000010000000101</td>\n<td></td>\n<td>LOAD 5</td>\n<td>y&#x3D;a*b + c</td>\n</tr>\n</tbody></table>\n<p><strong>三种级别的语言</strong></p>\n<ul>\n<li>机器语言: 二进制代码</li>\n<li>汇编语言: 助记符<ul>\n<li>将汇编语言翻译成机器语言</li>\n</ul>\n</li>\n<li>高级语言: C, Python<ul>\n<li>编译程序(编译器): 将高级语言一次全部翻译为汇编语言, 或直接翻译为机器语言</li>\n<li>解释程序(解释器): 将高级语言翻译为机器语言, 翻译一句执行一句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-存储器的性能指标\"><a href=\"#1-4-存储器的性能指标\" class=\"headerlink\" title=\"1.4. 存储器的性能指标\"></a>1.4. 存储器的性能指标</h3><ul>\n<li>CPU主频: CPU内数字脉冲信号振荡的频率 (Hz)</li>\n<li>CPU时钟周期 &#x3D; 1 &#x2F; CPU主频  (秒)</li>\n<li>CPI(Clock cycle Per Instruction): 执行一条指令所需的时钟周期数</li>\n</ul>\n<blockquote>\n<p>不同的指令, CPI不同, 甚至相同的指令, CPI也可能变化</p>\n</blockquote>\n<ul>\n<li>执行一条指令的耗时 &#x3D; CPI * CPU时钟周期</li>\n<li>IPS(Instructions Per Second): 每秒执行多少条指令  &#x3D; 主频 &#x2F; 平均CPI   (KMGT  Kilo&#x3D;10 ** 3  Million&#x3D;10 ** 6)</li>\n<li>FLOPS(Floating-point Operations Per Second): 每秒执行多少次浮点运算  (KMGT  Giga&#x3D;10 ** 9  Tera&#x3D;10 ** 12)</li>\n</ul>\n<h3 id=\"1-5-系统整体的性能指标\"><a href=\"#1-5-系统整体的性能指标\" class=\"headerlink\" title=\"1.5. 系统整体的性能指标\"></a>1.5. 系统整体的性能指标</h3><blockquote>\n<p>描述存储容量, 文件大小时: K &#x3D; 2^10, M&#x3D;2^20, G&#x3D;2^30, T&#x3D;2^40</p>\n<p>描述频率, 速率时: K&#x3D;10^3, M&#x3D;10^6, G&#x3D;10^9, T&#x3D;10^12</p>\n</blockquote>\n<ul>\n<li>数据通路带宽: 数据总线一次所能并行传送信息的位数(各硬件部件通过数据总线传输数据)</li>\n<li>吞吐量: 指系统在单位时间内处理请求的数量</li>\n<li>响应时间: 指从用户向计算机发送一个请求, 到系统对该请求做出响应并获得它所需要的结果的时间</li>\n<li>基准程序: 用来测量计算机的一种实用程序(跑分软件)</li>\n</ul>\n<h2 id=\"2-数据的表示和运算\"><a href=\"#2-数据的表示和运算\" class=\"headerlink\" title=\"2. 数据的表示和运算\"></a>2. 数据的表示和运算</h2><h3 id=\"2-1-进位计数制\"><a href=\"#2-1-进位计数制\" class=\"headerlink\" title=\"2.1. 进位计数制\"></a>2.1. 进位计数制</h3><ul>\n<li><p>位权: 由符号的位置反映权重</p>\n</li>\n<li><p>基数: 每个数码位所用到的不同符号的个数, r进制的基数为r</p>\n</li>\n<li><p>计算机使用二进制</p>\n<ul>\n<li>可使用两个稳定状态的物理器件表示</li>\n<li>0，1正好对应逻辑值 真、假。方便实现逻辑运算</li>\n<li>可很方便地使用逻辑门电路实现算术运算</li>\n</ul>\n</li>\n<li><p>二进制 &gt;&gt; 八进制： 3位一组，每组转换成对应的八进制符号</p>\n</li>\n<li><p>二进制 &gt;&gt; 十六进制： 3位一组</p>\n</li>\n<li><p>十进制 &gt;&gt; r进制</p>\n<ul>\n<li>整数部分：除基取余法，先取得的“余”是整数的低位</li>\n<li>小数部分：乘基取整法，先取得的“整”是小数的高位</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>2^12^</th>\n<th>2^11^</th>\n<th>2^10^</th>\n<th>2^9^</th>\n<th>2^8^</th>\n<th>2^7^</th>\n<th>2^6^</th>\n<th>2^5^</th>\n<th>2^4^</th>\n<th>2^3^</th>\n<th>2^2^</th>\n<th>2^1^</th>\n<th>2^0^</th>\n<th>2^-1^</th>\n<th>2^-2^</th>\n<th>2^-3^</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4096</td>\n<td>2048</td>\n<td>1024</td>\n<td>512</td>\n<td>256</td>\n<td>128</td>\n<td>64</td>\n<td>32</td>\n<td>16</td>\n<td>8</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>0.5</td>\n<td>0.25</td>\n<td>0.125</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>参考上图可知有部分小数是无法用二进制精确表示的</p>\n</blockquote>\n<ul>\n<li>真值： 实际的带正负号的数值（人类习惯的样子）</li>\n<li>机器数：把正负号数字化的数（存到机器里的样子）</li>\n</ul>\n<h3 id=\"2-2-BCD码\"><a href=\"#2-2-BCD码\" class=\"headerlink\" title=\"2.2. BCD码\"></a>2.2. BCD码</h3><blockquote>\n<p>二进制转十进制时按乘转换麻烦, 所以用BCD转换</p>\n<p>BCD: Binary-Coded Decimal, 用二进制编码的十进制</p>\n</blockquote>\n<ul>\n<li><strong>8421码</strong></li>\n</ul>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0000</td>\n<td>0001</td>\n<td>0010</td>\n<td>0011</td>\n<td>0100</td>\n<td>0101</td>\n<td>0110</td>\n<td>0111</td>\n<td>1000</td>\n<td>1001</td>\n</tr>\n</tbody></table>\n<p>例:</p>\n<p>十进制:   5  +  8                     13</p>\n<p>十进制: 0101  +  1000         1101 </p>\n<p> 8421码中 1010 ~ 1111 没有定义 需要 + 0110 做数据修正(强制向高位进1) 上例得  0001 0011 即 13</p>\n<p>4个十进制位 –&gt;&gt; 16种不同的状态</p>\n<p>BCD码只使用其中的10种  –&gt;&gt; 不同的映射方案</p>\n<ul>\n<li><strong>余3码:</strong>  8421码  +  (0011)<del>2</del></li>\n</ul>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0011</td>\n<td>0100</td>\n<td>0101</td>\n<td>0110</td>\n<td>0111</td>\n<td>1000</td>\n<td>1001</td>\n<td>1010</td>\n<td>1011</td>\n<td>1100</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>2421码:</strong>  改变权值的定义</li>\n</ul>\n<p>XXXX -&gt; 2421  并规定 0<del>4 开头是0  5</del>? 开头是1</p>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0000</td>\n<td>0001</td>\n<td>0010</td>\n<td>0011</td>\n<td>0100</td>\n<td>1011</td>\n<td>1100</td>\n<td>1101</td>\n<td>1110</td>\n<td>1111</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-字符与字符串\"><a href=\"#2-3-字符与字符串\" class=\"headerlink\" title=\"2.3. 字符与字符串\"></a>2.3. 字符与字符串</h3><h4 id=\"2-3-1-ASCII码\"><a href=\"#2-3-1-ASCII码\" class=\"headerlink\" title=\"2.3.1. ASCII码\"></a>2.3.1. ASCII码</h4><blockquote>\n<p>常用的数字、字母、符号(英文)共128个字符 –&gt; 7个二进制编码  –&gt; ASCII码 </p>\n<p>存入计算机通常在高位补个0, 凑足1B(字节)  即 8bit</p>\n<p>可印刷字符: 32~126, 其余为控制、通信字符</p>\n<p>规律:</p>\n<p>​\t数字: 48(0011 0000) ~ 57(0011 1001) 后面一个比特位刚好是数字对应的8421码</p>\n<p>​\t大写字母: 65(0100 0001) ~ 90(0101 1010) 前三个010 后面为1~26</p>\n<p>​\t小写字母: 97(0110 0001) ~ 122(0111 1010) 前三个011 后面为1~26</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>) == <span class=\"number\">32</span></span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"/..%5Cimages%5Cimage-20220724170433901.png\" alt=\"image-20220724170433901\"></p>\n<h4 id=\"2-3-2-汉字的表示和编码\"><a href=\"#2-3-2-汉字的表示和编码\" class=\"headerlink\" title=\"2.3.2. 汉字的表示和编码\"></a>2.3.2. 汉字的表示和编码</h4><p>1980年 GB 2312-80: 汉字+各种符号共7445个</p>\n<p>区位码: 94个区,  每区94个位置(即94行, 94列)</p>\n<p>国标码: 为防止信息交换时与”控制&#x2F;通信字符”冲突,  在区位码基础上加32(16进制: 20H)</p>\n<blockquote>\n<p>国标码已可保证数据传输, 但无法和ASCII做区分</p>\n</blockquote>\n<p>汉字内码: 保证高位为1, 与ASCII码做区分, 在国标码基础上加128 (1000, 0000) (16进制: 80H)</p>\n<blockquote>\n<p>汉字内码可以保证数据在计算机内部的处理, 计算机发现高位为1时可判断出是汉字</p>\n</blockquote>\n<p>例: </p>\n<table>\n<thead>\n<tr>\n<th>汉字(十进制)</th>\n<th>区位码(十六进制)</th>\n<th>国标码(十六进制)</th>\n<th>汉字内码(十六进制)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>啊(16 01)</td>\n<td>10H 01H</td>\n<td>30H 21H</td>\n<td>B0H A1H</td>\n</tr>\n</tbody></table>\n<p>输入：输入编码</p>\n<blockquote>\n<p>拼音  a1 &#x3D;&gt; 国标码 &#x3D;&gt; 汉字内码</p>\n</blockquote>\n<p>输出：汉字字形码</p>\n<blockquote>\n<p>就是对应到一个字块的像素</p>\n</blockquote>\n<h4 id=\"2-3-3-字符串\"><a href=\"#2-3-3-字符串\" class=\"headerlink\" title=\"2.3.3. 字符串\"></a>2.3.3. 字符串</h4><ul>\n<li>从低地址到高地址逐个字符存储, 很多语言中,  ‘\\0’作为字符串结尾标识</li>\n<li>对于多字节的数据(如汉字),  可采取大&#x2F;小端存储模式</li>\n<li>大&#x2F;小端模式: 将数据的最高有效字节存放在低&#x2F;高地址单元中</li>\n</ul>\n<h3 id=\"2-4-奇偶校验\"><a href=\"#2-4-奇偶校验\" class=\"headerlink\" title=\"2.4. 奇偶校验\"></a>2.4. 奇偶校验</h3><h4 id=\"2-4-1-原理\"><a href=\"#2-4-1-原理\" class=\"headerlink\" title=\"2.4.1. 原理\"></a>2.4.1. 原理</h4><ul>\n<li><p>码字: 由若干位代码组成的一个字</p>\n</li>\n<li><p>将两个码字逐位进行对比,  具有不同的位的个数称为两个码字间的距离</p>\n</li>\n<li><p>码距(d): 一种编码方案可能有若干个合法码字,  各合法码字间的最小距离我称为码距</p>\n</li>\n<li><p>当d &#x3D; 1时, 无检错能力</p>\n</li>\n<li><p>当d &#x3D; 2时, 有检错能力</p>\n</li>\n<li><p>当d &#x3D; 3 时, 可能有检错、纠错能力</p>\n</li>\n</ul>\n<p>奇校验码: 整个校验码(有效信息位和校验位) 中的 1 个个数为奇数</p>\n<table>\n<thead>\n<tr>\n<th>奇&#x2F;偶 校验位</th>\n<th>信息位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1&#x2F;0</td>\n<td>n</td>\n</tr>\n</tbody></table>\n<p>偶校验硬件实现: </p>\n<ul>\n<li><p>计算校验位的值:  各信息进行异或运算, 得到的结果即为偶校验位</p>\n</li>\n<li><p>校验:  对所有位进行异或, 结果为1说明出错</p>\n</li>\n</ul>\n<h4 id=\"2-4-2-海明码\"><a href=\"#2-4-2-海明码\" class=\"headerlink\" title=\"2.4.2. 海明码\"></a>2.4.2. 海明码</h4><blockquote>\n<p>由于奇偶校验的策略仅加了一个比特位,  只能携带2种状态, 能发现数位错误,  但无法确定是哪一位出错</p>\n<p>海明码是在原数据中的一些固定位置，插入一个0（或1），以进行奇（或偶）校验位，虽然使原数据变长，但可使其拥有纠错能力。<br>能侦测并更正一个比特的错误；若有两个比特出错，则只能侦测，不能更正；若有三个或更多的比特出错，则不能侦测，更不能更正。</p>\n</blockquote>\n<p>海明码设计思路:  将信息位分组进行偶校验 &#x3D;&gt; 多个校验位 &#x3D;&gt; 多个校验位标注出错位置</p>\n<p>n个信息位  k个校验位  共 n+k 位  2^k种状态</p>\n<p>公式:  2^k^  &gt;&#x3D; n + k + 1</p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>1</th>\n<th>2-4</th>\n<th>5-11</th>\n<th>12-26</th>\n<th>27-57</th>\n<th>58-120</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p><strong>求解步骤</strong></p>\n<p>信息位： 1010</p>\n<ol>\n<li>确定海明码的位数：2^k^ &gt;&#x3D; n + k + 1</li>\n</ol>\n<p>n &#x3D; 4  一&gt; k &#x3D; 3</p>\n<p>设信息位D<del>4</del>D<del>3</del>D<del>2</del>D<del>1</del>(1010)，共4位，校验位P<del>1</del>P<del>2</del>P<del>3</del>,  共3位， 对应海明码为H<del>7</del>H<del>6</del>H<del>5</del>H<del>4</del>H<del>3</del>H<del>2</del>H<del>1</del>.</p>\n<ol start=\"2\">\n<li>确定校验位的分布</li>\n</ol>\n<blockquote>\n<p>校验位P<del>i</del> 放在海明码位号为2^i-1^的位置上，其余信息位顺序放</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>H<del>7</del></th>\n<th>H<del>6</del></th>\n<th>H<del>5</del></th>\n<th>H<del>4</del></th>\n<th>H<del>3</del></th>\n<th>H<del>2</del></th>\n<th>H<del>1</del></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D<del>4</del></td>\n<td>D<del>3</del></td>\n<td>D<del>2</del></td>\n<td>P<del>3</del></td>\n<td>D<del>1</del></td>\n<td>P<del>2</del></td>\n<td>P<del>1</del></td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>求校验位的值</li>\n</ol>\n<p>H<del>3</del>  :  3  转二进制  0   1   1</p>\n<p>H<del>5</del>  :  5     —&gt;&gt;&gt;    1   0   1</p>\n<p>H<del>6</del>  :  6     —&gt;&gt;&gt;    1   1   0</p>\n<p>H<del>7</del>   : 7      —&gt;&gt;&gt;   1   1   1</p>\n<blockquote>\n<p>根据P下标对应二进制位的权重进行分组</p>\n</blockquote>\n<p>​\t\tP1 对应二进制权重1的位置为1的信息位 H3 H5 H7 再根据对应信息位的值求异或得 0</p>\n<p>​\t\tP2 对应二进制权重2的位置为1的信息位 H3 H6 H7 再根据对应信息位的值求异或得 1</p>\n<p>​\t\tP3 对应二进制权重4的位置为1的信息位 H5 H6 H7  再根据对应信息位的值求异或得 0</p>\n<ol start=\"4\">\n<li>纠错</li>\n</ol>\n<blockquote>\n<p>校验方程：校验位及其对应分组值求异或  为0即无错误</p>\n</blockquote>\n<p>接收到：1010010 无错误</p>\n<p>接收到：1010000  H2位错误</p>\n<p>​\t\tS1 &#x3D;&gt; P1 H3 H5 H7  &#x3D;&gt; H1 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p>\n<p>​\t\tS2 &#x3D;&gt; P2 H3 H6 H7  &#x3D;&gt; H2 H3 H6 H7  &#x3D;&gt; 0001 &#x3D;&gt; 1</p>\n<p>​\t\tS3 &#x3D;&gt; P3 H3 H5 H7  &#x3D;&gt; H4 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p>\n<p>错误位即： 010 &#x3D;&gt; H2</p>\n<ol start=\"5\">\n<li>补充</li>\n</ol>\n<p>海明码的检错、纠错能力：1位可纠错， 2位可检错</p>\n<p>实际使用中会在头部再加一个全校验位H<del>8</del>（P<del>全</del>），对整体进行偶校验</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  &#x3D; 000 且全体偶校验成功  -&gt; 无错误</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验失败  -&gt; 1位错误，纠正即可</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验成功  -&gt; 2位错误，不可纠正，需重传</p>\n<h3 id=\"2-5-循环冗余校验\"><a href=\"#2-5-循环冗余校验\" class=\"headerlink\" title=\"2.5. 循环冗余校验\"></a>2.5. 循环冗余校验</h3><blockquote>\n<p>Cyclic Redundancy Check,  CRC</p>\n</blockquote>\n<h4 id=\"2-5-1-原理\"><a href=\"#2-5-1-原理\" class=\"headerlink\" title=\"2.5.1. 原理\"></a>2.5.1. 原理</h4><ol>\n<li><p>数据发送、接受方约定一个”除数“</p>\n</li>\n<li><p>K个信息位 + R个校验位 作为”被除数“， 添加校验位后需要保证除法的余数为0</p>\n</li>\n<li><p>收到数据后，进行除法检查余数是否为0</p>\n</li>\n<li><p>若余数为非0说明出错，则进行纠错或重传</p>\n</li>\n</ol>\n<h4 id=\"2-5-2-构造方法\"><a href=\"#2-5-2-构造方法\" class=\"headerlink\" title=\"2.5.2. 构造方法\"></a>2.5.2. 构造方法</h4><blockquote>\n<p>模二除：十进制除法基础上，每次上的值由被除数高为是否为1决定，1就上1，0就上0再加一位（模二除后余数位数应该正好比除数少1位）</p>\n<p>模二减：对应位取异或</p>\n</blockquote>\n<ol>\n<li>由生成多项式确定”除数”。若生成多项式中x的最高次为R，则”除数“有R+1位</li>\n<li>K个信息位 + R个0，作为”被除数“</li>\n<li>被除数、除数 进行”模二除“，得R位余数</li>\n<li>K个信息位 + R位余数 &#x3D; CRC码</li>\n</ol>\n<h4 id=\"2-5-3-检错纠错\"><a href=\"#2-5-3-检错纠错\" class=\"headerlink\" title=\"2.5.3. 检错纠错\"></a>2.5.3. 检错纠错</h4><ol>\n<li>可检测出所有奇数个错误</li>\n<li>可检测出所有双比特的错误</li>\n<li>可检测出所有小于等于校验位长度的连续错误</li>\n<li>若选择合适的生成多项式，且2^R^ &gt;&#x3D; K + R + 1，则可纠正单比特位错误</li>\n</ol>\n<h4 id=\"2-5-4-例\"><a href=\"#2-5-4-例\" class=\"headerlink\" title=\"2.5.4. 例\"></a>2.5.4. 例</h4><p>设生成多项式为G(x) &#x3D; x^3^ + x^2^ + 1, 信息码为101001，求对应的CRC码。</p>\n<ol>\n<li>确定K、R以及生成多项式对应的二进制码</li>\n</ol>\n<p>K&#x3D;信息码的长度：6</p>\n<p>R&#x3D;生成多项式最高次幂：3</p>\n<p>N(校验码位数) &#x3D; K + R &#x3D; 9</p>\n<p>生成多项式G(x) &#x3D; 1 * x^3^ + 1 * x^2^ + 0 * x^1^ + 1 * x^0^, 对应二进制码1101</p>\n<ol start=\"2\">\n<li>移位</li>\n</ol>\n<p>信息码左移R位，低位补0，对应二进制码 1101000</p>\n<ol start=\"3\">\n<li>相除（模二除）</li>\n</ol>\n<p>101001 000 模二除 1101 余数001，</p>\n<p>得CRC码 101001 001</p>\n<ol start=\"4\">\n<li>检错和纠错</li>\n</ol>\n<p>发送： 101001001</p>\n<p>接收： 101001001 用1101进行模二除 余数为000，代表没出错</p>\n<p>接收： 101001011 用1101进行模二除 余数为010，代表出错</p>\n<blockquote>\n<p>信息位+校验位 共9位，但校验位3位8保状态，无法表示全部所以才没纠错能力</p>\n</blockquote>\n<p>K个信息位，R个校验位，若生成多项式选择得当，且2^R^ &gt;&#x3D; K + R _+ 1, 则CRC码可纠正1位错</p>\n<blockquote>\n<p>CRC码实际常应用在计算机网络中，几千个bit的信息位 + 几个校验位， 仅用来检错，不用来纠错</p>\n</blockquote>\n<h3 id=\"2-6-定点数\"><a href=\"#2-6-定点数\" class=\"headerlink\" title=\"2.6. 定点数\"></a>2.6. 定点数</h3><blockquote>\n<p>定点数： 小数点的位置固定  995.222               –常规计数</p>\n<p>浮点数：小数点的位置不固定  9.95222 * 10^2^  –科学计数</p>\n<p>二进制和十进制的一样也是分为定点和浮点</p>\n</blockquote>\n<h4 id=\"2-6-1-无符号数\"><a href=\"#2-6-1-无符号数\" class=\"headerlink\" title=\"2.6.1. 无符号数\"></a>2.6.1. 无符号数</h4><ul>\n<li><p>概念：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。</p>\n</li>\n<li><p>表示范围：n位二进制数：0 ~ 2^n^ - 1 </p>\n</li>\n<li><p>通常只有无符号的整数，而没有无符号小数</p>\n</li>\n</ul>\n<h4 id=\"2-6-2-有符号数定点表示\"><a href=\"#2-6-2-有符号数定点表示\" class=\"headerlink\" title=\"2.6.2. 有符号数定点表示\"></a>2.6.2. 有符号数定点表示</h4><blockquote>\n<p>数值部分也称尾数</p>\n<p>用定点方式表示19.75时，需要把整数和小数部分分别单独保存</p>\n<p>可用原码、反码、补码三种方式来表示定点整数和定点小数。还可以用移码表示定点整数</p>\n<p>若真值为x，则用 [x]<del>原</del>、 [x]<del>反</del>、 [x]<del>补</del>、 [x]<del>移</del>、分别表示真值所对应的原码、反码、补码、移码</p>\n</blockquote>\n<ul>\n<li>定点整数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x0</th>\n<th>x1</th>\n<th>x2</th>\n<th>…</th>\n<th>xn</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>符号位</td>\n<td>数</td>\n<td>值</td>\n<td>部</td>\n<td>分</td>\n<td>小数点位置（隐含）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>定点小数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x0</th>\n<th></th>\n<th>x1</th>\n<th>x2</th>\n<th>…</th>\n<th>xn</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>符号位</td>\n<td>小数点位置（隐含）</td>\n<td>数</td>\n<td>值</td>\n<td>部</td>\n<td>分</td>\n</tr>\n</tbody></table>\n<p><strong>原码：用尾数表示真值的绝对值，符号位 0&#x2F;1 对应 正&#x2F;负</strong></p>\n<ul>\n<li>整数表示范围（机器字长n+1）：-(2^n^-1) &lt;&#x3D; x &lt;&#x3D; 2^n^-1<ul>\n<li>真值0有+0和-0两种形式</li>\n<li>8位表示整数+19：0 0010011</li>\n</ul>\n</li>\n<li>小数表示范围（机器字长n+1）： -(1-2^-n^) &lt;&#x3D; x &lt;&#x3D; 1-2^-n^<ul>\n<li>真值0有+0和-0两种形式</li>\n<li>8位表示小数-0.75： 1 110000</li>\n</ul>\n</li>\n</ul>\n<p><strong>反码：若符号位为0，则反码与原码相同；若符号位为1，则数值位全部取反</strong></p>\n<ul>\n<li>整数&#x2F;小数 表示范围和原码相同</li>\n</ul>\n<p><strong>补码：正数的补码与原码相同；负数的补码&#x3D;反码末位+1（要考虑进位）</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机组成原理\"><a href=\"#计算机组成原理\" class=\"headerlink\" title=\"计算机组成原理\"></a>计算机组成原理</h1><h2 id=\"1-Basic\"><a href=\"#1-Basic\" class=\"headerlink\" title=\"1. Basic\"></a>1. Basic</h2><h3 id=\"1-1-基本组成\"><a href=\"#1-1-基本组成\" class=\"headerlink\" title=\"1.1. 基本组成\"></a>1.1. 基本组成</h3><p><strong>五大部分</strong></p>\n<ul>\n<li><strong>运算器</strong>  (CPU) (主机): 算术运算、逻辑运算</li>\n<li><strong>控制器</strong>  (CPU) (主机): 指挥各部件, 使程序运行</li>\n<li>存储器 : 存放数据和程序<ul>\n<li><strong>主存</strong>  (主机)</li>\n<li>辅存  (I&#x2F;O设备)</li>\n</ul>\n</li>\n<li><strong>输入设备</strong>  (I&#x2F;O设备)</li>\n<li><strong>输出设备</strong>  (I&#x2F;O设备)</li>\n</ul>\n<h3 id=\"1-2-各硬件部分\"><a href=\"#1-2-各硬件部分\" class=\"headerlink\" title=\"1.2. 各硬件部分\"></a>1.2. 各硬件部分</h3><blockquote>\n<p>寄存, 就是暂存数据的意思, 类似快递点</p>\n</blockquote>\n<p><strong>主存储器</strong></p>\n<blockquote>\n<p>存储体存数据, MAR对应数据位置(主存地址), MDR暂存对应的实际数据</p>\n<p>类似快递点: 存储体&#x3D;&gt; 货架,  MAR &#x3D;&gt; 店员,  MDR &#x3D;&gt; 取货&#x2F;放货 的柜台</p>\n<p>取数据过程: CPU把地址给到MAR, 把读指令给到主存储器, 主存储器把存储体MAR地址的数据放到MDR等待使用</p>\n<p>存数据过程: CPU把地址给到MAR, 把数据放到MDR, 把写指令给到主存储器, 主存储器根据指令把MDR中数据存储到存储体的MAR地址</p>\n</blockquote>\n<ul>\n<li>存储体: 数据在存储体中按地址存储, 每个地址对应一个存储单元<ul>\n<li>存储单元: 每个存储单元存放一串二进制代码<ul>\n<li>存储元: 即存储二进制的电子元件, 每个存储元可存1bit</li>\n</ul>\n</li>\n<li>存储字: 存储单元中二进制的组合</li>\n<li>存储字长: 存储单元中二进制代码的位数</li>\n</ul>\n</li>\n<li>MAR: 存储地址寄存器, 用于指明要读&#x2F;写哪个存储单元, 其位数反映存储单元数量 Memory Address Register </li>\n<li>MDR: 存储数据寄存器, 用于暂存要读&#x2F;写的数据, 其位数&#x3D;存储字长 Memory Data Register</li>\n</ul>\n<p><strong>运算器</strong>: 用于实现算术运算(+ - * &#x2F;)、逻辑运算(与&#x2F;非)</p>\n<blockquote>\n<p>前三个存数据, ALU执行(运算)</p>\n</blockquote>\n<ul>\n<li>ACC: 累加计数器, 存放操作数、运算的结果 Accumulator</li>\n<li>MQ: 乘商寄存器, 进行乘、除法时用  Multiple-Quotient Register</li>\n<li>X: 通用寄存器, 存放操作数</li>\n<li>ALU: 算数逻辑单元, 用电路实现各种算数运算、逻辑运算  Arthmetic and Logic Unit</li>\n</ul>\n<p><strong>控制器</strong></p>\n<blockquote>\n<p>PC + IR 取指令, CU执行</p>\n</blockquote>\n<ul>\n<li>PC: 程序计数器, 存放下一条指令的地址  Program Counter</li>\n<li>IR: 指令寄存器, 存放当前执行的指令    Instruction Register</li>\n<li>CU: 控制单元, 分析指令, 给出控制信息 Control Unit</li>\n</ul>\n<p><strong>工作过程</strong></p>\n<ul>\n<li>初始: 指令、数据存入主存, PC指向第一条指令</li>\n<li>从主存中取指令放入IR、PC自动加1, CU分析指令, CU指挥其他部件执行指令</li>\n</ul>\n<h3 id=\"1-3-计算机系统层次结构\"><a href=\"#1-3-计算机系统层次结构\" class=\"headerlink\" title=\"1.3. 计算机系统层次结构\"></a>1.3. 计算机系统层次结构</h3><table>\n<thead>\n<tr>\n<th>微程序机器M0</th>\n<th>传统机器M1</th>\n<th>虚拟机器M2</th>\n<th>虚拟机器M3</th>\n<th>虚拟机器M4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微指令系统</td>\n<td>用机器语言的机器</td>\n<td>操作系统机器</td>\n<td>汇编语言机器</td>\n<td>高级语言机器</td>\n</tr>\n<tr>\n<td>硬件</td>\n<td>硬件</td>\n<td>软件</td>\n<td>软件</td>\n<td>软件</td>\n</tr>\n<tr>\n<td>由硬件直接执行微指令</td>\n<td>执行二进制机器指令</td>\n<td>向上提供”广义指令”(系统调用)</td>\n<td>用汇编程序翻译成机器语言程序</td>\n<td>用编译程序翻译成汇编语言程序</td>\n</tr>\n<tr>\n<td>微指令1 &#x2F; 2 &#x2F; 3</td>\n<td>000010000000101</td>\n<td></td>\n<td>LOAD 5</td>\n<td>y&#x3D;a*b + c</td>\n</tr>\n</tbody></table>\n<p><strong>三种级别的语言</strong></p>\n<ul>\n<li>机器语言: 二进制代码</li>\n<li>汇编语言: 助记符<ul>\n<li>将汇编语言翻译成机器语言</li>\n</ul>\n</li>\n<li>高级语言: C, Python<ul>\n<li>编译程序(编译器): 将高级语言一次全部翻译为汇编语言, 或直接翻译为机器语言</li>\n<li>解释程序(解释器): 将高级语言翻译为机器语言, 翻译一句执行一句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-存储器的性能指标\"><a href=\"#1-4-存储器的性能指标\" class=\"headerlink\" title=\"1.4. 存储器的性能指标\"></a>1.4. 存储器的性能指标</h3><ul>\n<li>CPU主频: CPU内数字脉冲信号振荡的频率 (Hz)</li>\n<li>CPU时钟周期 &#x3D; 1 &#x2F; CPU主频  (秒)</li>\n<li>CPI(Clock cycle Per Instruction): 执行一条指令所需的时钟周期数</li>\n</ul>\n<blockquote>\n<p>不同的指令, CPI不同, 甚至相同的指令, CPI也可能变化</p>\n</blockquote>\n<ul>\n<li>执行一条指令的耗时 &#x3D; CPI * CPU时钟周期</li>\n<li>IPS(Instructions Per Second): 每秒执行多少条指令  &#x3D; 主频 &#x2F; 平均CPI   (KMGT  Kilo&#x3D;10 ** 3  Million&#x3D;10 ** 6)</li>\n<li>FLOPS(Floating-point Operations Per Second): 每秒执行多少次浮点运算  (KMGT  Giga&#x3D;10 ** 9  Tera&#x3D;10 ** 12)</li>\n</ul>\n<h3 id=\"1-5-系统整体的性能指标\"><a href=\"#1-5-系统整体的性能指标\" class=\"headerlink\" title=\"1.5. 系统整体的性能指标\"></a>1.5. 系统整体的性能指标</h3><blockquote>\n<p>描述存储容量, 文件大小时: K &#x3D; 2^10, M&#x3D;2^20, G&#x3D;2^30, T&#x3D;2^40</p>\n<p>描述频率, 速率时: K&#x3D;10^3, M&#x3D;10^6, G&#x3D;10^9, T&#x3D;10^12</p>\n</blockquote>\n<ul>\n<li>数据通路带宽: 数据总线一次所能并行传送信息的位数(各硬件部件通过数据总线传输数据)</li>\n<li>吞吐量: 指系统在单位时间内处理请求的数量</li>\n<li>响应时间: 指从用户向计算机发送一个请求, 到系统对该请求做出响应并获得它所需要的结果的时间</li>\n<li>基准程序: 用来测量计算机的一种实用程序(跑分软件)</li>\n</ul>\n<h2 id=\"2-数据的表示和运算\"><a href=\"#2-数据的表示和运算\" class=\"headerlink\" title=\"2. 数据的表示和运算\"></a>2. 数据的表示和运算</h2><h3 id=\"2-1-进位计数制\"><a href=\"#2-1-进位计数制\" class=\"headerlink\" title=\"2.1. 进位计数制\"></a>2.1. 进位计数制</h3><ul>\n<li><p>位权: 由符号的位置反映权重</p>\n</li>\n<li><p>基数: 每个数码位所用到的不同符号的个数, r进制的基数为r</p>\n</li>\n<li><p>计算机使用二进制</p>\n<ul>\n<li>可使用两个稳定状态的物理器件表示</li>\n<li>0，1正好对应逻辑值 真、假。方便实现逻辑运算</li>\n<li>可很方便地使用逻辑门电路实现算术运算</li>\n</ul>\n</li>\n<li><p>二进制 &gt;&gt; 八进制： 3位一组，每组转换成对应的八进制符号</p>\n</li>\n<li><p>二进制 &gt;&gt; 十六进制： 3位一组</p>\n</li>\n<li><p>十进制 &gt;&gt; r进制</p>\n<ul>\n<li>整数部分：除基取余法，先取得的“余”是整数的低位</li>\n<li>小数部分：乘基取整法，先取得的“整”是小数的高位</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>2^12^</th>\n<th>2^11^</th>\n<th>2^10^</th>\n<th>2^9^</th>\n<th>2^8^</th>\n<th>2^7^</th>\n<th>2^6^</th>\n<th>2^5^</th>\n<th>2^4^</th>\n<th>2^3^</th>\n<th>2^2^</th>\n<th>2^1^</th>\n<th>2^0^</th>\n<th>2^-1^</th>\n<th>2^-2^</th>\n<th>2^-3^</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4096</td>\n<td>2048</td>\n<td>1024</td>\n<td>512</td>\n<td>256</td>\n<td>128</td>\n<td>64</td>\n<td>32</td>\n<td>16</td>\n<td>8</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>0.5</td>\n<td>0.25</td>\n<td>0.125</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>参考上图可知有部分小数是无法用二进制精确表示的</p>\n</blockquote>\n<ul>\n<li>真值： 实际的带正负号的数值（人类习惯的样子）</li>\n<li>机器数：把正负号数字化的数（存到机器里的样子）</li>\n</ul>\n<h3 id=\"2-2-BCD码\"><a href=\"#2-2-BCD码\" class=\"headerlink\" title=\"2.2. BCD码\"></a>2.2. BCD码</h3><blockquote>\n<p>二进制转十进制时按乘转换麻烦, 所以用BCD转换</p>\n<p>BCD: Binary-Coded Decimal, 用二进制编码的十进制</p>\n</blockquote>\n<ul>\n<li><strong>8421码</strong></li>\n</ul>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0000</td>\n<td>0001</td>\n<td>0010</td>\n<td>0011</td>\n<td>0100</td>\n<td>0101</td>\n<td>0110</td>\n<td>0111</td>\n<td>1000</td>\n<td>1001</td>\n</tr>\n</tbody></table>\n<p>例:</p>\n<p>十进制:   5  +  8                     13</p>\n<p>十进制: 0101  +  1000         1101 </p>\n<p> 8421码中 1010 ~ 1111 没有定义 需要 + 0110 做数据修正(强制向高位进1) 上例得  0001 0011 即 13</p>\n<p>4个十进制位 –&gt;&gt; 16种不同的状态</p>\n<p>BCD码只使用其中的10种  –&gt;&gt; 不同的映射方案</p>\n<ul>\n<li><strong>余3码:</strong>  8421码  +  (0011)<del>2</del></li>\n</ul>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0011</td>\n<td>0100</td>\n<td>0101</td>\n<td>0110</td>\n<td>0111</td>\n<td>1000</td>\n<td>1001</td>\n<td>1010</td>\n<td>1011</td>\n<td>1100</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>2421码:</strong>  改变权值的定义</li>\n</ul>\n<p>XXXX -&gt; 2421  并规定 0<del>4 开头是0  5</del>? 开头是1</p>\n<p>映射关系:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0000</td>\n<td>0001</td>\n<td>0010</td>\n<td>0011</td>\n<td>0100</td>\n<td>1011</td>\n<td>1100</td>\n<td>1101</td>\n<td>1110</td>\n<td>1111</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-字符与字符串\"><a href=\"#2-3-字符与字符串\" class=\"headerlink\" title=\"2.3. 字符与字符串\"></a>2.3. 字符与字符串</h3><h4 id=\"2-3-1-ASCII码\"><a href=\"#2-3-1-ASCII码\" class=\"headerlink\" title=\"2.3.1. ASCII码\"></a>2.3.1. ASCII码</h4><blockquote>\n<p>常用的数字、字母、符号(英文)共128个字符 –&gt; 7个二进制编码  –&gt; ASCII码 </p>\n<p>存入计算机通常在高位补个0, 凑足1B(字节)  即 8bit</p>\n<p>可印刷字符: 32~126, 其余为控制、通信字符</p>\n<p>规律:</p>\n<p>​\t数字: 48(0011 0000) ~ 57(0011 1001) 后面一个比特位刚好是数字对应的8421码</p>\n<p>​\t大写字母: 65(0100 0001) ~ 90(0101 1010) 前三个010 后面为1~26</p>\n<p>​\t小写字母: 97(0110 0001) ~ 122(0111 1010) 前三个011 后面为1~26</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>) == <span class=\"number\">32</span></span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"/..%5Cimages%5Cimage-20220724170433901.png\" alt=\"image-20220724170433901\"></p>\n<h4 id=\"2-3-2-汉字的表示和编码\"><a href=\"#2-3-2-汉字的表示和编码\" class=\"headerlink\" title=\"2.3.2. 汉字的表示和编码\"></a>2.3.2. 汉字的表示和编码</h4><p>1980年 GB 2312-80: 汉字+各种符号共7445个</p>\n<p>区位码: 94个区,  每区94个位置(即94行, 94列)</p>\n<p>国标码: 为防止信息交换时与”控制&#x2F;通信字符”冲突,  在区位码基础上加32(16进制: 20H)</p>\n<blockquote>\n<p>国标码已可保证数据传输, 但无法和ASCII做区分</p>\n</blockquote>\n<p>汉字内码: 保证高位为1, 与ASCII码做区分, 在国标码基础上加128 (1000, 0000) (16进制: 80H)</p>\n<blockquote>\n<p>汉字内码可以保证数据在计算机内部的处理, 计算机发现高位为1时可判断出是汉字</p>\n</blockquote>\n<p>例: </p>\n<table>\n<thead>\n<tr>\n<th>汉字(十进制)</th>\n<th>区位码(十六进制)</th>\n<th>国标码(十六进制)</th>\n<th>汉字内码(十六进制)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>啊(16 01)</td>\n<td>10H 01H</td>\n<td>30H 21H</td>\n<td>B0H A1H</td>\n</tr>\n</tbody></table>\n<p>输入：输入编码</p>\n<blockquote>\n<p>拼音  a1 &#x3D;&gt; 国标码 &#x3D;&gt; 汉字内码</p>\n</blockquote>\n<p>输出：汉字字形码</p>\n<blockquote>\n<p>就是对应到一个字块的像素</p>\n</blockquote>\n<h4 id=\"2-3-3-字符串\"><a href=\"#2-3-3-字符串\" class=\"headerlink\" title=\"2.3.3. 字符串\"></a>2.3.3. 字符串</h4><ul>\n<li>从低地址到高地址逐个字符存储, 很多语言中,  ‘\\0’作为字符串结尾标识</li>\n<li>对于多字节的数据(如汉字),  可采取大&#x2F;小端存储模式</li>\n<li>大&#x2F;小端模式: 将数据的最高有效字节存放在低&#x2F;高地址单元中</li>\n</ul>\n<h3 id=\"2-4-奇偶校验\"><a href=\"#2-4-奇偶校验\" class=\"headerlink\" title=\"2.4. 奇偶校验\"></a>2.4. 奇偶校验</h3><h4 id=\"2-4-1-原理\"><a href=\"#2-4-1-原理\" class=\"headerlink\" title=\"2.4.1. 原理\"></a>2.4.1. 原理</h4><ul>\n<li><p>码字: 由若干位代码组成的一个字</p>\n</li>\n<li><p>将两个码字逐位进行对比,  具有不同的位的个数称为两个码字间的距离</p>\n</li>\n<li><p>码距(d): 一种编码方案可能有若干个合法码字,  各合法码字间的最小距离我称为码距</p>\n</li>\n<li><p>当d &#x3D; 1时, 无检错能力</p>\n</li>\n<li><p>当d &#x3D; 2时, 有检错能力</p>\n</li>\n<li><p>当d &#x3D; 3 时, 可能有检错、纠错能力</p>\n</li>\n</ul>\n<p>奇校验码: 整个校验码(有效信息位和校验位) 中的 1 个个数为奇数</p>\n<table>\n<thead>\n<tr>\n<th>奇&#x2F;偶 校验位</th>\n<th>信息位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1&#x2F;0</td>\n<td>n</td>\n</tr>\n</tbody></table>\n<p>偶校验硬件实现: </p>\n<ul>\n<li><p>计算校验位的值:  各信息进行异或运算, 得到的结果即为偶校验位</p>\n</li>\n<li><p>校验:  对所有位进行异或, 结果为1说明出错</p>\n</li>\n</ul>\n<h4 id=\"2-4-2-海明码\"><a href=\"#2-4-2-海明码\" class=\"headerlink\" title=\"2.4.2. 海明码\"></a>2.4.2. 海明码</h4><blockquote>\n<p>由于奇偶校验的策略仅加了一个比特位,  只能携带2种状态, 能发现数位错误,  但无法确定是哪一位出错</p>\n<p>海明码是在原数据中的一些固定位置，插入一个0（或1），以进行奇（或偶）校验位，虽然使原数据变长，但可使其拥有纠错能力。<br>能侦测并更正一个比特的错误；若有两个比特出错，则只能侦测，不能更正；若有三个或更多的比特出错，则不能侦测，更不能更正。</p>\n</blockquote>\n<p>海明码设计思路:  将信息位分组进行偶校验 &#x3D;&gt; 多个校验位 &#x3D;&gt; 多个校验位标注出错位置</p>\n<p>n个信息位  k个校验位  共 n+k 位  2^k种状态</p>\n<p>公式:  2^k^  &gt;&#x3D; n + k + 1</p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>1</th>\n<th>2-4</th>\n<th>5-11</th>\n<th>12-26</th>\n<th>27-57</th>\n<th>58-120</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p><strong>求解步骤</strong></p>\n<p>信息位： 1010</p>\n<ol>\n<li>确定海明码的位数：2^k^ &gt;&#x3D; n + k + 1</li>\n</ol>\n<p>n &#x3D; 4  一&gt; k &#x3D; 3</p>\n<p>设信息位D<del>4</del>D<del>3</del>D<del>2</del>D<del>1</del>(1010)，共4位，校验位P<del>1</del>P<del>2</del>P<del>3</del>,  共3位， 对应海明码为H<del>7</del>H<del>6</del>H<del>5</del>H<del>4</del>H<del>3</del>H<del>2</del>H<del>1</del>.</p>\n<ol start=\"2\">\n<li>确定校验位的分布</li>\n</ol>\n<blockquote>\n<p>校验位P<del>i</del> 放在海明码位号为2^i-1^的位置上，其余信息位顺序放</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>H<del>7</del></th>\n<th>H<del>6</del></th>\n<th>H<del>5</del></th>\n<th>H<del>4</del></th>\n<th>H<del>3</del></th>\n<th>H<del>2</del></th>\n<th>H<del>1</del></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D<del>4</del></td>\n<td>D<del>3</del></td>\n<td>D<del>2</del></td>\n<td>P<del>3</del></td>\n<td>D<del>1</del></td>\n<td>P<del>2</del></td>\n<td>P<del>1</del></td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>求校验位的值</li>\n</ol>\n<p>H<del>3</del>  :  3  转二进制  0   1   1</p>\n<p>H<del>5</del>  :  5     —&gt;&gt;&gt;    1   0   1</p>\n<p>H<del>6</del>  :  6     —&gt;&gt;&gt;    1   1   0</p>\n<p>H<del>7</del>   : 7      —&gt;&gt;&gt;   1   1   1</p>\n<blockquote>\n<p>根据P下标对应二进制位的权重进行分组</p>\n</blockquote>\n<p>​\t\tP1 对应二进制权重1的位置为1的信息位 H3 H5 H7 再根据对应信息位的值求异或得 0</p>\n<p>​\t\tP2 对应二进制权重2的位置为1的信息位 H3 H6 H7 再根据对应信息位的值求异或得 1</p>\n<p>​\t\tP3 对应二进制权重4的位置为1的信息位 H5 H6 H7  再根据对应信息位的值求异或得 0</p>\n<ol start=\"4\">\n<li>纠错</li>\n</ol>\n<blockquote>\n<p>校验方程：校验位及其对应分组值求异或  为0即无错误</p>\n</blockquote>\n<p>接收到：1010010 无错误</p>\n<p>接收到：1010000  H2位错误</p>\n<p>​\t\tS1 &#x3D;&gt; P1 H3 H5 H7  &#x3D;&gt; H1 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p>\n<p>​\t\tS2 &#x3D;&gt; P2 H3 H6 H7  &#x3D;&gt; H2 H3 H6 H7  &#x3D;&gt; 0001 &#x3D;&gt; 1</p>\n<p>​\t\tS3 &#x3D;&gt; P3 H3 H5 H7  &#x3D;&gt; H4 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p>\n<p>错误位即： 010 &#x3D;&gt; H2</p>\n<ol start=\"5\">\n<li>补充</li>\n</ol>\n<p>海明码的检错、纠错能力：1位可纠错， 2位可检错</p>\n<p>实际使用中会在头部再加一个全校验位H<del>8</del>（P<del>全</del>），对整体进行偶校验</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  &#x3D; 000 且全体偶校验成功  -&gt; 无错误</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验失败  -&gt; 1位错误，纠正即可</p>\n<p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验成功  -&gt; 2位错误，不可纠正，需重传</p>\n<h3 id=\"2-5-循环冗余校验\"><a href=\"#2-5-循环冗余校验\" class=\"headerlink\" title=\"2.5. 循环冗余校验\"></a>2.5. 循环冗余校验</h3><blockquote>\n<p>Cyclic Redundancy Check,  CRC</p>\n</blockquote>\n<h4 id=\"2-5-1-原理\"><a href=\"#2-5-1-原理\" class=\"headerlink\" title=\"2.5.1. 原理\"></a>2.5.1. 原理</h4><ol>\n<li><p>数据发送、接受方约定一个”除数“</p>\n</li>\n<li><p>K个信息位 + R个校验位 作为”被除数“， 添加校验位后需要保证除法的余数为0</p>\n</li>\n<li><p>收到数据后，进行除法检查余数是否为0</p>\n</li>\n<li><p>若余数为非0说明出错，则进行纠错或重传</p>\n</li>\n</ol>\n<h4 id=\"2-5-2-构造方法\"><a href=\"#2-5-2-构造方法\" class=\"headerlink\" title=\"2.5.2. 构造方法\"></a>2.5.2. 构造方法</h4><blockquote>\n<p>模二除：十进制除法基础上，每次上的值由被除数高为是否为1决定，1就上1，0就上0再加一位（模二除后余数位数应该正好比除数少1位）</p>\n<p>模二减：对应位取异或</p>\n</blockquote>\n<ol>\n<li>由生成多项式确定”除数”。若生成多项式中x的最高次为R，则”除数“有R+1位</li>\n<li>K个信息位 + R个0，作为”被除数“</li>\n<li>被除数、除数 进行”模二除“，得R位余数</li>\n<li>K个信息位 + R位余数 &#x3D; CRC码</li>\n</ol>\n<h4 id=\"2-5-3-检错纠错\"><a href=\"#2-5-3-检错纠错\" class=\"headerlink\" title=\"2.5.3. 检错纠错\"></a>2.5.3. 检错纠错</h4><ol>\n<li>可检测出所有奇数个错误</li>\n<li>可检测出所有双比特的错误</li>\n<li>可检测出所有小于等于校验位长度的连续错误</li>\n<li>若选择合适的生成多项式，且2^R^ &gt;&#x3D; K + R + 1，则可纠正单比特位错误</li>\n</ol>\n<h4 id=\"2-5-4-例\"><a href=\"#2-5-4-例\" class=\"headerlink\" title=\"2.5.4. 例\"></a>2.5.4. 例</h4><p>设生成多项式为G(x) &#x3D; x^3^ + x^2^ + 1, 信息码为101001，求对应的CRC码。</p>\n<ol>\n<li>确定K、R以及生成多项式对应的二进制码</li>\n</ol>\n<p>K&#x3D;信息码的长度：6</p>\n<p>R&#x3D;生成多项式最高次幂：3</p>\n<p>N(校验码位数) &#x3D; K + R &#x3D; 9</p>\n<p>生成多项式G(x) &#x3D; 1 * x^3^ + 1 * x^2^ + 0 * x^1^ + 1 * x^0^, 对应二进制码1101</p>\n<ol start=\"2\">\n<li>移位</li>\n</ol>\n<p>信息码左移R位，低位补0，对应二进制码 1101000</p>\n<ol start=\"3\">\n<li>相除（模二除）</li>\n</ol>\n<p>101001 000 模二除 1101 余数001，</p>\n<p>得CRC码 101001 001</p>\n<ol start=\"4\">\n<li>检错和纠错</li>\n</ol>\n<p>发送： 101001001</p>\n<p>接收： 101001001 用1101进行模二除 余数为000，代表没出错</p>\n<p>接收： 101001011 用1101进行模二除 余数为010，代表出错</p>\n<blockquote>\n<p>信息位+校验位 共9位，但校验位3位8保状态，无法表示全部所以才没纠错能力</p>\n</blockquote>\n<p>K个信息位，R个校验位，若生成多项式选择得当，且2^R^ &gt;&#x3D; K + R _+ 1, 则CRC码可纠正1位错</p>\n<blockquote>\n<p>CRC码实际常应用在计算机网络中，几千个bit的信息位 + 几个校验位， 仅用来检错，不用来纠错</p>\n</blockquote>\n<h3 id=\"2-6-定点数\"><a href=\"#2-6-定点数\" class=\"headerlink\" title=\"2.6. 定点数\"></a>2.6. 定点数</h3><blockquote>\n<p>定点数： 小数点的位置固定  995.222               –常规计数</p>\n<p>浮点数：小数点的位置不固定  9.95222 * 10^2^  –科学计数</p>\n<p>二进制和十进制的一样也是分为定点和浮点</p>\n</blockquote>\n<h4 id=\"2-6-1-无符号数\"><a href=\"#2-6-1-无符号数\" class=\"headerlink\" title=\"2.6.1. 无符号数\"></a>2.6.1. 无符号数</h4><ul>\n<li><p>概念：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。</p>\n</li>\n<li><p>表示范围：n位二进制数：0 ~ 2^n^ - 1 </p>\n</li>\n<li><p>通常只有无符号的整数，而没有无符号小数</p>\n</li>\n</ul>\n<h4 id=\"2-6-2-有符号数定点表示\"><a href=\"#2-6-2-有符号数定点表示\" class=\"headerlink\" title=\"2.6.2. 有符号数定点表示\"></a>2.6.2. 有符号数定点表示</h4><blockquote>\n<p>数值部分也称尾数</p>\n<p>用定点方式表示19.75时，需要把整数和小数部分分别单独保存</p>\n<p>可用原码、反码、补码三种方式来表示定点整数和定点小数。还可以用移码表示定点整数</p>\n<p>若真值为x，则用 [x]<del>原</del>、 [x]<del>反</del>、 [x]<del>补</del>、 [x]<del>移</del>、分别表示真值所对应的原码、反码、补码、移码</p>\n</blockquote>\n<ul>\n<li>定点整数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x0</th>\n<th>x1</th>\n<th>x2</th>\n<th>…</th>\n<th>xn</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>符号位</td>\n<td>数</td>\n<td>值</td>\n<td>部</td>\n<td>分</td>\n<td>小数点位置（隐含）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>定点小数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x0</th>\n<th></th>\n<th>x1</th>\n<th>x2</th>\n<th>…</th>\n<th>xn</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>符号位</td>\n<td>小数点位置（隐含）</td>\n<td>数</td>\n<td>值</td>\n<td>部</td>\n<td>分</td>\n</tr>\n</tbody></table>\n<p><strong>原码：用尾数表示真值的绝对值，符号位 0&#x2F;1 对应 正&#x2F;负</strong></p>\n<ul>\n<li>整数表示范围（机器字长n+1）：-(2^n^-1) &lt;&#x3D; x &lt;&#x3D; 2^n^-1<ul>\n<li>真值0有+0和-0两种形式</li>\n<li>8位表示整数+19：0 0010011</li>\n</ul>\n</li>\n<li>小数表示范围（机器字长n+1）： -(1-2^-n^) &lt;&#x3D; x &lt;&#x3D; 1-2^-n^<ul>\n<li>真值0有+0和-0两种形式</li>\n<li>8位表示小数-0.75： 1 110000</li>\n</ul>\n</li>\n</ul>\n<p><strong>反码：若符号位为0，则反码与原码相同；若符号位为1，则数值位全部取反</strong></p>\n<ul>\n<li>整数&#x2F;小数 表示范围和原码相同</li>\n</ul>\n<p><strong>补码：正数的补码与原码相同；负数的补码&#x3D;反码末位+1（要考虑进位）</strong></p>\n"},{"title":"Python AI从入门到放弃","date":"2023-06-30T03:14:42.000Z","_content":"\n## 1. 概述\n\n### 1.1. 人工智能起源\n\n- 图灵测试\n- 达特茅斯会议\n\n### 1.2. 人工智能三个阶段\n\n- 1980年代是正式成形期\n- 1990-2010年代是蓬勃发展期\n- 2012年之后是深度学习期\n\n### 1.3. 人工智能、机器学习和深度学习\n\n- 机器学习是人工智能的一个实现途径\n- 深度学习是机器学习的一个方法发展而来\n\n### 1.4. 主要分支\n\n- 计算机视觉 CV\n  - 人脸识别\n- 自然语言处理 NLP\n  - 语音识别\n  - 语义识别\n- 机器人\n\n### 1.5. 人工智能必备三要素\n\n- 数据\n- 算法\n- 计算力\n\n### 1.6. GPU、CPU\n\n- GPU -- 计算密集型\n- CPU  --  IO密集型\n\n## 2. 机器学习\n\n### 2.1. 工作流程\n\n1. 数据获取\n\n数据类型构成\n- 特征值 + 目标值（目标值分为离散还是连续）\n- 仅有特征值，无目标值\n\n数据划分\n\n- 训练集 0.7~0.8\n- 测试集 0.2~0.3\n\n2. 数据基本处理\n\n> 对数据进行缺失值、去除异常值等处理\n\n3. 特征工程\n\n> 把数据转换为机器更容易识别的数据\n>\n> 数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已\n\n- 特征提取\n- 特征预处理\n- 特征降维\n\n4. 机器学习（模型训练）\n\n> 选择合适的算法对模型进行训练\n\n5.  模型评估\n\n> 对训练好的模型进行评估\n\n### 2.2. 机器学习算法分类\n\n- 监督学习：有特征值，有目标值\n  - 目标值连续：回归\n  - 目标值离散：分类\n- 无监督学习：仅有特征值\n- 半监督学习：有特征值，但一部分数据有目标值 ，一部分没有\n- 强化学习：即自动进行决策，并可以做连续决策\n  - 动态过程，上一步的输出是下一步的输入\n  - 四要素：agent, action, environment, reward\n\n### 2.3. 模型评估\n\n- 分类模型评估\n\n  - 准确率：预测正确的数占样本总数的比例\n  - 精确率：预测为正的数占全部预测为正的比例\n  - 召回率： 预测为正占全部正样本的比例\n  - F1-score：主要用于评估模型的稳健性\n  - AUC指标：主要用于评估样本不均衡的情况\n\n- 回归模型评估\n\n  > p = predicted target\n  >\n  > a = actual target\n\n  - 均方根误差(Root Mean Squared Error, RMSE)\n  - 相对平方误差(Relative Squared Error, RSE)\n  - 平均绝对误差(Mean Absolute Error, MAE)\n  - 相对绝对误差(Relative Absolute Error, RAE)\n  - 决定系数(Coefficient of Determination)\n\n- 拟合度（评估结果）\n\n  - 欠拟合：学习到的特征太少（有两个眼睛的就是人）\n  - 过拟合：学习到的特征太多（仅黄皮肤的才是人）\n\n## 3. 机器学习环境配置\n\n### 3.1. 环境安装\n\n- 创建虚拟环境： `conda create --name=ai0 python=3.10`\n- 安装相关包：\n  - matplotlib==2.2.2\n  - numpy==1.14.2\n  - pandas==0.20.3\n  - tables==3.4.2\n  - jupyter=1.0.0\n- 先从cmd进入指定目录后执行`jupyter notebook`\n\n### 3.2. jupyter基操\n\n> 类似vim, 分不同的输入模式，命令也和vim基本相同\n\n- 两种模式通用快捷键\n  - `Shift + Enter`  执行本单元代码，跳转到下一单元\n  - `Ctrl + Enter` 执行本单元代码，留在本单元\n- **命令模式**：按 `ESC`  进入\n  - `Y`, cell 切换到Code模式\n  - `M`, cell 切换到Markdown模式\n  - `A`, 在当前cell上面添加cell\n  - `B`, 在当前cell下面添加cell\n  - `DD`, 删除当前cell\n  - `Z`, 回退\n  - `L`, 为当前cell加上行号<!--\n  - `Ctrl+Shift+P`, 对话框输入命令直接运行\n  - `Ctrl+Home`, 跳转到首个cell\n  - `Ctrl+End`, 跳转到末个cell\n  - `Shift + M` 合并下面的cell\n- **编辑模式**: 按 `Enter` 进入\n  - `Ctrl + 点击`, 多光标操作\n  - `Ctrl + Z`, 回退\n  - `Ctrl + Y`, 重做\n  - `TAB`,  代码补全\n  - `Ctrl + /` 注释/取消注释\n  - `代码后 + ;`  屏蔽输出\n\n## 4. Matplotlib\n\n> 用于开发2D、3D图表\n>\n> 使用简单，以渐进、交互式实现数据可视化\n\n### 4.1. 三层结构\n\n- **容器层**\n  - Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具\n  - Figure: `Canvas`上第一层，充当画布角色 \n  - Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色\n    - Axes: 坐标系，数据的绘图区域\n    - Axis: 坐标轴\n- **辅助显示层**：为Axes内除了根据数据绘制出的图像以外的内容，主要包括`facecolor(Axes外观)`、`spines(边框线)`、`axis(坐标轴)` 、`axix lable(坐标轴名称)`、`tick(坐标轴刻度)`、`tick lable(坐标轴刻度标签)`、`gird(网格线)`、`legend(图例)`、`title(标题)`等\n- **图像层**：指`Axes`内通过 `plot`, `scatter`, `histogram`, `pie`等函数根据数据绘制出的图像。\n\n### 4.2. 折线图与基操\n\n> `help(plt.figure)` 查看命令帮助\n>\n> 负号报错 plt.rcParams[\"axes.unicode_minus\"]=False 加这句\n>\n> 中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib/mpl-data/matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置\n>\n> 报错`missing from current font`，加以下代码\n>\n> `from pylab import mpl\n> mpl.rcParams['font.sans-serif'] = ['SimHei']`\n\n**Hello World**\n\n```python\nimport matplotlib.pyplot as plt\n\n# 1.创建画布\nplt.figure()\n\n# 2.图像绘制\nx = [i for i in range(1, 6)]\ny = [i for i in range(3, 8)]\nplt.plot(x, y)\n\n# 2.1. 图像保存, 要放到show前\nplt.savefig()\n\n# 3.显示图像\nplt.show()\n\n```\n\n**基操**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\nplt.figure(figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\nplt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\nplt.plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\nplt.yticks(y_ticks[::5])\nplt.xticks(x[::5], x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\nplt.grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\nplt.xlabel(\"时间\")\nplt.ylabel(\"温度\")\nplt.title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\nplt.legend()\n\n# 3. 图像显示\nplt.show()\n```\n\n**多个坐标系图像显示**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 多个坐标系显示图像\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\n# plt.figure(figsize=(20, 8), dpi=100)\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\n# plt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\n# plt.plot(x, y_shanghai, label=\"上海\")\naxes[0].plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\naxes[1].plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\n# plt.yticks(y_ticks[::5])\n# plt.xticks(x[::5], x_ticks_labels[::5])\n\naxes[0].set_xticks(x[::5])\naxes[0].set_yticks(y_ticks[::5])\naxes[0].set_xticklabels(x_ticks_labels[::5])\n\naxes[1].set_xticks(x[::5])\naxes[1].set_yticks(y_ticks[::5])\naxes[1].set_xticklabels(x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\n# plt.grid(True, linestyle=\"-\", alpha=1)\naxes[0].grid(True, linestyle=\"-\", alpha=1)\naxes[1].grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\n# plt.xlabel(\"时间\")\n# plt.ylabel(\"温度\")\n# plt.title(\"中午11：00到12：00温度变化\")\n\naxes[0].set_xlabel(\"时间\")\naxes[0].set_ylabel(\"温度\")\naxes[0].set_title(\"中午11：00到12：00温度变化\")\n\naxes[1].set_xlabel(\"时间\")\naxes[1].set_ylabel(\"温度\")\naxes[1].set_title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\n# plt.legend(loc=0)\n\naxes[0].legend(loc=0)\naxes[1].legend(loc=0)\n\n# 3. 图像显示\nplt.show()\n```\n\n## 5. Numpy\n\n### 5.1. 基础\n\n**定义：**\n\n- Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组\n- Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多\n- Numpy使用`ndarray`对象来处理多维数组，该对象是一个快速而灵活的大数据容器\n\n**优势：**\n\n- 内存块风格：`ndarray`在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快\n  - 原因：`ndarray`中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以`ndarray`在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素\n\n- 并行化运算：向量化运算\n- Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码\n\n```python\nimport time\nimport random\nimport numpy as np\n\n# 创建\nscore = np.array([random.sample(range(0, 100), 5) for i in  range(8)]) \nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\n\n# 效率对比\na = [random.random() for _ in range(1000_0000)]\n\n# %time 魔法方法，查看当前行代码运行耗时情况 \n# cpu times CPU执行耗时, wall time 总耗时\n%time sum1 = sum(a)\n\nb = np.array(a)\n\n%time sum2 = np.sum(b)\n\"\"\"\nCPU times: total: 31.2 ms\nWall time: 31.9 ms\nCPU times: total: 15.6 ms\nWall time: 9.97 ms\n\"\"\"\n```\n\n**常用属性：**\n\n```python\nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\nscore.shape  # (8, 5)\nscore.ndim  # 2  数组维度(也就是有几层[])\nscore.size  # 40\nscore.itemsize  # 4 每个元素占字节长度\nscore.dtype  # dtype('int32')\n\n# 设置ndarray类型\na = np.array([[1, 2, 3], [2, 3, 4]], dtype=np.float32)\na.dtype  # dtype('float32')\n```\n\n#### 5.1.1.  生成数组\n\n```python\n# 0/1数组\nnp.ones([3, 4])\n\"\"\"\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\"\"\"\n\nnp.zeros([3, 4])\n\"\"\"\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\"\"\"\n\n# 从现有数组创建数组\na = np.array([[1,2,3], [4,5,6]])\n\na1 = np.array(a)  # 深拷贝\n\na2 = np.asarray(a)  # 浅拷贝\n\n# 生成固定范围数组\nnp.linespace(0, 100, 11)  # 等间隔生成11个\n# array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])\n\nnp.aragne(10, 50, 2)  # 步长2来生成\n# array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n\n```\n\n**生成随机数组**\n\n- 生成均匀分布：`np.random.uniform(low, high, size)`\n\n- 正态分布\n  - 均值：平均值\n  - 标准差：方差开根号\n  - 生成标准正态分布：`np.random.normal(low, high, size)`\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 均匀分布\nx = np.random.uniform(1, 10, 1000_0000)  # 准备数据\nplt.figure(figsize=(20, 8), dpi=100)  # 画布\nplt.hist(x, bins=1000)  # 绘制 x代表要使用的数据， bins表示要划分的区间数\nplt.show()  # 显示\n\n# 正态分布\nx = np.random.normal(1.75, 1, 1000_0000)\nplt.figure(figsize=(20, 8), dpi=100)\nplt.hist(x, bins=1000)\nplt.show()\n```\n\n#### 5.1.2. 数组索引、切片\n\n- 直接索引，先对行进行索引，再对列进行索引\n- 高维度索引，从宏观到微观\n\n```python\na = np.random.normal(0, 1, (8, 10))  # 8rows, 10cols\na[0:2, 0:3]  # 前两行，前三列\n\na = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\na[0, 0, 0]  # 1\na[1, 0, 0]  # 7\na[1, 1, 2]  # 12\n\n```\n\n#### 5.1.3. 形状修改\n\n- `.reshape([rows, cols])` 不进行行列互换，产生新变量\n\n- `.resize([rows, cols])` 进行行列互换，对原值 进行更改\n\n- `.T` 行列互换\n\n#### 5.1.4. 类型修改\n\n- `.astype(np.int32)` \n- `.tobytes()`\n\n- `np.unique(nparray)`  去重\n\n  ```python\n  arr = np.array([[1, 2, 3, 3, 3], [2, 3, 4,4 , 5]])\n  np.unique(arr)\n  # array([1, 2, 3, 4, 5])\n  ```\n\n#### 5.1.5 运算\n\n```python\nimport numpy as np\n\n# 逻辑运算\na = np.random.normal(0, 1, (8, 10))\na > 1  # 全部数据进行此运算，结果赋值为 True/False\na[a > 1] = 2  # 全部数据 >1 赋值为 2\n\n# 通用判断函数,和python的all和any一样\nb = a[0:2, 0:5]  # 切为2行5列\nnp.all(b > 0)  # False\nnp.any(b > 0)  # True\n\n# 三元运算\nnp.where(b > 0, 1, 0)  # array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])\n\nnp.where(np.logical_and(b > -0.5, b < 0.5), 1, 0)  # array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])\n\nnp.where(np.logical_or(b > -0.5, b < 0.5), 1, 0)  # array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n# 统计运算\nmin\nmax\nmedian\nmean\nstd 标准差\nvar  方差\nargmax  最大值下标\nargmin  \n```\n\n### 5.2. 矩阵\n\n- 矩阵：二维数组\n  - 向量：一维数组\n- 加法：对应位置相加\n- 标量乘法：标量和每个位置元素相乘\n- 矩阵乘法：[M行，N列] * [N行，L列] = [M行，L列]\n  - 满足结合律，不满足交换律\n- 单位矩阵：对角线为1，其他位置为0的矩阵\n- 逆：A * B = 单位矩阵，A和B互为逆矩阵\n- 转置T：行列互换\n\n### 5.3. 数组间运算\n\n- 数组和数字：可以直接运算\n\n- 数组和数组：广播机制\n  - 维度相同\n  - shape对应位置为1\n\n```python\nimport numpy as np\n\n# 数组运算\narr1 = np.array([[1, 2, 3], [2, 3, 4]])  # 2，3\narr2 = np.array([[2], [1]])  # 2， 1  \n\narr1 + arr2  # 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])\n\n# 矩阵乘法\na = np.array([[1, 2], [2, 3], [3, 4]])\nb = np.array([[3], [2]])\n\n# 矩阵乘\nnp.matmul(a, b)  # 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])\n\n# 点乘\nnp.dot(2, b)  # array([[6], [4]])\n```\n\n## 6. Pandas\n\n- 封装了Numpy 和 matplotlib\n- 便捷的数据处理，展示能力\n\n```python\nimport pandas as pd\nimport numpy as np\n\na = np.random.normal(0, 1, (10, 5))\n\na_shape = pd.DataFrame(a).shape  # (10, 5)\n\nrow_index = [f\"第{i+1}行\" for i in range(a_shape[0])]\ncolumn_name = pd.date_range(start=\"20230713\", periods=a_shape[1], freq=\"B\")  # freq:B 工作日 DatetimeIndex(['2023-07-13', '2023-07-14', '2023-07-17', '2023-07-18','2023-07-19'], dtype='datetime64[ns]', freq='B')\n\nb = pd.DataFrame(a, index=row_index, columns=column_name)  # 设置行索引, 列名\n\nb.shape  # 形状\nb.index  # 行索引\nb.columns  # 列名\nb.values  # array\nb.T  # 转置\nb.head()  # 前5行\nb.tail()  # 后5行\n\n\n# 重设索引\nb.index = row_index\nc = b.reset_index(drop=False)  # 默认drop=False不删除原索引，增加index列 值为原索引\n\n# 设置某列为索引，可设置多列\nc.set_index(keys=[\"index\"])  \n\n```\n\n## 7. K-近邻算法\n\n> 根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)\n>\n> - \n\n### 7.1. Scikit-learn\n\n> Classification  分类\n>\n> Regression  回归\n>\n> Clustering  聚类\n>\n> Dimensionality reduction 维度缩小\n>\n> Model selection  模型选择\n>\n> Preprocessing  特征预处理\n\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# 获取数据\nx = [[1], [2], [0], [0]]\ny = [1, 1, 0, 0]\n\n# machine learning\n# 1. 实例化一个训练模型\nestimator = KNeighborsClassifier(n_neighbors=2)  # 选定几个参考数据\n\n# 2. 调用fit方法进行训练\nestimator.fit(x, y)\n\n# 预测其他值\nprint(estimator.predict([[-1]]))\n\n```\n\n### 7.2. 距离度量\n\n欧式距离：差平方开根号\n\n曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)\n\n- d = |x1 - x2| + |y1 - y2|\n\n切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)\n\n闵可夫斯基距离(Minkowski Distance): \n$$\nd_{12} = p\\sqrt{\\sum_{k=1}^n|x_{1k} - x_{2k}|^p}\n$$\n\n- 当p=1, 为曼哈顿距离\n- 当p=2，为欧氏距离\n- 当p$\\to\\infty$， 为切比雪夫距离\n\n标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)\n\n- 既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：\n\n$$\nd_{12} = \\sqrt{\\sum_{k=1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}\n$$\n\n余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异\n\n汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计\n\n杰卡德距离(Jaccard Distance): 通过交并集进行统计\n\n马氏距离(Mahalanobis Distance): 通过样本分布进行计算\n\n### 7.3. K值选择\n\n过小：容易受到异常点的影响，容易过拟合\n\n过大：受到样本均衡的问题，容易欠拟合\n\n### 7.4. KD树\n\n\n\n\n\n## 8. 线性回归\n\n\n\n## 9. 逻辑回归\n\n\n\n## 10. 决策树算法\n\n\n\n\n\n## 11. 集成学习\n\n\n\n\n\n## 12. 聚类算法\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/人工智能基础.md","raw":"---\ntitle: Python AI从入门到放弃\ndate: 2023-06-30 11:14:42\ntags: machine-learning\n---\n\n## 1. 概述\n\n### 1.1. 人工智能起源\n\n- 图灵测试\n- 达特茅斯会议\n\n### 1.2. 人工智能三个阶段\n\n- 1980年代是正式成形期\n- 1990-2010年代是蓬勃发展期\n- 2012年之后是深度学习期\n\n### 1.3. 人工智能、机器学习和深度学习\n\n- 机器学习是人工智能的一个实现途径\n- 深度学习是机器学习的一个方法发展而来\n\n### 1.4. 主要分支\n\n- 计算机视觉 CV\n  - 人脸识别\n- 自然语言处理 NLP\n  - 语音识别\n  - 语义识别\n- 机器人\n\n### 1.5. 人工智能必备三要素\n\n- 数据\n- 算法\n- 计算力\n\n### 1.6. GPU、CPU\n\n- GPU -- 计算密集型\n- CPU  --  IO密集型\n\n## 2. 机器学习\n\n### 2.1. 工作流程\n\n1. 数据获取\n\n数据类型构成\n- 特征值 + 目标值（目标值分为离散还是连续）\n- 仅有特征值，无目标值\n\n数据划分\n\n- 训练集 0.7~0.8\n- 测试集 0.2~0.3\n\n2. 数据基本处理\n\n> 对数据进行缺失值、去除异常值等处理\n\n3. 特征工程\n\n> 把数据转换为机器更容易识别的数据\n>\n> 数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已\n\n- 特征提取\n- 特征预处理\n- 特征降维\n\n4. 机器学习（模型训练）\n\n> 选择合适的算法对模型进行训练\n\n5.  模型评估\n\n> 对训练好的模型进行评估\n\n### 2.2. 机器学习算法分类\n\n- 监督学习：有特征值，有目标值\n  - 目标值连续：回归\n  - 目标值离散：分类\n- 无监督学习：仅有特征值\n- 半监督学习：有特征值，但一部分数据有目标值 ，一部分没有\n- 强化学习：即自动进行决策，并可以做连续决策\n  - 动态过程，上一步的输出是下一步的输入\n  - 四要素：agent, action, environment, reward\n\n### 2.3. 模型评估\n\n- 分类模型评估\n\n  - 准确率：预测正确的数占样本总数的比例\n  - 精确率：预测为正的数占全部预测为正的比例\n  - 召回率： 预测为正占全部正样本的比例\n  - F1-score：主要用于评估模型的稳健性\n  - AUC指标：主要用于评估样本不均衡的情况\n\n- 回归模型评估\n\n  > p = predicted target\n  >\n  > a = actual target\n\n  - 均方根误差(Root Mean Squared Error, RMSE)\n  - 相对平方误差(Relative Squared Error, RSE)\n  - 平均绝对误差(Mean Absolute Error, MAE)\n  - 相对绝对误差(Relative Absolute Error, RAE)\n  - 决定系数(Coefficient of Determination)\n\n- 拟合度（评估结果）\n\n  - 欠拟合：学习到的特征太少（有两个眼睛的就是人）\n  - 过拟合：学习到的特征太多（仅黄皮肤的才是人）\n\n## 3. 机器学习环境配置\n\n### 3.1. 环境安装\n\n- 创建虚拟环境： `conda create --name=ai0 python=3.10`\n- 安装相关包：\n  - matplotlib==2.2.2\n  - numpy==1.14.2\n  - pandas==0.20.3\n  - tables==3.4.2\n  - jupyter=1.0.0\n- 先从cmd进入指定目录后执行`jupyter notebook`\n\n### 3.2. jupyter基操\n\n> 类似vim, 分不同的输入模式，命令也和vim基本相同\n\n- 两种模式通用快捷键\n  - `Shift + Enter`  执行本单元代码，跳转到下一单元\n  - `Ctrl + Enter` 执行本单元代码，留在本单元\n- **命令模式**：按 `ESC`  进入\n  - `Y`, cell 切换到Code模式\n  - `M`, cell 切换到Markdown模式\n  - `A`, 在当前cell上面添加cell\n  - `B`, 在当前cell下面添加cell\n  - `DD`, 删除当前cell\n  - `Z`, 回退\n  - `L`, 为当前cell加上行号<!--\n  - `Ctrl+Shift+P`, 对话框输入命令直接运行\n  - `Ctrl+Home`, 跳转到首个cell\n  - `Ctrl+End`, 跳转到末个cell\n  - `Shift + M` 合并下面的cell\n- **编辑模式**: 按 `Enter` 进入\n  - `Ctrl + 点击`, 多光标操作\n  - `Ctrl + Z`, 回退\n  - `Ctrl + Y`, 重做\n  - `TAB`,  代码补全\n  - `Ctrl + /` 注释/取消注释\n  - `代码后 + ;`  屏蔽输出\n\n## 4. Matplotlib\n\n> 用于开发2D、3D图表\n>\n> 使用简单，以渐进、交互式实现数据可视化\n\n### 4.1. 三层结构\n\n- **容器层**\n  - Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具\n  - Figure: `Canvas`上第一层，充当画布角色 \n  - Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色\n    - Axes: 坐标系，数据的绘图区域\n    - Axis: 坐标轴\n- **辅助显示层**：为Axes内除了根据数据绘制出的图像以外的内容，主要包括`facecolor(Axes外观)`、`spines(边框线)`、`axis(坐标轴)` 、`axix lable(坐标轴名称)`、`tick(坐标轴刻度)`、`tick lable(坐标轴刻度标签)`、`gird(网格线)`、`legend(图例)`、`title(标题)`等\n- **图像层**：指`Axes`内通过 `plot`, `scatter`, `histogram`, `pie`等函数根据数据绘制出的图像。\n\n### 4.2. 折线图与基操\n\n> `help(plt.figure)` 查看命令帮助\n>\n> 负号报错 plt.rcParams[\"axes.unicode_minus\"]=False 加这句\n>\n> 中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib/mpl-data/matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置\n>\n> 报错`missing from current font`，加以下代码\n>\n> `from pylab import mpl\n> mpl.rcParams['font.sans-serif'] = ['SimHei']`\n\n**Hello World**\n\n```python\nimport matplotlib.pyplot as plt\n\n# 1.创建画布\nplt.figure()\n\n# 2.图像绘制\nx = [i for i in range(1, 6)]\ny = [i for i in range(3, 8)]\nplt.plot(x, y)\n\n# 2.1. 图像保存, 要放到show前\nplt.savefig()\n\n# 3.显示图像\nplt.show()\n\n```\n\n**基操**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\nplt.figure(figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\nplt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\nplt.plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\nplt.yticks(y_ticks[::5])\nplt.xticks(x[::5], x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\nplt.grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\nplt.xlabel(\"时间\")\nplt.ylabel(\"温度\")\nplt.title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\nplt.legend()\n\n# 3. 图像显示\nplt.show()\n```\n\n**多个坐标系图像显示**\n\n```python\nimport random\nimport matplotlib.pyplot as plt\n\n# 多个坐标系显示图像\n# 0.生成数据\nx = range(60)\ny_peking = [random.uniform(10, 15) for i in x]\ny_shanghai = [random.uniform(15, 25) for i in x]\n\n# 1. 创建画布\n# plt.figure(figsize=(20, 8), dpi=100)\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)\n\n# 2.图形绘制\n# plt.plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\n# plt.plot(x, y_shanghai, label=\"上海\")\naxes[0].plot(x, y_peking, color=\"r\", label=\"北京\", linestyle=\"dashed\")\naxes[1].plot(x, y_shanghai, label=\"上海\")\n\n# 2.1. 添加x,y刻度\nx_ticks_labels = [f\"11点{i}\" for i in x]\ny_ticks = range(40)\n\n# plt.yticks(y_ticks[::5])\n# plt.xticks(x[::5], x_ticks_labels[::5])\n\naxes[0].set_xticks(x[::5])\naxes[0].set_yticks(y_ticks[::5])\naxes[0].set_xticklabels(x_ticks_labels[::5])\n\naxes[1].set_xticks(x[::5])\naxes[1].set_yticks(y_ticks[::5])\naxes[1].set_xticklabels(x_ticks_labels[::5])\n\n# 2.2. 添加网络信息\n# 参数：linestyle: 绘制网格的方式，alpha:透明度\n# plt.grid(True, linestyle=\"-\", alpha=1)\naxes[0].grid(True, linestyle=\"-\", alpha=1)\naxes[1].grid(True, linestyle=\"-\", alpha=1)\n\n# 2.3. 添加描述\n# plt.xlabel(\"时间\")\n# plt.ylabel(\"温度\")\n# plt.title(\"中午11：00到12：00温度变化\")\n\naxes[0].set_xlabel(\"时间\")\naxes[0].set_ylabel(\"温度\")\naxes[0].set_title(\"中午11：00到12：00温度变化\")\n\naxes[1].set_xlabel(\"时间\")\naxes[1].set_ylabel(\"温度\")\naxes[1].set_title(\"中午11：00到12：00温度变化\")\n\n# 2.4. 显示图例, 需要在显示前声明plot里面的值\n# plt.legend(loc=0)\n\naxes[0].legend(loc=0)\naxes[1].legend(loc=0)\n\n# 3. 图像显示\nplt.show()\n```\n\n## 5. Numpy\n\n### 5.1. 基础\n\n**定义：**\n\n- Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组\n- Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多\n- Numpy使用`ndarray`对象来处理多维数组，该对象是一个快速而灵活的大数据容器\n\n**优势：**\n\n- 内存块风格：`ndarray`在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快\n  - 原因：`ndarray`中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以`ndarray`在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素\n\n- 并行化运算：向量化运算\n- Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码\n\n```python\nimport time\nimport random\nimport numpy as np\n\n# 创建\nscore = np.array([random.sample(range(0, 100), 5) for i in  range(8)]) \nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\n\n# 效率对比\na = [random.random() for _ in range(1000_0000)]\n\n# %time 魔法方法，查看当前行代码运行耗时情况 \n# cpu times CPU执行耗时, wall time 总耗时\n%time sum1 = sum(a)\n\nb = np.array(a)\n\n%time sum2 = np.sum(b)\n\"\"\"\nCPU times: total: 31.2 ms\nWall time: 31.9 ms\nCPU times: total: 15.6 ms\nWall time: 9.97 ms\n\"\"\"\n```\n\n**常用属性：**\n\n```python\nscore\n\"\"\"\narray([[41, 11,  1, 56, 40],\n       [30, 29, 38, 62, 68],\n       [75, 38, 76, 45,  2],\n       [63, 84, 68, 26, 60],\n       [45, 48, 58, 33, 21],\n       [ 1, 74, 44, 19, 97],\n       [15, 73, 63, 82, 95],\n       [20, 73, 15,  8, 93]])\n\"\"\"\nscore.shape  # (8, 5)\nscore.ndim  # 2  数组维度(也就是有几层[])\nscore.size  # 40\nscore.itemsize  # 4 每个元素占字节长度\nscore.dtype  # dtype('int32')\n\n# 设置ndarray类型\na = np.array([[1, 2, 3], [2, 3, 4]], dtype=np.float32)\na.dtype  # dtype('float32')\n```\n\n#### 5.1.1.  生成数组\n\n```python\n# 0/1数组\nnp.ones([3, 4])\n\"\"\"\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\"\"\"\n\nnp.zeros([3, 4])\n\"\"\"\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\"\"\"\n\n# 从现有数组创建数组\na = np.array([[1,2,3], [4,5,6]])\n\na1 = np.array(a)  # 深拷贝\n\na2 = np.asarray(a)  # 浅拷贝\n\n# 生成固定范围数组\nnp.linespace(0, 100, 11)  # 等间隔生成11个\n# array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])\n\nnp.aragne(10, 50, 2)  # 步长2来生成\n# array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n\n```\n\n**生成随机数组**\n\n- 生成均匀分布：`np.random.uniform(low, high, size)`\n\n- 正态分布\n  - 均值：平均值\n  - 标准差：方差开根号\n  - 生成标准正态分布：`np.random.normal(low, high, size)`\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 均匀分布\nx = np.random.uniform(1, 10, 1000_0000)  # 准备数据\nplt.figure(figsize=(20, 8), dpi=100)  # 画布\nplt.hist(x, bins=1000)  # 绘制 x代表要使用的数据， bins表示要划分的区间数\nplt.show()  # 显示\n\n# 正态分布\nx = np.random.normal(1.75, 1, 1000_0000)\nplt.figure(figsize=(20, 8), dpi=100)\nplt.hist(x, bins=1000)\nplt.show()\n```\n\n#### 5.1.2. 数组索引、切片\n\n- 直接索引，先对行进行索引，再对列进行索引\n- 高维度索引，从宏观到微观\n\n```python\na = np.random.normal(0, 1, (8, 10))  # 8rows, 10cols\na[0:2, 0:3]  # 前两行，前三列\n\na = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\na[0, 0, 0]  # 1\na[1, 0, 0]  # 7\na[1, 1, 2]  # 12\n\n```\n\n#### 5.1.3. 形状修改\n\n- `.reshape([rows, cols])` 不进行行列互换，产生新变量\n\n- `.resize([rows, cols])` 进行行列互换，对原值 进行更改\n\n- `.T` 行列互换\n\n#### 5.1.4. 类型修改\n\n- `.astype(np.int32)` \n- `.tobytes()`\n\n- `np.unique(nparray)`  去重\n\n  ```python\n  arr = np.array([[1, 2, 3, 3, 3], [2, 3, 4,4 , 5]])\n  np.unique(arr)\n  # array([1, 2, 3, 4, 5])\n  ```\n\n#### 5.1.5 运算\n\n```python\nimport numpy as np\n\n# 逻辑运算\na = np.random.normal(0, 1, (8, 10))\na > 1  # 全部数据进行此运算，结果赋值为 True/False\na[a > 1] = 2  # 全部数据 >1 赋值为 2\n\n# 通用判断函数,和python的all和any一样\nb = a[0:2, 0:5]  # 切为2行5列\nnp.all(b > 0)  # False\nnp.any(b > 0)  # True\n\n# 三元运算\nnp.where(b > 0, 1, 0)  # array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])\n\nnp.where(np.logical_and(b > -0.5, b < 0.5), 1, 0)  # array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])\n\nnp.where(np.logical_or(b > -0.5, b < 0.5), 1, 0)  # array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n# 统计运算\nmin\nmax\nmedian\nmean\nstd 标准差\nvar  方差\nargmax  最大值下标\nargmin  \n```\n\n### 5.2. 矩阵\n\n- 矩阵：二维数组\n  - 向量：一维数组\n- 加法：对应位置相加\n- 标量乘法：标量和每个位置元素相乘\n- 矩阵乘法：[M行，N列] * [N行，L列] = [M行，L列]\n  - 满足结合律，不满足交换律\n- 单位矩阵：对角线为1，其他位置为0的矩阵\n- 逆：A * B = 单位矩阵，A和B互为逆矩阵\n- 转置T：行列互换\n\n### 5.3. 数组间运算\n\n- 数组和数字：可以直接运算\n\n- 数组和数组：广播机制\n  - 维度相同\n  - shape对应位置为1\n\n```python\nimport numpy as np\n\n# 数组运算\narr1 = np.array([[1, 2, 3], [2, 3, 4]])  # 2，3\narr2 = np.array([[2], [1]])  # 2， 1  \n\narr1 + arr2  # 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])\n\n# 矩阵乘法\na = np.array([[1, 2], [2, 3], [3, 4]])\nb = np.array([[3], [2]])\n\n# 矩阵乘\nnp.matmul(a, b)  # 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])\n\n# 点乘\nnp.dot(2, b)  # array([[6], [4]])\n```\n\n## 6. Pandas\n\n- 封装了Numpy 和 matplotlib\n- 便捷的数据处理，展示能力\n\n```python\nimport pandas as pd\nimport numpy as np\n\na = np.random.normal(0, 1, (10, 5))\n\na_shape = pd.DataFrame(a).shape  # (10, 5)\n\nrow_index = [f\"第{i+1}行\" for i in range(a_shape[0])]\ncolumn_name = pd.date_range(start=\"20230713\", periods=a_shape[1], freq=\"B\")  # freq:B 工作日 DatetimeIndex(['2023-07-13', '2023-07-14', '2023-07-17', '2023-07-18','2023-07-19'], dtype='datetime64[ns]', freq='B')\n\nb = pd.DataFrame(a, index=row_index, columns=column_name)  # 设置行索引, 列名\n\nb.shape  # 形状\nb.index  # 行索引\nb.columns  # 列名\nb.values  # array\nb.T  # 转置\nb.head()  # 前5行\nb.tail()  # 后5行\n\n\n# 重设索引\nb.index = row_index\nc = b.reset_index(drop=False)  # 默认drop=False不删除原索引，增加index列 值为原索引\n\n# 设置某列为索引，可设置多列\nc.set_index(keys=[\"index\"])  \n\n```\n\n## 7. K-近邻算法\n\n> 根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)\n>\n> - \n\n### 7.1. Scikit-learn\n\n> Classification  分类\n>\n> Regression  回归\n>\n> Clustering  聚类\n>\n> Dimensionality reduction 维度缩小\n>\n> Model selection  模型选择\n>\n> Preprocessing  特征预处理\n\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# 获取数据\nx = [[1], [2], [0], [0]]\ny = [1, 1, 0, 0]\n\n# machine learning\n# 1. 实例化一个训练模型\nestimator = KNeighborsClassifier(n_neighbors=2)  # 选定几个参考数据\n\n# 2. 调用fit方法进行训练\nestimator.fit(x, y)\n\n# 预测其他值\nprint(estimator.predict([[-1]]))\n\n```\n\n### 7.2. 距离度量\n\n欧式距离：差平方开根号\n\n曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)\n\n- d = |x1 - x2| + |y1 - y2|\n\n切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)\n\n闵可夫斯基距离(Minkowski Distance): \n$$\nd_{12} = p\\sqrt{\\sum_{k=1}^n|x_{1k} - x_{2k}|^p}\n$$\n\n- 当p=1, 为曼哈顿距离\n- 当p=2，为欧氏距离\n- 当p$\\to\\infty$， 为切比雪夫距离\n\n标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)\n\n- 既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：\n\n$$\nd_{12} = \\sqrt{\\sum_{k=1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}\n$$\n\n余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异\n\n汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计\n\n杰卡德距离(Jaccard Distance): 通过交并集进行统计\n\n马氏距离(Mahalanobis Distance): 通过样本分布进行计算\n\n### 7.3. K值选择\n\n过小：容易受到异常点的影响，容易过拟合\n\n过大：受到样本均衡的问题，容易欠拟合\n\n### 7.4. KD树\n\n\n\n\n\n## 8. 线性回归\n\n\n\n## 9. 逻辑回归\n\n\n\n## 10. 决策树算法\n\n\n\n\n\n## 11. 集成学习\n\n\n\n\n\n## 12. 聚类算法\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"人工智能基础","published":1,"updated":"2024-05-23T07:36:15.204Z","_id":"clwixvn0c0000csuh51y5cnvo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-人工智能起源\"><a href=\"#1-1-人工智能起源\" class=\"headerlink\" title=\"1.1. 人工智能起源\"></a>1.1. 人工智能起源</h3><ul>\n<li>图灵测试</li>\n<li>达特茅斯会议</li>\n</ul>\n<h3 id=\"1-2-人工智能三个阶段\"><a href=\"#1-2-人工智能三个阶段\" class=\"headerlink\" title=\"1.2. 人工智能三个阶段\"></a>1.2. 人工智能三个阶段</h3><ul>\n<li>1980年代是正式成形期</li>\n<li>1990-2010年代是蓬勃发展期</li>\n<li>2012年之后是深度学习期</li>\n</ul>\n<h3 id=\"1-3-人工智能、机器学习和深度学习\"><a href=\"#1-3-人工智能、机器学习和深度学习\" class=\"headerlink\" title=\"1.3. 人工智能、机器学习和深度学习\"></a>1.3. 人工智能、机器学习和深度学习</h3><ul>\n<li>机器学习是人工智能的一个实现途径</li>\n<li>深度学习是机器学习的一个方法发展而来</li>\n</ul>\n<h3 id=\"1-4-主要分支\"><a href=\"#1-4-主要分支\" class=\"headerlink\" title=\"1.4. 主要分支\"></a>1.4. 主要分支</h3><ul>\n<li>计算机视觉 CV<ul>\n<li>人脸识别</li>\n</ul>\n</li>\n<li>自然语言处理 NLP<ul>\n<li>语音识别</li>\n<li>语义识别</li>\n</ul>\n</li>\n<li>机器人</li>\n</ul>\n<h3 id=\"1-5-人工智能必备三要素\"><a href=\"#1-5-人工智能必备三要素\" class=\"headerlink\" title=\"1.5. 人工智能必备三要素\"></a>1.5. 人工智能必备三要素</h3><ul>\n<li>数据</li>\n<li>算法</li>\n<li>计算力</li>\n</ul>\n<h3 id=\"1-6-GPU、CPU\"><a href=\"#1-6-GPU、CPU\" class=\"headerlink\" title=\"1.6. GPU、CPU\"></a>1.6. GPU、CPU</h3><ul>\n<li>GPU – 计算密集型</li>\n<li>CPU  –  IO密集型</li>\n</ul>\n<h2 id=\"2-机器学习\"><a href=\"#2-机器学习\" class=\"headerlink\" title=\"2. 机器学习\"></a>2. 机器学习</h2><h3 id=\"2-1-工作流程\"><a href=\"#2-1-工作流程\" class=\"headerlink\" title=\"2.1. 工作流程\"></a>2.1. 工作流程</h3><ol>\n<li>数据获取</li>\n</ol>\n<p>数据类型构成</p>\n<ul>\n<li>特征值 + 目标值（目标值分为离散还是连续）</li>\n<li>仅有特征值，无目标值</li>\n</ul>\n<p>数据划分</p>\n<ul>\n<li>训练集 0.7~0.8</li>\n<li>测试集 0.2~0.3</li>\n</ul>\n<ol start=\"2\">\n<li>数据基本处理</li>\n</ol>\n<blockquote>\n<p>对数据进行缺失值、去除异常值等处理</p>\n</blockquote>\n<ol start=\"3\">\n<li>特征工程</li>\n</ol>\n<blockquote>\n<p>把数据转换为机器更容易识别的数据</p>\n<p>数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已</p>\n</blockquote>\n<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n<ol start=\"4\">\n<li>机器学习（模型训练）</li>\n</ol>\n<blockquote>\n<p>选择合适的算法对模型进行训练</p>\n</blockquote>\n<ol start=\"5\">\n<li>模型评估</li>\n</ol>\n<blockquote>\n<p>对训练好的模型进行评估</p>\n</blockquote>\n<h3 id=\"2-2-机器学习算法分类\"><a href=\"#2-2-机器学习算法分类\" class=\"headerlink\" title=\"2.2. 机器学习算法分类\"></a>2.2. 机器学习算法分类</h3><ul>\n<li>监督学习：有特征值，有目标值<ul>\n<li>目标值连续：回归</li>\n<li>目标值离散：分类</li>\n</ul>\n</li>\n<li>无监督学习：仅有特征值</li>\n<li>半监督学习：有特征值，但一部分数据有目标值 ，一部分没有</li>\n<li>强化学习：即自动进行决策，并可以做连续决策<ul>\n<li>动态过程，上一步的输出是下一步的输入</li>\n<li>四要素：agent, action, environment, reward</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-模型评估\"><a href=\"#2-3-模型评估\" class=\"headerlink\" title=\"2.3. 模型评估\"></a>2.3. 模型评估</h3><ul>\n<li><p>分类模型评估</p>\n<ul>\n<li>准确率：预测正确的数占样本总数的比例</li>\n<li>精确率：预测为正的数占全部预测为正的比例</li>\n<li>召回率： 预测为正占全部正样本的比例</li>\n<li>F1-score：主要用于评估模型的稳健性</li>\n<li>AUC指标：主要用于评估样本不均衡的情况</li>\n</ul>\n</li>\n<li><p>回归模型评估</p>\n<blockquote>\n<p>p &#x3D; predicted target</p>\n<p>a &#x3D; actual target</p>\n</blockquote>\n<ul>\n<li>均方根误差(Root Mean Squared Error, RMSE)</li>\n<li>相对平方误差(Relative Squared Error, RSE)</li>\n<li>平均绝对误差(Mean Absolute Error, MAE)</li>\n<li>相对绝对误差(Relative Absolute Error, RAE)</li>\n<li>决定系数(Coefficient of Determination)</li>\n</ul>\n</li>\n<li><p>拟合度（评估结果）</p>\n<ul>\n<li>欠拟合：学习到的特征太少（有两个眼睛的就是人）</li>\n<li>过拟合：学习到的特征太多（仅黄皮肤的才是人）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-机器学习环境配置\"><a href=\"#3-机器学习环境配置\" class=\"headerlink\" title=\"3. 机器学习环境配置\"></a>3. 机器学习环境配置</h2><h3 id=\"3-1-环境安装\"><a href=\"#3-1-环境安装\" class=\"headerlink\" title=\"3.1. 环境安装\"></a>3.1. 环境安装</h3><ul>\n<li>创建虚拟环境： <code>conda create --name=ai0 python=3.10</code></li>\n<li>安装相关包：<ul>\n<li>matplotlib&#x3D;&#x3D;2.2.2</li>\n<li>numpy&#x3D;&#x3D;1.14.2</li>\n<li>pandas&#x3D;&#x3D;0.20.3</li>\n<li>tables&#x3D;&#x3D;3.4.2</li>\n<li>jupyter&#x3D;1.0.0</li>\n</ul>\n</li>\n<li>先从cmd进入指定目录后执行<code>jupyter notebook</code></li>\n</ul>\n<h3 id=\"3-2-jupyter基操\"><a href=\"#3-2-jupyter基操\" class=\"headerlink\" title=\"3.2. jupyter基操\"></a>3.2. jupyter基操</h3><blockquote>\n<p>类似vim, 分不同的输入模式，命令也和vim基本相同</p>\n</blockquote>\n<ul>\n<li>两种模式通用快捷键<ul>\n<li><code>Shift + Enter</code>  执行本单元代码，跳转到下一单元</li>\n<li><code>Ctrl + Enter</code> 执行本单元代码，留在本单元</li>\n</ul>\n</li>\n<li><strong>命令模式</strong>：按 <code>ESC</code>  进入<ul>\n<li><code>Y</code>, cell 切换到Code模式</li>\n<li><code>M</code>, cell 切换到Markdown模式</li>\n<li><code>A</code>, 在当前cell上面添加cell</li>\n<li><code>B</code>, 在当前cell下面添加cell</li>\n<li><code>DD</code>, 删除当前cell</li>\n<li><code>Z</code>, 回退</li>\n<li><code>L</code>, 为当前cell加上行号&lt;!–</li>\n<li><code>Ctrl+Shift+P</code>, 对话框输入命令直接运行</li>\n<li><code>Ctrl+Home</code>, 跳转到首个cell</li>\n<li><code>Ctrl+End</code>, 跳转到末个cell</li>\n<li><code>Shift + M</code> 合并下面的cell</li>\n</ul>\n</li>\n<li><strong>编辑模式</strong>: 按 <code>Enter</code> 进入<ul>\n<li><code>Ctrl + 点击</code>, 多光标操作</li>\n<li><code>Ctrl + Z</code>, 回退</li>\n<li><code>Ctrl + Y</code>, 重做</li>\n<li><code>TAB</code>,  代码补全</li>\n<li><code>Ctrl + /</code> 注释&#x2F;取消注释</li>\n<li><code>代码后 + ;</code>  屏蔽输出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-Matplotlib\"><a href=\"#4-Matplotlib\" class=\"headerlink\" title=\"4. Matplotlib\"></a>4. Matplotlib</h2><blockquote>\n<p>用于开发2D、3D图表</p>\n<p>使用简单，以渐进、交互式实现数据可视化</p>\n</blockquote>\n<h3 id=\"4-1-三层结构\"><a href=\"#4-1-三层结构\" class=\"headerlink\" title=\"4.1. 三层结构\"></a>4.1. 三层结构</h3><ul>\n<li><strong>容器层</strong><ul>\n<li>Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具</li>\n<li>Figure: <code>Canvas</code>上第一层，充当画布角色 </li>\n<li>Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色<ul>\n<li>Axes: 坐标系，数据的绘图区域</li>\n<li>Axis: 坐标轴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>辅助显示层</strong>：为Axes内除了根据数据绘制出的图像以外的内容，主要包括<code>facecolor(Axes外观)</code>、<code>spines(边框线)</code>、<code>axis(坐标轴)</code> 、<code>axix lable(坐标轴名称)</code>、<code>tick(坐标轴刻度)</code>、<code>tick lable(坐标轴刻度标签)</code>、<code>gird(网格线)</code>、<code>legend(图例)</code>、<code>title(标题)</code>等</li>\n<li><strong>图像层</strong>：指<code>Axes</code>内通过 <code>plot</code>, <code>scatter</code>, <code>histogram</code>, <code>pie</code>等函数根据数据绘制出的图像。</li>\n</ul>\n<h3 id=\"4-2-折线图与基操\"><a href=\"#4-2-折线图与基操\" class=\"headerlink\" title=\"4.2. 折线图与基操\"></a>4.2. 折线图与基操</h3><blockquote>\n<p><code>help(plt.figure)</code> 查看命令帮助</p>\n<p>负号报错 plt.rcParams[“axes.unicode_minus”]&#x3D;False 加这句</p>\n<p>中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib&#x2F;mpl-data&#x2F;matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置</p>\n<p>报错<code>missing from current font</code>，加以下代码</p>\n<p><code>from pylab import mpl mpl.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;]</code></p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图像绘制</span></span><br><span class=\"line\">x = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]</span><br><span class=\"line\">y = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>, <span class=\"number\">8</span>)]</span><br><span class=\"line\">plt.plot(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 图像保存, 要放到show前</span></span><br><span class=\"line\">plt.savefig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>基操</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\">plt.plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">plt.plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">plt.xticks(x[::<span class=\"number\">5</span>], x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个坐标系图像显示</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个坐标系显示图像</span></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\"><span class=\"comment\"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">2</span>, figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_peking, color=&quot;r&quot;, label=&quot;北京&quot;, linestyle=&quot;dashed&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># plt.yticks(y_ticks[::5])</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(x[::5], x_ticks_labels[::5])</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\"><span class=\"comment\"># plt.grid(True, linestyle=&quot;-&quot;, alpha=1)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&quot;中午11：00到12：00温度变化&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\"><span class=\"comment\"># plt.legend(loc=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Numpy\"><a href=\"#5-Numpy\" class=\"headerlink\" title=\"5. Numpy\"></a>5. Numpy</h2><h3 id=\"5-1-基础\"><a href=\"#5-1-基础\" class=\"headerlink\" title=\"5.1. 基础\"></a>5.1. 基础</h3><p><strong>定义：</strong></p>\n<ul>\n<li>Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组</li>\n<li>Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多</li>\n<li>Numpy使用<code>ndarray</code>对象来处理多维数组，该对象是一个快速而灵活的大数据容器</li>\n</ul>\n<p><strong>优势：</strong></p>\n<ul>\n<li><p>内存块风格：<code>ndarray</code>在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快</p>\n<ul>\n<li>原因：<code>ndarray</code>中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以<code>ndarray</code>在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素</li>\n</ul>\n</li>\n<li><p>并行化运算：向量化运算</p>\n</li>\n<li><p>Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">score = np.array([random.sample(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>), <span class=\"number\">5</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)]) </span><br><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 效率对比</span></span><br><span class=\"line\">a = [random.random() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000_0000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %time 魔法方法，查看当前行代码运行耗时情况 </span></span><br><span class=\"line\"><span class=\"comment\"># cpu times CPU执行耗时, wall time 总耗时</span></span><br><span class=\"line\">%time sum1 = <span class=\"built_in\">sum</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = np.array(a)</span><br><span class=\"line\"></span><br><span class=\"line\">%time sum2 = np.<span class=\"built_in\">sum</span>(b)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 31.2 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 31.9 ms</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 15.6 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 9.97 ms</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用属性：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">score.shape  <span class=\"comment\"># (8, 5)</span></span><br><span class=\"line\">score.ndim  <span class=\"comment\"># 2  数组维度(也就是有几层[])</span></span><br><span class=\"line\">score.size  <span class=\"comment\"># 40</span></span><br><span class=\"line\">score.itemsize  <span class=\"comment\"># 4 每个元素占字节长度</span></span><br><span class=\"line\">score.dtype  <span class=\"comment\"># dtype(&#x27;int32&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置ndarray类型</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]], dtype=np.float32)</span><br><span class=\"line\">a.dtype  <span class=\"comment\"># dtype(&#x27;float32&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-1-生成数组\"><a href=\"#5-1-1-生成数组\" class=\"headerlink\" title=\"5.1.1.  生成数组\"></a>5.1.1.  生成数组</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0/1数组</span></span><br><span class=\"line\">np.ones([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从现有数组创建数组</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">a1 = np.array(a)  <span class=\"comment\"># 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a2 = np.asarray(a)  <span class=\"comment\"># 浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成固定范围数组</span></span><br><span class=\"line\">np.linespace(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">11</span>)  <span class=\"comment\"># 等间隔生成11个</span></span><br><span class=\"line\"><span class=\"comment\"># array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.aragne(<span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># 步长2来生成</span></span><br><span class=\"line\"><span class=\"comment\"># array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成随机数组</strong></p>\n<ul>\n<li><p>生成均匀分布：<code>np.random.uniform(low, high, size)</code></p>\n</li>\n<li><p>正态分布</p>\n<ul>\n<li>均值：平均值</li>\n<li>标准差：方差开根号</li>\n<li>生成标准正态分布：<code>np.random.normal(low, high, size)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 均匀分布</span></span><br><span class=\"line\">x = np.random.uniform(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">1000_0000</span>)  <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)  <span class=\"comment\"># 画布</span></span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)  <span class=\"comment\"># 绘制 x代表要使用的数据， bins表示要划分的区间数</span></span><br><span class=\"line\">plt.show()  <span class=\"comment\"># 显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正态分布</span></span><br><span class=\"line\">x = np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">1</span>, <span class=\"number\">1000_0000</span>)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-2-数组索引、切片\"><a href=\"#5-1-2-数组索引、切片\" class=\"headerlink\" title=\"5.1.2. 数组索引、切片\"></a>5.1.2. 数组索引、切片</h4><ul>\n<li>直接索引，先对行进行索引，再对列进行索引</li>\n<li>高维度索引，从宏观到微观</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))  <span class=\"comment\"># 8rows, 10cols</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># 前两行，前三列</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]], [[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]])</span><br><span class=\"line\">a[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 1</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 7</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 12</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-3-形状修改\"><a href=\"#5-1-3-形状修改\" class=\"headerlink\" title=\"5.1.3. 形状修改\"></a>5.1.3. 形状修改</h4><ul>\n<li><p><code>.reshape([rows, cols])</code> 不进行行列互换，产生新变量</p>\n</li>\n<li><p><code>.resize([rows, cols])</code> 进行行列互换，对原值 进行更改</p>\n</li>\n<li><p><code>.T</code> 行列互换</p>\n</li>\n</ul>\n<h4 id=\"5-1-4-类型修改\"><a href=\"#5-1-4-类型修改\" class=\"headerlink\" title=\"5.1.4. 类型修改\"></a>5.1.4. 类型修改</h4><ul>\n<li><p><code>.astype(np.int32)</code> </p>\n</li>\n<li><p><code>.tobytes()</code></p>\n</li>\n<li><p><code>np.unique(nparray)</code>  去重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">4</span> , <span class=\"number\">5</span>]])</span><br><span class=\"line\">np.unique(arr)</span><br><span class=\"line\"><span class=\"comment\"># array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-1-5-运算\"><a href=\"#5-1-5-运算\" class=\"headerlink\" title=\"5.1.5 运算\"></a>5.1.5 运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑运算</span></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">a &gt; <span class=\"number\">1</span>  <span class=\"comment\"># 全部数据进行此运算，结果赋值为 True/False</span></span><br><span class=\"line\">a[a &gt; <span class=\"number\">1</span>] = <span class=\"number\">2</span>  <span class=\"comment\"># 全部数据 &gt;1 赋值为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用判断函数,和python的all和any一样</span></span><br><span class=\"line\">b = a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 切为2行5列</span></span><br><span class=\"line\">np.<span class=\"built_in\">all</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\">np.<span class=\"built_in\">any</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三元运算</span></span><br><span class=\"line\">np.where(b &gt; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_and(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_or(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 统计运算</span></span><br><span class=\"line\"><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"built_in\">max</span></span><br><span class=\"line\">median</span><br><span class=\"line\">mean</span><br><span class=\"line\">std 标准差</span><br><span class=\"line\">var  方差</span><br><span class=\"line\">argmax  最大值下标</span><br><span class=\"line\">argmin  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-矩阵\"><a href=\"#5-2-矩阵\" class=\"headerlink\" title=\"5.2. 矩阵\"></a>5.2. 矩阵</h3><ul>\n<li>矩阵：二维数组<ul>\n<li>向量：一维数组</li>\n</ul>\n</li>\n<li>加法：对应位置相加</li>\n<li>标量乘法：标量和每个位置元素相乘</li>\n<li>矩阵乘法：[M行，N列] * [N行，L列] &#x3D; [M行，L列]<ul>\n<li>满足结合律，不满足交换律</li>\n</ul>\n</li>\n<li>单位矩阵：对角线为1，其他位置为0的矩阵</li>\n<li>逆：A * B &#x3D; 单位矩阵，A和B互为逆矩阵</li>\n<li>转置T：行列互换</li>\n</ul>\n<h3 id=\"5-3-数组间运算\"><a href=\"#5-3-数组间运算\" class=\"headerlink\" title=\"5.3. 数组间运算\"></a>5.3. 数组间运算</h3><ul>\n<li><p>数组和数字：可以直接运算</p>\n</li>\n<li><p>数组和数组：广播机制</p>\n<ul>\n<li>维度相同</li>\n<li>shape对应位置为1</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数组运算</span></span><br><span class=\"line\">arr1 = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]])  <span class=\"comment\"># 2，3</span></span><br><span class=\"line\">arr2 = np.array([[<span class=\"number\">2</span>], [<span class=\"number\">1</span>]])  <span class=\"comment\"># 2， 1  </span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1 + arr2  <span class=\"comment\"># 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">3</span>], [<span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">np.matmul(a, b)  <span class=\"comment\"># 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点乘</span></span><br><span class=\"line\">np.dot(<span class=\"number\">2</span>, b)  <span class=\"comment\"># array([[6], [4]])</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Pandas\"><a href=\"#6-Pandas\" class=\"headerlink\" title=\"6. Pandas\"></a>6. Pandas</h2><ul>\n<li>封装了Numpy 和 matplotlib</li>\n<li>便捷的数据处理，展示能力</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a_shape = pd.DataFrame(a).shape  <span class=\"comment\"># (10, 5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">row_index = [<span class=\"string\">f&quot;第<span class=\"subst\">&#123;i+<span class=\"number\">1</span>&#125;</span>行&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a_shape[<span class=\"number\">0</span>])]</span><br><span class=\"line\">column_name = pd.date_range(start=<span class=\"string\">&quot;20230713&quot;</span>, periods=a_shape[<span class=\"number\">1</span>], freq=<span class=\"string\">&quot;B&quot;</span>)  <span class=\"comment\"># freq:B 工作日 DatetimeIndex([&#x27;2023-07-13&#x27;, &#x27;2023-07-14&#x27;, &#x27;2023-07-17&#x27;, &#x27;2023-07-18&#x27;,&#x27;2023-07-19&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;B&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = pd.DataFrame(a, index=row_index, columns=column_name)  <span class=\"comment\"># 设置行索引, 列名</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.shape  <span class=\"comment\"># 形状</span></span><br><span class=\"line\">b.index  <span class=\"comment\"># 行索引</span></span><br><span class=\"line\">b.columns  <span class=\"comment\"># 列名</span></span><br><span class=\"line\">b.values  <span class=\"comment\"># array</span></span><br><span class=\"line\">b.T  <span class=\"comment\"># 转置</span></span><br><span class=\"line\">b.head()  <span class=\"comment\"># 前5行</span></span><br><span class=\"line\">b.tail()  <span class=\"comment\"># 后5行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重设索引</span></span><br><span class=\"line\">b.index = row_index</span><br><span class=\"line\">c = b.reset_index(drop=<span class=\"literal\">False</span>)  <span class=\"comment\"># 默认drop=False不删除原索引，增加index列 值为原索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置某列为索引，可设置多列</span></span><br><span class=\"line\">c.set_index(keys=[<span class=\"string\">&quot;index&quot;</span>])  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-K-近邻算法\"><a href=\"#7-K-近邻算法\" class=\"headerlink\" title=\"7. K-近邻算法\"></a>7. K-近邻算法</h2><blockquote>\n<p>根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)</p>\n<p>- </p>\n</blockquote>\n<h3 id=\"7-1-Scikit-learn\"><a href=\"#7-1-Scikit-learn\" class=\"headerlink\" title=\"7.1. Scikit-learn\"></a>7.1. Scikit-learn</h3><blockquote>\n<p>Classification  分类</p>\n<p>Regression  回归</p>\n<p>Clustering  聚类</p>\n<p>Dimensionality reduction 维度缩小</p>\n<p>Model selection  模型选择</p>\n<p>Preprocessing  特征预处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">x = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">0</span>], [<span class=\"number\">0</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># machine learning</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 实例化一个训练模型</span></span><br><span class=\"line\">estimator = KNeighborsClassifier(n_neighbors=<span class=\"number\">2</span>)  <span class=\"comment\"># 选定几个参考数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 调用fit方法进行训练</span></span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预测其他值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(estimator.predict([[-<span class=\"number\">1</span>]]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-距离度量\"><a href=\"#7-2-距离度量\" class=\"headerlink\" title=\"7.2. 距离度量\"></a>7.2. 距离度量</h3><p>欧式距离：差平方开根号</p>\n<p>曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)</p>\n<ul>\n<li>d &#x3D; |x1 - x2| + |y1 - y2|</li>\n</ul>\n<p>切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)</p>\n<p>闵可夫斯基距离(Minkowski Distance):<br>$$<br>d_{12} &#x3D; p\\sqrt{\\sum_{k&#x3D;1}^n|x_{1k} - x_{2k}|^p}<br>$$</p>\n<ul>\n<li>当p&#x3D;1, 为曼哈顿距离</li>\n<li>当p&#x3D;2，为欧氏距离</li>\n<li>当p$\\to\\infty$， 为切比雪夫距离</li>\n</ul>\n<p>标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)</p>\n<ul>\n<li>既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：</li>\n</ul>\n<p>$$<br>d_{12} &#x3D; \\sqrt{\\sum_{k&#x3D;1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}<br>$$</p>\n<p>余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异</p>\n<p>汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计</p>\n<p>杰卡德距离(Jaccard Distance): 通过交并集进行统计</p>\n<p>马氏距离(Mahalanobis Distance): 通过样本分布进行计算</p>\n<h3 id=\"7-3-K值选择\"><a href=\"#7-3-K值选择\" class=\"headerlink\" title=\"7.3. K值选择\"></a>7.3. K值选择</h3><p>过小：容易受到异常点的影响，容易过拟合</p>\n<p>过大：受到样本均衡的问题，容易欠拟合</p>\n<h3 id=\"7-4-KD树\"><a href=\"#7-4-KD树\" class=\"headerlink\" title=\"7.4. KD树\"></a>7.4. KD树</h3><h2 id=\"8-线性回归\"><a href=\"#8-线性回归\" class=\"headerlink\" title=\"8. 线性回归\"></a>8. 线性回归</h2><h2 id=\"9-逻辑回归\"><a href=\"#9-逻辑回归\" class=\"headerlink\" title=\"9. 逻辑回归\"></a>9. 逻辑回归</h2><h2 id=\"10-决策树算法\"><a href=\"#10-决策树算法\" class=\"headerlink\" title=\"10. 决策树算法\"></a>10. 决策树算法</h2><h2 id=\"11-集成学习\"><a href=\"#11-集成学习\" class=\"headerlink\" title=\"11. 集成学习\"></a>11. 集成学习</h2><h2 id=\"12-聚类算法\"><a href=\"#12-聚类算法\" class=\"headerlink\" title=\"12. 聚类算法\"></a>12. 聚类算法</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-人工智能起源\"><a href=\"#1-1-人工智能起源\" class=\"headerlink\" title=\"1.1. 人工智能起源\"></a>1.1. 人工智能起源</h3><ul>\n<li>图灵测试</li>\n<li>达特茅斯会议</li>\n</ul>\n<h3 id=\"1-2-人工智能三个阶段\"><a href=\"#1-2-人工智能三个阶段\" class=\"headerlink\" title=\"1.2. 人工智能三个阶段\"></a>1.2. 人工智能三个阶段</h3><ul>\n<li>1980年代是正式成形期</li>\n<li>1990-2010年代是蓬勃发展期</li>\n<li>2012年之后是深度学习期</li>\n</ul>\n<h3 id=\"1-3-人工智能、机器学习和深度学习\"><a href=\"#1-3-人工智能、机器学习和深度学习\" class=\"headerlink\" title=\"1.3. 人工智能、机器学习和深度学习\"></a>1.3. 人工智能、机器学习和深度学习</h3><ul>\n<li>机器学习是人工智能的一个实现途径</li>\n<li>深度学习是机器学习的一个方法发展而来</li>\n</ul>\n<h3 id=\"1-4-主要分支\"><a href=\"#1-4-主要分支\" class=\"headerlink\" title=\"1.4. 主要分支\"></a>1.4. 主要分支</h3><ul>\n<li>计算机视觉 CV<ul>\n<li>人脸识别</li>\n</ul>\n</li>\n<li>自然语言处理 NLP<ul>\n<li>语音识别</li>\n<li>语义识别</li>\n</ul>\n</li>\n<li>机器人</li>\n</ul>\n<h3 id=\"1-5-人工智能必备三要素\"><a href=\"#1-5-人工智能必备三要素\" class=\"headerlink\" title=\"1.5. 人工智能必备三要素\"></a>1.5. 人工智能必备三要素</h3><ul>\n<li>数据</li>\n<li>算法</li>\n<li>计算力</li>\n</ul>\n<h3 id=\"1-6-GPU、CPU\"><a href=\"#1-6-GPU、CPU\" class=\"headerlink\" title=\"1.6. GPU、CPU\"></a>1.6. GPU、CPU</h3><ul>\n<li>GPU – 计算密集型</li>\n<li>CPU  –  IO密集型</li>\n</ul>\n<h2 id=\"2-机器学习\"><a href=\"#2-机器学习\" class=\"headerlink\" title=\"2. 机器学习\"></a>2. 机器学习</h2><h3 id=\"2-1-工作流程\"><a href=\"#2-1-工作流程\" class=\"headerlink\" title=\"2.1. 工作流程\"></a>2.1. 工作流程</h3><ol>\n<li>数据获取</li>\n</ol>\n<p>数据类型构成</p>\n<ul>\n<li>特征值 + 目标值（目标值分为离散还是连续）</li>\n<li>仅有特征值，无目标值</li>\n</ul>\n<p>数据划分</p>\n<ul>\n<li>训练集 0.7~0.8</li>\n<li>测试集 0.2~0.3</li>\n</ul>\n<ol start=\"2\">\n<li>数据基本处理</li>\n</ol>\n<blockquote>\n<p>对数据进行缺失值、去除异常值等处理</p>\n</blockquote>\n<ol start=\"3\">\n<li>特征工程</li>\n</ol>\n<blockquote>\n<p>把数据转换为机器更容易识别的数据</p>\n<p>数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已</p>\n</blockquote>\n<ul>\n<li>特征提取</li>\n<li>特征预处理</li>\n<li>特征降维</li>\n</ul>\n<ol start=\"4\">\n<li>机器学习（模型训练）</li>\n</ol>\n<blockquote>\n<p>选择合适的算法对模型进行训练</p>\n</blockquote>\n<ol start=\"5\">\n<li>模型评估</li>\n</ol>\n<blockquote>\n<p>对训练好的模型进行评估</p>\n</blockquote>\n<h3 id=\"2-2-机器学习算法分类\"><a href=\"#2-2-机器学习算法分类\" class=\"headerlink\" title=\"2.2. 机器学习算法分类\"></a>2.2. 机器学习算法分类</h3><ul>\n<li>监督学习：有特征值，有目标值<ul>\n<li>目标值连续：回归</li>\n<li>目标值离散：分类</li>\n</ul>\n</li>\n<li>无监督学习：仅有特征值</li>\n<li>半监督学习：有特征值，但一部分数据有目标值 ，一部分没有</li>\n<li>强化学习：即自动进行决策，并可以做连续决策<ul>\n<li>动态过程，上一步的输出是下一步的输入</li>\n<li>四要素：agent, action, environment, reward</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-模型评估\"><a href=\"#2-3-模型评估\" class=\"headerlink\" title=\"2.3. 模型评估\"></a>2.3. 模型评估</h3><ul>\n<li><p>分类模型评估</p>\n<ul>\n<li>准确率：预测正确的数占样本总数的比例</li>\n<li>精确率：预测为正的数占全部预测为正的比例</li>\n<li>召回率： 预测为正占全部正样本的比例</li>\n<li>F1-score：主要用于评估模型的稳健性</li>\n<li>AUC指标：主要用于评估样本不均衡的情况</li>\n</ul>\n</li>\n<li><p>回归模型评估</p>\n<blockquote>\n<p>p &#x3D; predicted target</p>\n<p>a &#x3D; actual target</p>\n</blockquote>\n<ul>\n<li>均方根误差(Root Mean Squared Error, RMSE)</li>\n<li>相对平方误差(Relative Squared Error, RSE)</li>\n<li>平均绝对误差(Mean Absolute Error, MAE)</li>\n<li>相对绝对误差(Relative Absolute Error, RAE)</li>\n<li>决定系数(Coefficient of Determination)</li>\n</ul>\n</li>\n<li><p>拟合度（评估结果）</p>\n<ul>\n<li>欠拟合：学习到的特征太少（有两个眼睛的就是人）</li>\n<li>过拟合：学习到的特征太多（仅黄皮肤的才是人）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-机器学习环境配置\"><a href=\"#3-机器学习环境配置\" class=\"headerlink\" title=\"3. 机器学习环境配置\"></a>3. 机器学习环境配置</h2><h3 id=\"3-1-环境安装\"><a href=\"#3-1-环境安装\" class=\"headerlink\" title=\"3.1. 环境安装\"></a>3.1. 环境安装</h3><ul>\n<li>创建虚拟环境： <code>conda create --name=ai0 python=3.10</code></li>\n<li>安装相关包：<ul>\n<li>matplotlib&#x3D;&#x3D;2.2.2</li>\n<li>numpy&#x3D;&#x3D;1.14.2</li>\n<li>pandas&#x3D;&#x3D;0.20.3</li>\n<li>tables&#x3D;&#x3D;3.4.2</li>\n<li>jupyter&#x3D;1.0.0</li>\n</ul>\n</li>\n<li>先从cmd进入指定目录后执行<code>jupyter notebook</code></li>\n</ul>\n<h3 id=\"3-2-jupyter基操\"><a href=\"#3-2-jupyter基操\" class=\"headerlink\" title=\"3.2. jupyter基操\"></a>3.2. jupyter基操</h3><blockquote>\n<p>类似vim, 分不同的输入模式，命令也和vim基本相同</p>\n</blockquote>\n<ul>\n<li>两种模式通用快捷键<ul>\n<li><code>Shift + Enter</code>  执行本单元代码，跳转到下一单元</li>\n<li><code>Ctrl + Enter</code> 执行本单元代码，留在本单元</li>\n</ul>\n</li>\n<li><strong>命令模式</strong>：按 <code>ESC</code>  进入<ul>\n<li><code>Y</code>, cell 切换到Code模式</li>\n<li><code>M</code>, cell 切换到Markdown模式</li>\n<li><code>A</code>, 在当前cell上面添加cell</li>\n<li><code>B</code>, 在当前cell下面添加cell</li>\n<li><code>DD</code>, 删除当前cell</li>\n<li><code>Z</code>, 回退</li>\n<li><code>L</code>, 为当前cell加上行号&lt;!–</li>\n<li><code>Ctrl+Shift+P</code>, 对话框输入命令直接运行</li>\n<li><code>Ctrl+Home</code>, 跳转到首个cell</li>\n<li><code>Ctrl+End</code>, 跳转到末个cell</li>\n<li><code>Shift + M</code> 合并下面的cell</li>\n</ul>\n</li>\n<li><strong>编辑模式</strong>: 按 <code>Enter</code> 进入<ul>\n<li><code>Ctrl + 点击</code>, 多光标操作</li>\n<li><code>Ctrl + Z</code>, 回退</li>\n<li><code>Ctrl + Y</code>, 重做</li>\n<li><code>TAB</code>,  代码补全</li>\n<li><code>Ctrl + /</code> 注释&#x2F;取消注释</li>\n<li><code>代码后 + ;</code>  屏蔽输出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-Matplotlib\"><a href=\"#4-Matplotlib\" class=\"headerlink\" title=\"4. Matplotlib\"></a>4. Matplotlib</h2><blockquote>\n<p>用于开发2D、3D图表</p>\n<p>使用简单，以渐进、交互式实现数据可视化</p>\n</blockquote>\n<h3 id=\"4-1-三层结构\"><a href=\"#4-1-三层结构\" class=\"headerlink\" title=\"4.1. 三层结构\"></a>4.1. 三层结构</h3><ul>\n<li><strong>容器层</strong><ul>\n<li>Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具</li>\n<li>Figure: <code>Canvas</code>上第一层，充当画布角色 </li>\n<li>Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色<ul>\n<li>Axes: 坐标系，数据的绘图区域</li>\n<li>Axis: 坐标轴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>辅助显示层</strong>：为Axes内除了根据数据绘制出的图像以外的内容，主要包括<code>facecolor(Axes外观)</code>、<code>spines(边框线)</code>、<code>axis(坐标轴)</code> 、<code>axix lable(坐标轴名称)</code>、<code>tick(坐标轴刻度)</code>、<code>tick lable(坐标轴刻度标签)</code>、<code>gird(网格线)</code>、<code>legend(图例)</code>、<code>title(标题)</code>等</li>\n<li><strong>图像层</strong>：指<code>Axes</code>内通过 <code>plot</code>, <code>scatter</code>, <code>histogram</code>, <code>pie</code>等函数根据数据绘制出的图像。</li>\n</ul>\n<h3 id=\"4-2-折线图与基操\"><a href=\"#4-2-折线图与基操\" class=\"headerlink\" title=\"4.2. 折线图与基操\"></a>4.2. 折线图与基操</h3><blockquote>\n<p><code>help(plt.figure)</code> 查看命令帮助</p>\n<p>负号报错 plt.rcParams[“axes.unicode_minus”]&#x3D;False 加这句</p>\n<p>中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib&#x2F;mpl-data&#x2F;matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置</p>\n<p>报错<code>missing from current font</code>，加以下代码</p>\n<p><code>from pylab import mpl mpl.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;]</code></p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.创建画布</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图像绘制</span></span><br><span class=\"line\">x = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]</span><br><span class=\"line\">y = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>, <span class=\"number\">8</span>)]</span><br><span class=\"line\">plt.plot(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 图像保存, 要放到show前</span></span><br><span class=\"line\">plt.savefig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.显示图像</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>基操</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\">plt.plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">plt.plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">plt.xticks(x[::<span class=\"number\">5</span>], x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个坐标系图像显示</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个坐标系显示图像</span></span><br><span class=\"line\"><span class=\"comment\"># 0.生成数据</span></span><br><span class=\"line\">x = <span class=\"built_in\">range</span>(<span class=\"number\">60</span>)</span><br><span class=\"line\">y_peking = [random.uniform(<span class=\"number\">10</span>, <span class=\"number\">15</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_shanghai = [random.uniform(<span class=\"number\">15</span>, <span class=\"number\">25</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建画布</span></span><br><span class=\"line\"><span class=\"comment\"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class=\"line\">fig, axes = plt.subplots(nrows=<span class=\"number\">1</span>, ncols=<span class=\"number\">2</span>, figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形绘制</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_peking, color=&quot;r&quot;, label=&quot;北京&quot;, linestyle=&quot;dashed&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].plot(x, y_peking, color=<span class=\"string\">&quot;r&quot;</span>, label=<span class=\"string\">&quot;北京&quot;</span>, linestyle=<span class=\"string\">&quot;dashed&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].plot(x, y_shanghai, label=<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1. 添加x,y刻度</span></span><br><span class=\"line\">x_ticks_labels = [<span class=\"string\">f&quot;11点<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">y_ticks = <span class=\"built_in\">range</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># plt.yticks(y_ticks[::5])</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xticks(x[::5], x_ticks_labels[::5])</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticks(x[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_yticks(y_ticks[::<span class=\"number\">5</span>])</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xticklabels(x_ticks_labels[::<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.2. 添加网络信息</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class=\"line\"><span class=\"comment\"># plt.grid(True, linestyle=&quot;-&quot;, alpha=1)</span></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].grid(<span class=\"literal\">True</span>, linestyle=<span class=\"string\">&quot;-&quot;</span>, alpha=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.3. 添加描述</span></span><br><span class=\"line\"><span class=\"comment\"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&quot;中午11：00到12：00温度变化&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">0</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_xlabel(<span class=\"string\">&quot;时间&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_ylabel(<span class=\"string\">&quot;温度&quot;</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].set_title(<span class=\"string\">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class=\"line\"><span class=\"comment\"># plt.legend(loc=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">axes[<span class=\"number\">0</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\">axes[<span class=\"number\">1</span>].legend(loc=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 图像显示</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Numpy\"><a href=\"#5-Numpy\" class=\"headerlink\" title=\"5. Numpy\"></a>5. Numpy</h2><h3 id=\"5-1-基础\"><a href=\"#5-1-基础\" class=\"headerlink\" title=\"5.1. 基础\"></a>5.1. 基础</h3><p><strong>定义：</strong></p>\n<ul>\n<li>Numpy(Numerical Python) 是一个开源的Python科学计算库，用于快速处理任意维度的数组</li>\n<li>Numpy支持觉的数组和矩阵操作，对于同样数值计算任务，使用Numpy比直接使用Python简洁的多</li>\n<li>Numpy使用<code>ndarray</code>对象来处理多维数组，该对象是一个快速而灵活的大数据容器</li>\n</ul>\n<p><strong>优势：</strong></p>\n<ul>\n<li><p>内存块风格：<code>ndarray</code>在存储数据时，数据和数据的地址是连续的，这样使得批量操作数组元素时速度更快</p>\n<ul>\n<li>原因：<code>ndarray</code>中所有的元素类型是相同的，而Python列表中的元素类型是任意的，所以<code>ndarray</code>在存储元素时内存可以连续，而原生列表只能通过寻址方式找到下一个元素</li>\n</ul>\n</li>\n<li><p>并行化运算：向量化运算</p>\n</li>\n<li><p>Numpy底层使用C语言编写，内部解除了GIL，其对数组的操作速度不受Python解释器的限制，所以效率远高于纯Python代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">score = np.array([random.sample(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>), <span class=\"number\">5</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)]) </span><br><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 效率对比</span></span><br><span class=\"line\">a = [random.random() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000_0000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %time 魔法方法，查看当前行代码运行耗时情况 </span></span><br><span class=\"line\"><span class=\"comment\"># cpu times CPU执行耗时, wall time 总耗时</span></span><br><span class=\"line\">%time sum1 = <span class=\"built_in\">sum</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = np.array(a)</span><br><span class=\"line\"></span><br><span class=\"line\">%time sum2 = np.<span class=\"built_in\">sum</span>(b)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 31.2 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 31.9 ms</span></span><br><span class=\"line\"><span class=\"string\">CPU times: total: 15.6 ms</span></span><br><span class=\"line\"><span class=\"string\">Wall time: 9.97 ms</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用属性：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[41, 11,  1, 56, 40],</span></span><br><span class=\"line\"><span class=\"string\">       [30, 29, 38, 62, 68],</span></span><br><span class=\"line\"><span class=\"string\">       [75, 38, 76, 45,  2],</span></span><br><span class=\"line\"><span class=\"string\">       [63, 84, 68, 26, 60],</span></span><br><span class=\"line\"><span class=\"string\">       [45, 48, 58, 33, 21],</span></span><br><span class=\"line\"><span class=\"string\">       [ 1, 74, 44, 19, 97],</span></span><br><span class=\"line\"><span class=\"string\">       [15, 73, 63, 82, 95],</span></span><br><span class=\"line\"><span class=\"string\">       [20, 73, 15,  8, 93]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">score.shape  <span class=\"comment\"># (8, 5)</span></span><br><span class=\"line\">score.ndim  <span class=\"comment\"># 2  数组维度(也就是有几层[])</span></span><br><span class=\"line\">score.size  <span class=\"comment\"># 40</span></span><br><span class=\"line\">score.itemsize  <span class=\"comment\"># 4 每个元素占字节长度</span></span><br><span class=\"line\">score.dtype  <span class=\"comment\"># dtype(&#x27;int32&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置ndarray类型</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]], dtype=np.float32)</span><br><span class=\"line\">a.dtype  <span class=\"comment\"># dtype(&#x27;float32&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-1-生成数组\"><a href=\"#5-1-1-生成数组\" class=\"headerlink\" title=\"5.1.1.  生成数组\"></a>5.1.1.  生成数组</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0/1数组</span></span><br><span class=\"line\">np.ones([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">       [1., 1., 1., 1.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">array([[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">       [0., 0., 0., 0.]])</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从现有数组创建数组</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">a1 = np.array(a)  <span class=\"comment\"># 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">a2 = np.asarray(a)  <span class=\"comment\"># 浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成固定范围数组</span></span><br><span class=\"line\">np.linespace(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">11</span>)  <span class=\"comment\"># 等间隔生成11个</span></span><br><span class=\"line\"><span class=\"comment\"># array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.aragne(<span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># 步长2来生成</span></span><br><span class=\"line\"><span class=\"comment\"># array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>生成随机数组</strong></p>\n<ul>\n<li><p>生成均匀分布：<code>np.random.uniform(low, high, size)</code></p>\n</li>\n<li><p>正态分布</p>\n<ul>\n<li>均值：平均值</li>\n<li>标准差：方差开根号</li>\n<li>生成标准正态分布：<code>np.random.normal(low, high, size)</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 均匀分布</span></span><br><span class=\"line\">x = np.random.uniform(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">1000_0000</span>)  <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)  <span class=\"comment\"># 画布</span></span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)  <span class=\"comment\"># 绘制 x代表要使用的数据， bins表示要划分的区间数</span></span><br><span class=\"line\">plt.show()  <span class=\"comment\"># 显示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正态分布</span></span><br><span class=\"line\">x = np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">1</span>, <span class=\"number\">1000_0000</span>)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>, <span class=\"number\">8</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\">plt.hist(x, bins=<span class=\"number\">1000</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-2-数组索引、切片\"><a href=\"#5-1-2-数组索引、切片\" class=\"headerlink\" title=\"5.1.2. 数组索引、切片\"></a>5.1.2. 数组索引、切片</h4><ul>\n<li>直接索引，先对行进行索引，再对列进行索引</li>\n<li>高维度索引，从宏观到微观</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))  <span class=\"comment\"># 8rows, 10cols</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># 前两行，前三列</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]], [[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]])</span><br><span class=\"line\">a[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 1</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]  <span class=\"comment\"># 7</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 12</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-1-3-形状修改\"><a href=\"#5-1-3-形状修改\" class=\"headerlink\" title=\"5.1.3. 形状修改\"></a>5.1.3. 形状修改</h4><ul>\n<li><p><code>.reshape([rows, cols])</code> 不进行行列互换，产生新变量</p>\n</li>\n<li><p><code>.resize([rows, cols])</code> 进行行列互换，对原值 进行更改</p>\n</li>\n<li><p><code>.T</code> 行列互换</p>\n</li>\n</ul>\n<h4 id=\"5-1-4-类型修改\"><a href=\"#5-1-4-类型修改\" class=\"headerlink\" title=\"5.1.4. 类型修改\"></a>5.1.4. 类型修改</h4><ul>\n<li><p><code>.astype(np.int32)</code> </p>\n</li>\n<li><p><code>.tobytes()</code></p>\n</li>\n<li><p><code>np.unique(nparray)</code>  去重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,<span class=\"number\">4</span> , <span class=\"number\">5</span>]])</span><br><span class=\"line\">np.unique(arr)</span><br><span class=\"line\"><span class=\"comment\"># array([1, 2, 3, 4, 5])</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-1-5-运算\"><a href=\"#5-1-5-运算\" class=\"headerlink\" title=\"5.1.5 运算\"></a>5.1.5 运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑运算</span></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">8</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">a &gt; <span class=\"number\">1</span>  <span class=\"comment\"># 全部数据进行此运算，结果赋值为 True/False</span></span><br><span class=\"line\">a[a &gt; <span class=\"number\">1</span>] = <span class=\"number\">2</span>  <span class=\"comment\"># 全部数据 &gt;1 赋值为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用判断函数,和python的all和any一样</span></span><br><span class=\"line\">b = a[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 切为2行5列</span></span><br><span class=\"line\">np.<span class=\"built_in\">all</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\">np.<span class=\"built_in\">any</span>(b &gt; <span class=\"number\">0</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三元运算</span></span><br><span class=\"line\">np.where(b &gt; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_and(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 0, 0, 0, 0],[0, 1, 1, 0, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">np.where(np.logical_or(b &gt; -<span class=\"number\">0.5</span>, b &lt; <span class=\"number\">0.5</span>), <span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 统计运算</span></span><br><span class=\"line\"><span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"built_in\">max</span></span><br><span class=\"line\">median</span><br><span class=\"line\">mean</span><br><span class=\"line\">std 标准差</span><br><span class=\"line\">var  方差</span><br><span class=\"line\">argmax  最大值下标</span><br><span class=\"line\">argmin  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-矩阵\"><a href=\"#5-2-矩阵\" class=\"headerlink\" title=\"5.2. 矩阵\"></a>5.2. 矩阵</h3><ul>\n<li>矩阵：二维数组<ul>\n<li>向量：一维数组</li>\n</ul>\n</li>\n<li>加法：对应位置相加</li>\n<li>标量乘法：标量和每个位置元素相乘</li>\n<li>矩阵乘法：[M行，N列] * [N行，L列] &#x3D; [M行，L列]<ul>\n<li>满足结合律，不满足交换律</li>\n</ul>\n</li>\n<li>单位矩阵：对角线为1，其他位置为0的矩阵</li>\n<li>逆：A * B &#x3D; 单位矩阵，A和B互为逆矩阵</li>\n<li>转置T：行列互换</li>\n</ul>\n<h3 id=\"5-3-数组间运算\"><a href=\"#5-3-数组间运算\" class=\"headerlink\" title=\"5.3. 数组间运算\"></a>5.3. 数组间运算</h3><ul>\n<li><p>数组和数字：可以直接运算</p>\n</li>\n<li><p>数组和数组：广播机制</p>\n<ul>\n<li>维度相同</li>\n<li>shape对应位置为1</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数组运算</span></span><br><span class=\"line\">arr1 = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]])  <span class=\"comment\"># 2，3</span></span><br><span class=\"line\">arr2 = np.array([[<span class=\"number\">2</span>], [<span class=\"number\">1</span>]])  <span class=\"comment\"># 2， 1  </span></span><br><span class=\"line\"></span><br><span class=\"line\">arr1 + arr2  <span class=\"comment\"># 广播机制：2==2，1 in (1, 3) 输出： array([[3, 4, 5], [3, 4, 5]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法</span></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">3</span>], [<span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘</span></span><br><span class=\"line\">np.matmul(a, b)  <span class=\"comment\"># 要求 3行2列 * 2行1列 输出：3行1列 array([[ 7], [12], [17]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点乘</span></span><br><span class=\"line\">np.dot(<span class=\"number\">2</span>, b)  <span class=\"comment\"># array([[6], [4]])</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-Pandas\"><a href=\"#6-Pandas\" class=\"headerlink\" title=\"6. Pandas\"></a>6. Pandas</h2><ul>\n<li>封装了Numpy 和 matplotlib</li>\n<li>便捷的数据处理，展示能力</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a_shape = pd.DataFrame(a).shape  <span class=\"comment\"># (10, 5)</span></span><br><span class=\"line\"></span><br><span class=\"line\">row_index = [<span class=\"string\">f&quot;第<span class=\"subst\">&#123;i+<span class=\"number\">1</span>&#125;</span>行&quot;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a_shape[<span class=\"number\">0</span>])]</span><br><span class=\"line\">column_name = pd.date_range(start=<span class=\"string\">&quot;20230713&quot;</span>, periods=a_shape[<span class=\"number\">1</span>], freq=<span class=\"string\">&quot;B&quot;</span>)  <span class=\"comment\"># freq:B 工作日 DatetimeIndex([&#x27;2023-07-13&#x27;, &#x27;2023-07-14&#x27;, &#x27;2023-07-17&#x27;, &#x27;2023-07-18&#x27;,&#x27;2023-07-19&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;B&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = pd.DataFrame(a, index=row_index, columns=column_name)  <span class=\"comment\"># 设置行索引, 列名</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.shape  <span class=\"comment\"># 形状</span></span><br><span class=\"line\">b.index  <span class=\"comment\"># 行索引</span></span><br><span class=\"line\">b.columns  <span class=\"comment\"># 列名</span></span><br><span class=\"line\">b.values  <span class=\"comment\"># array</span></span><br><span class=\"line\">b.T  <span class=\"comment\"># 转置</span></span><br><span class=\"line\">b.head()  <span class=\"comment\"># 前5行</span></span><br><span class=\"line\">b.tail()  <span class=\"comment\"># 后5行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重设索引</span></span><br><span class=\"line\">b.index = row_index</span><br><span class=\"line\">c = b.reset_index(drop=<span class=\"literal\">False</span>)  <span class=\"comment\"># 默认drop=False不删除原索引，增加index列 值为原索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置某列为索引，可设置多列</span></span><br><span class=\"line\">c.set_index(keys=[<span class=\"string\">&quot;index&quot;</span>])  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-K-近邻算法\"><a href=\"#7-K-近邻算法\" class=\"headerlink\" title=\"7. K-近邻算法\"></a>7. K-近邻算法</h2><blockquote>\n<p>根据邻居判断自己的类别，是一种分类算法，K Nearst Neighbor(KNN)</p>\n<p>- </p>\n</blockquote>\n<h3 id=\"7-1-Scikit-learn\"><a href=\"#7-1-Scikit-learn\" class=\"headerlink\" title=\"7.1. Scikit-learn\"></a>7.1. Scikit-learn</h3><blockquote>\n<p>Classification  分类</p>\n<p>Regression  回归</p>\n<p>Clustering  聚类</p>\n<p>Dimensionality reduction 维度缩小</p>\n<p>Model selection  模型选择</p>\n<p>Preprocessing  特征预处理</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">x = [[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">0</span>], [<span class=\"number\">0</span>]]</span><br><span class=\"line\">y = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># machine learning</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 实例化一个训练模型</span></span><br><span class=\"line\">estimator = KNeighborsClassifier(n_neighbors=<span class=\"number\">2</span>)  <span class=\"comment\"># 选定几个参考数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 调用fit方法进行训练</span></span><br><span class=\"line\">estimator.fit(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预测其他值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(estimator.predict([[-<span class=\"number\">1</span>]]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-距离度量\"><a href=\"#7-2-距离度量\" class=\"headerlink\" title=\"7.2. 距离度量\"></a>7.2. 距离度量</h3><p>欧式距离：差平方开根号</p>\n<p>曼哈顿距离(Manhattan Distance): 又称为城市街区距离(City Block distance)</p>\n<ul>\n<li>d &#x3D; |x1 - x2| + |y1 - y2|</li>\n</ul>\n<p>切比雪夫距离(Chebyshev Distance): max(|x1-x2|, |y1-y2|)</p>\n<p>闵可夫斯基距离(Minkowski Distance):<br>$$<br>d_{12} &#x3D; p\\sqrt{\\sum_{k&#x3D;1}^n|x_{1k} - x_{2k}|^p}<br>$$</p>\n<ul>\n<li>当p&#x3D;1, 为曼哈顿距离</li>\n<li>当p&#x3D;2，为欧氏距离</li>\n<li>当p$\\to\\infty$， 为切比雪夫距离</li>\n</ul>\n<p>标准化欧氏距离(Standardized EuclideanDistance): 对欧氏距离的一种改进, 如果将方差的倒数看成一个权重，也可称为加权欧氏距离(Weighted Euclidean distance)</p>\n<ul>\n<li>既然数据各维分量的分布不同，将各个分量都标准化到均值、方差相等，假设样本均值为m(mean), 标准差(standard deviation)为s， 则公式为：</li>\n</ul>\n<p>$$<br>d_{12} &#x3D; \\sqrt{\\sum_{k&#x3D;1}^n(\\frac{x_{1k}-x_{2k}}{s_k})^2}<br>$$</p>\n<p>余弦距离(Cosine Distance)： 夹角余弦取值范围为[-1, 1], 余弦越大表示两个向量夹角越小，当两个向量的方向重合时值为1， 相反为-1，用来衡量样本间的差异</p>\n<p>汉明距离(Hamming Distance): 一个字符串到另一个字符串需要变换几个字母，进行统计</p>\n<p>杰卡德距离(Jaccard Distance): 通过交并集进行统计</p>\n<p>马氏距离(Mahalanobis Distance): 通过样本分布进行计算</p>\n<h3 id=\"7-3-K值选择\"><a href=\"#7-3-K值选择\" class=\"headerlink\" title=\"7.3. K值选择\"></a>7.3. K值选择</h3><p>过小：容易受到异常点的影响，容易过拟合</p>\n<p>过大：受到样本均衡的问题，容易欠拟合</p>\n<h3 id=\"7-4-KD树\"><a href=\"#7-4-KD树\" class=\"headerlink\" title=\"7.4. KD树\"></a>7.4. KD树</h3><h2 id=\"8-线性回归\"><a href=\"#8-线性回归\" class=\"headerlink\" title=\"8. 线性回归\"></a>8. 线性回归</h2><h2 id=\"9-逻辑回归\"><a href=\"#9-逻辑回归\" class=\"headerlink\" title=\"9. 逻辑回归\"></a>9. 逻辑回归</h2><h2 id=\"10-决策树算法\"><a href=\"#10-决策树算法\" class=\"headerlink\" title=\"10. 决策树算法\"></a>10. 决策树算法</h2><h2 id=\"11-集成学习\"><a href=\"#11-集成学习\" class=\"headerlink\" title=\"11. 集成学习\"></a>11. 集成学习</h2><h2 id=\"12-聚类算法\"><a href=\"#12-聚类算法\" class=\"headerlink\" title=\"12. 聚类算法\"></a>12. 聚类算法</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"clwixegcc000pisuh2xkm28k2","category_id":"clwixegcd000risuh3gr64rnw","_id":"clwixegcf0010isuhfv0sf90c"},{"post_id":"clwixegcf000yisuha7wh8dln","category_id":"clwixegcg0012isuh5usx1cn5","_id":"clwixegcg0016isuh6jaxfw9z"}],"PostTag":[{"post_id":"clwixegc10001isuh3tf99z2e","tag_id":"clwixegc50004isuh19xbdbuc","_id":"clwixegc70009isuh2pa2hpla"},{"post_id":"clwixegc9000eisuhf2ii8b7f","tag_id":"clwixegca000gisuhdv2b4nh5","_id":"clwixegcb000kisuhard70yjl"},{"post_id":"clwixegcc000misuhh7iw7a53","tag_id":"clwixegcc000oisuh3ez20dws","_id":"clwixegce000uisuhbwce1bfh"},{"post_id":"clwixegcc000nisuha4d9h7bt","tag_id":"clwixegce000tisuh63gpdzrp","_id":"clwixegcf000zisuh3cy69mpa"},{"post_id":"clwixegcc000pisuh2xkm28k2","tag_id":"clwixegcf000xisuh1ye4bu1w","_id":"clwixegcg0013isuh6ixxg5vu"},{"post_id":"clwixegce000sisuh5n8g75ug","tag_id":"clwixegcg0011isuh7tj9f1pf","_id":"clwixegcg0015isuh57vj8vta"},{"post_id":"clwixegcf000yisuha7wh8dln","tag_id":"clwixegcg0014isuh0boc7gyr","_id":"clwixegcg0017isuh82879tk0"},{"post_id":"clwixvn0c0000csuh51y5cnvo","tag_id":"clwixvn0e0001csuhh43d5xj4","_id":"clwixvn0e0002csuh6k0mhc03"},{"post_id":"clwixegcd000qisuh38hicyqf","tag_id":"clwizseha0003csuh6zohgw7s","_id":"clwizseha0004csuh8j2mbxyt"}],"Tag":[{"name":"网络基础","_id":"clwixegc50004isuh19xbdbuc"},{"name":"uc machine","_id":"clwixegca000gisuhdv2b4nh5"},{"name":"python conda","_id":"clwixegcc000oisuh3ez20dws"},{"name":"python","_id":"clwixegce000tisuh63gpdzrp"},{"name":"bug","_id":"clwixegcf000xisuh1ye4bu1w"},{"name":"python machine-learning","_id":"clwixegcg0011isuh7tj9f1pf"},{"name":"计组","_id":"clwixegcg0014isuh0boc7gyr"},{"name":"machine-learning","_id":"clwixvn0e0001csuhh43d5xj4"},{"name":"数据结构","_id":"clwizseha0003csuh6zohgw7s"}]}}